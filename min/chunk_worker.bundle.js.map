{
  "version": 3,
  "sources": ["../../node_modules/lodash/isObject.js", "../../node_modules/lodash/_freeGlobal.js", "../../node_modules/lodash/_root.js", "../../node_modules/lodash/now.js", "../../node_modules/lodash/_trimmedEndIndex.js", "../../node_modules/lodash/_baseTrim.js", "../../node_modules/lodash/_Symbol.js", "../../node_modules/lodash/_getRawTag.js", "../../node_modules/lodash/_objectToString.js", "../../node_modules/lodash/_baseGetTag.js", "../../node_modules/lodash/isObjectLike.js", "../../node_modules/lodash/isSymbol.js", "../../node_modules/lodash/toNumber.js", "../../node_modules/lodash/debounce.js", "../../node_modules/lodash/throttle.js", "../../src/neuroglancer/mesh/draco/index.ts", "../../node_modules/nifti-reader-js/src/utilities.js", "../../node_modules/nifti-reader-js/src/nifti1.js", "../../node_modules/nifti-reader-js/src/nifti2.js", "../../node_modules/pako/lib/zlib/trees.js", "../../node_modules/pako/lib/zlib/adler32.js", "../../node_modules/pako/lib/zlib/crc32.js", "../../node_modules/pako/lib/zlib/messages.js", "../../node_modules/pako/lib/zlib/constants.js", "../../node_modules/pako/lib/zlib/deflate.js", "../../node_modules/pako/lib/utils/common.js", "../../node_modules/pako/lib/utils/strings.js", "../../node_modules/pako/lib/zlib/zstream.js", "../../node_modules/pako/lib/deflate.js", "../../node_modules/pako/lib/zlib/inffast.js", "../../node_modules/pako/lib/zlib/inftrees.js", "../../node_modules/pako/lib/zlib/inflate.js", "../../node_modules/pako/lib/zlib/gzheader.js", "../../node_modules/pako/lib/inflate.js", "../../node_modules/pako/index.js", "../../node_modules/nifti-reader-js/src/nifti.js", "../../src/neuroglancer/util/cancellation.ts", "../../src/neuroglancer/util/disposable.ts", "../../src/neuroglancer/worker_rpc.ts", "../../src/neuroglancer/worker_rpc_context.ts", "../../src/neuroglancer/chunk_manager/backend.ts", "../../src/neuroglancer/chunk_manager/base.ts", "../../src/neuroglancer/util/linked_list.0.ts", "../../src/neuroglancer/util/linked_list.1.ts", "../../node_modules/gl-matrix/esm/common.js", "../../node_modules/gl-matrix/esm/mat3.js", "../../node_modules/gl-matrix/esm/mat4.js", "../../node_modules/gl-matrix/esm/quat.js", "../../node_modules/gl-matrix/esm/vec3.js", "../../node_modules/gl-matrix/esm/vec4.js", "../../src/neuroglancer/util/array.ts", "../../src/neuroglancer/util/geom.ts", "../../src/neuroglancer/util/json.ts", "../../src/neuroglancer/util/memoize.ts", "../../src/neuroglancer/util/pairing_heap.0.ts", "../../src/neuroglancer/util/pairing_heap.1.ts", "../../src/neuroglancer/util/signal.ts", "../../src/neuroglancer/render_layer_common.ts", "../../src/neuroglancer/render_layer_backend.ts", "../../src/neuroglancer/trackable_value.ts", "../../src/neuroglancer/util/animation_frame_debounce.ts", "../../src/neuroglancer/webgl/context.ts", "../../src/neuroglancer/display_context.ts", "../../src/neuroglancer/util/vector.ts", "../../src/neuroglancer/projection_parameters.ts", "../../src/neuroglancer/util/matrix.ts", "../../src/neuroglancer/util/si_units.ts", "../../src/neuroglancer/coordinate_transform.ts", "../../src/neuroglancer/render_coordinate_transform.ts", "../../src/neuroglancer/sliceview/chunk_layout.ts", "../../src/neuroglancer/util/data_type.ts", "../../src/neuroglancer/sliceview/base.ts", "../../src/neuroglancer/util/erf.ts", "../../src/neuroglancer/util/velocity_estimation.ts", "../../src/neuroglancer/shared_watchable_value.ts", "../../src/neuroglancer/visibility_priority/backend.ts", "../../src/neuroglancer/sliceview/backend.ts", "../../src/neuroglancer/perspective_view/base.ts", "../../src/neuroglancer/perspective_view/backend.ts", "../../src/neuroglancer/volume_rendering/base.ts", "../../src/neuroglancer/volume_rendering/backend.ts", "../../src/neuroglancer/util/float32_to_string.ts", "../../src/neuroglancer/util/hex.ts", "../../src/neuroglancer/util/color.ts", "../../src/neuroglancer/util/endian.ts", "../../src/neuroglancer/util/float.ts", "../../src/neuroglancer/util/uint64.ts", "../../src/neuroglancer/util/lerp.ts", "../../src/neuroglancer/util/random.ts", "../../src/neuroglancer/annotation/index.ts", "../../src/neuroglancer/annotation/base.ts", "../../src/neuroglancer/util/trackable.ts", "../../src/neuroglancer/util/trackable_enum.ts", "../../src/neuroglancer/navigation_state.ts", "../../src/neuroglancer/util/dom.ts", "../../src/neuroglancer/visibility_priority/frontend.ts", "../../src/neuroglancer/widget/dependent_view_widget.ts", "../../src/neuroglancer/widget/tab_view.ts", "../../src/neuroglancer/segmentation_graph/source.ts", "../../src/neuroglancer/util/disjoint_sets.ts", "../../src/neuroglancer/shared_disjoint_sets.ts", "../../src/neuroglancer/gpu_hash/hash_function.ts", "../../src/neuroglancer/gpu_hash/hash_table.ts", "../../src/neuroglancer/uint64_set.ts", "../../src/neuroglancer/uint64_map.ts", "../../src/neuroglancer/segmentation_display_state/base.ts", "../../src/neuroglancer/segmentation_display_state/backend.ts", "../../src/neuroglancer/annotation/backend.ts", "../../src/neuroglancer/credentials_provider/index.ts", "../../src/neuroglancer/credentials_provider/shared_common.ts", "../../src/neuroglancer/credentials_provider/shared_counterpart.ts", "../../src/neuroglancer/util/http_request.ts", "../../src/neuroglancer/credentials_provider/http_request.ts", "../../src/neuroglancer/credentials_provider/oauth2.ts", "../../src/neuroglancer/datasource/brainmaps/api.ts", "../../src/neuroglancer/datasource/brainmaps/base.ts", "../../src/neuroglancer/mesh/base.ts", "../../src/neuroglancer/util/zorder.ts", "../../src/neuroglancer/mesh/multiscale.ts", "../../src/neuroglancer/mesh/triangle_strips.ts", "../../src/neuroglancer/mesh/backend.ts", "../../src/neuroglancer/skeleton/base.ts", "../../src/neuroglancer/skeleton/backend.ts", "../../src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts", "../../src/neuroglancer/async_computation/index.ts", "../../src/neuroglancer/async_computation/encode_compressed_segmentation_request.ts", "../../src/neuroglancer/async_computation/request.ts", "../../src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts", "../../src/neuroglancer/async_computation/decode_jpeg_request.ts", "../../src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts", "../../src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts", "../../src/neuroglancer/sliceview/volume/backend.ts", "../../src/neuroglancer/util/string.ts", "../../src/neuroglancer/datasource/brainmaps/backend.ts", "../../src/neuroglancer/datasource/boss/api.ts", "../../src/neuroglancer/datasource/boss/base.ts", "../../src/neuroglancer/async_computation/decode_gzip_request.ts", "../../src/neuroglancer/util/numpy_dtype.ts", "../../src/neuroglancer/util/npy.ts", "../../src/neuroglancer/sliceview/backend_chunk_decoders/bossNpz.ts", "../../src/neuroglancer/datasource/boss/backend.ts", "../../src/neuroglancer/datasource/dvid/base.ts", "../../src/neuroglancer/skeleton/decode_swc_skeleton.ts", "../../src/neuroglancer/datasource/dvid/api.ts", "../../src/neuroglancer/datasource/dvid/backend.ts", "../../src/neuroglancer/datasource/render/base.ts", "../../src/neuroglancer/datasource/render/backend.ts", "../../src/neuroglancer/util/object_id.ts", "../../src/neuroglancer/util/s3_bucket_listing.ts", "../../src/neuroglancer/util/s3.ts", "../../src/neuroglancer/util/special_protocol_request.ts", "../../src/neuroglancer/chunk_manager/generic_file_source.ts", "../../src/neuroglancer/datasource/precomputed/base.ts", "../../src/neuroglancer/skeleton/decode_precomputed_skeleton.ts", "../../src/neuroglancer/async_computation/decode_compresso_request.ts", "../../src/neuroglancer/sliceview/backend_chunk_decoders/compresso.ts", "../../src/neuroglancer/async_computation/decode_png_request.ts", "../../src/neuroglancer/sliceview/backend_chunk_decoders/png.ts", "../../src/neuroglancer/util/byte_range_http_requests.ts", "../../src/neuroglancer/util/hash.ts", "../../src/neuroglancer/datasource/precomputed/backend.ts", "../../src/neuroglancer/datasource/nifti/base.ts", "../../src/neuroglancer/sliceview/volume/base.ts", "../../src/neuroglancer/datasource/nifti/backend.ts", "../../src/neuroglancer/async_computation/decode_blosc_request.ts", "../../src/neuroglancer/datasource/n5/base.ts", "../../src/neuroglancer/datasource/n5/backend.ts", "../../src/neuroglancer/datasource/zarr/base.ts", "../../src/neuroglancer/datasource/zarr/backend.ts", "../../src/neuroglancer/async_computation/vtk_mesh_request.ts", "../../src/neuroglancer/single_mesh/base.ts", "../../src/neuroglancer/single_mesh/backend.ts", "../../src/neuroglancer/datasource/vtk/backend.ts", "../../src/neuroglancer/async_computation/obj_mesh_request.ts", "../../src/neuroglancer/datasource/obj/backend.ts", "../../src/neuroglancer/datasource/graphene/base.ts", "../../src/neuroglancer/datasource/graphene/backend.ts"],
  "sourcesContent": ["/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n", "/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n", "var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n", "var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n", "/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n", "var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n", "var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n", "var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n", "var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n", "/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n", "var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n", "var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n", "var debounce = require('./debounce'),\n    isObject = require('./isObject');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RawPartitionedMeshData, RawMeshData} from 'neuroglancer/mesh/backend';\n\nimport dracoWasmUrl from './neuroglancer_draco.wasm';\n\nlet decodeResult: RawPartitionedMeshData|Error|undefined = undefined;\nlet numPartitions = 0;\n\nlet wasmModule: WebAssembly.WebAssemblyInstantiatedSource|undefined;\n\nconst libraryEnv = {\n  emscripten_notify_memory_growth: (memoryIndex: number) => {\n    memoryIndex;\n  },\n  neuroglancer_draco_receive_decoded_mesh: function(\n      numFaces: number, numVertices: number, indicesPointer: number, vertexPositionsPointer: number,\n      subchunkOffsetsPointer: number) {\n    const numIndices = numFaces * 3;\n    const memory = wasmModule!.instance.exports.memory as WebAssembly.Memory;\n    const indices = new Uint32Array(memory.buffer, indicesPointer, numIndices).slice();\n    const vertexPositions =\n        new Uint32Array(memory.buffer, vertexPositionsPointer, 3 * numVertices).slice();\n    const subChunkOffsets =\n        new Uint32Array(memory.buffer, subchunkOffsetsPointer, numPartitions + 1).slice();\n    const mesh: RawPartitionedMeshData = {\n      indices,\n      vertexPositions,\n      subChunkOffsets,\n    };\n    decodeResult = mesh;\n  },\n  proc_exit: (code: number) => {\n    throw `proc exit: ${code}`;\n  },\n};\nconst dracoModulePromise = (async () => {\n  const response = await fetch(dracoWasmUrl);\n  const wasmCode = await response.arrayBuffer();\n  const m = wasmModule = await WebAssembly.instantiate(wasmCode, {\n    env: libraryEnv,\n    wasi_snapshot_preview1: libraryEnv,\n  });\n  (m.instance.exports._initialize as Function)();\n  return m;\n})();\n\nexport async function decodeDracoPartitioned(\n    buffer: Uint8Array, vertexQuantizationBits: number,\n    partition: boolean): Promise<RawPartitionedMeshData> {\n  const m = await dracoModulePromise;\n  const offset = (m.instance.exports.malloc as Function)(buffer.byteLength);\n  const heap = new Uint8Array((m.instance.exports.memory as WebAssembly.Memory).buffer);\n  heap.set(buffer, offset);\n  numPartitions = partition ? 8 : 1;\n  const code = (m.instance.exports.neuroglancer_draco_decode as Function)(\n      offset, buffer.byteLength, partition, vertexQuantizationBits, true);\n  if (code === 0) {\n    const r = decodeResult;\n    decodeResult = undefined;\n    if (r instanceof Error) throw r;\n    return r!;\n  }\n  throw new Error(`Failed to decode draco mesh: ${code}`);\n}\n\nexport async function decodeDraco(\n    buffer: Uint8Array): Promise<RawMeshData> {\n  const m = await dracoModulePromise;\n  const offset = (m.instance.exports.malloc as Function)(buffer.byteLength);\n  const heap = new Uint8Array((m.instance.exports.memory as WebAssembly.Memory).buffer);\n  heap.set(buffer, offset);\n  const code = (m.instance.exports.neuroglancer_draco_decode as Function)(\n      offset, buffer.byteLength, false, 0, false);\n  if (code === 0) {\n    const r = decodeResult;\n    decodeResult = undefined;\n    if (r instanceof Error) throw r;\n    r!.vertexPositions = new Float32Array(r!.vertexPositions.buffer)\n    return r!;\n  }\n  throw new Error(`Failed to decode draco mesh: ${code}`);\n}\n", "\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || {};\n\n\n\n/*** Static Pseudo-constants ***/\n\nnifti.Utils.crcTable = null;\nnifti.Utils.GUNZIP_MAGIC_COOKIE1 = 31;\nnifti.Utils.GUNZIP_MAGIC_COOKIE2 = 139;\n\n\n\n/*** Static methods ***/\n\nnifti.Utils.getStringAt = function (data, start, end) {\n    var str = \"\", ctr, ch;\n\n    for (ctr = start; ctr < end; ctr += 1) {\n        ch = data.getUint8(ctr);\n\n        if (ch !== 0) {\n            str += String.fromCharCode(ch);\n        }\n    }\n\n    return str;\n};\n\n\n\nnifti.Utils.getByteAt = function (data, start) {\n    return data.getInt8(start);\n};\n\n\n\nnifti.Utils.getShortAt = function (data, start, littleEndian) {\n    return data.getInt16(start, littleEndian);\n};\n\n\n\nnifti.Utils.getIntAt = function (data, start, littleEndian) {\n    return data.getInt32(start, littleEndian);\n};\n\n\n\nnifti.Utils.getFloatAt = function (data, start, littleEndian) {\n    return data.getFloat32(start, littleEndian);\n};\n\n\n\nnifti.Utils.getDoubleAt = function (data, start, littleEndian) {\n    return data.getFloat64(start, littleEndian);\n};\n\n\n\nnifti.Utils.getLongAt = function (data, start, littleEndian) {\n    var ctr, array = [], value = 0;\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        array[ctr] = nifti.Utils.getByteAt(data, start + ctr, littleEndian);\n    }\n\n    for (ctr = array.length - 1; ctr >= 0; ctr--) {\n        value = (value * 256) + array[ctr];\n    }\n\n    return value;\n};\n\n\n\nnifti.Utils.toArrayBuffer = function (buffer) {\n    var ab, view, i;\n\n    ab = new ArrayBuffer(buffer.length);\n    view = new Uint8Array(ab);\n    for (i = 0; i < buffer.length; i += 1) {\n        view[i] = buffer[i];\n    }\n    return ab;\n};\n\n\n\nnifti.Utils.isString = function (obj) {\n    return (typeof obj === \"string\" || obj instanceof String);\n};\n\n\nnifti.Utils.formatNumber = function (num, shortFormat) {\n    var val = 0;\n\n    if (nifti.Utils.isString(num)) {\n        val = Number(num);\n    } else {\n        val = num;\n    }\n\n    if (shortFormat) {\n        val = val.toPrecision(5);\n    } else {\n        val = val.toPrecision(7);\n    }\n\n    return parseFloat(val);\n};\n\n\n\n// http://stackoverflow.com/questions/18638900/javascript-crc32\nnifti.Utils.makeCRCTable = function(){\n    var c;\n    var crcTable = [];\n    for(var n =0; n < 256; n++){\n        c = n;\n        for(var k =0; k < 8; k++){\n            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n};\n\n\n\nnifti.Utils.crc32 = function(dataView) {\n    var crcTable = nifti.Utils.crcTable || (nifti.Utils.crcTable = nifti.Utils.makeCRCTable());\n    var crc = 0 ^ (-1);\n\n    for (var i = 0; i < dataView.byteLength; i++ ) {\n        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];\n    }\n\n    return (crc ^ (-1)) >>> 0;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.Utils;\n}\n", "\n/*jslint browser: true, node: true */\n/*global */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\n\n\n\n/*** Constructor ***/\n\n/**\n * The NIFTI1 constructor.\n * @constructor\n * @property {boolean} littleEndian\n * @property {number} dim_info\n * @property {number[]} dims - image dimensions\n * @property {number} intent_p1\n * @property {number} intent_p2\n * @property {number} intent_p3\n * @property {number} intent_code\n * @property {number} datatypeCode\n * @property {number} numBitsPerVoxel\n * @property {number} slice_start\n * @property {number} slice_end\n * @property {number} slice_code\n * @property {number[]} pixDims - voxel dimensions\n * @property {number} vox_offset\n * @property {number} scl_slope\n * @property {number} scl_inter\n * @property {number} xyzt_units\n * @property {number} cal_max\n * @property {number} cal_min\n * @property {number} slice_duration\n * @property {number} toffset\n * @property {string} description\n * @property {string} aux_file\n * @property {string} intent_name\n * @property {number} qform_code\n * @property {number} sform_code\n * @property {number} quatern_b\n * @property {number} quatern_c\n * @property {number} quatern_d\n * @property {number} quatern_x\n * @property {number} quatern_y\n * @property {number} quatern_z\n * @property {Array.<Array.<number>>} affine\n * @property {string} magic\n * @property {boolean} isHDR - if hdr/img format\n * @property {number[]} extensionFlag\n * @property {number} extensionSize\n * @property {number} extensionCode\n * @type {Function}\n */\nnifti.NIFTI1 = nifti.NIFTI1 || function () {\n    this.littleEndian = false;\n    this.dim_info = 0;\n    this.dims = [];\n    this.intent_p1 = 0;\n    this.intent_p2 = 0;\n    this.intent_p3 = 0;\n    this.intent_code = 0;\n    this.datatypeCode = 0;\n    this.numBitsPerVoxel = 0;\n    this.slice_start = 0;\n    this.slice_end = 0;\n    this.slice_code = 0;\n    this.pixDims = [];\n    this.vox_offset = 0;\n    this.scl_slope = 1;\n    this.scl_inter = 0;\n    this.xyzt_units = 0;\n    this.cal_max = 0;\n    this.cal_min = 0;\n    this.slice_duration = 0;\n    this.toffset = 0;\n    this.description = \"\";\n    this.aux_file = \"\";\n    this.intent_name = \"\";\n    this.qform_code = 0;\n    this.sform_code = 0;\n    this.quatern_b = 0;\n    this.quatern_c = 0;\n    this.quatern_d = 0;\n    this.qoffset_x = 0;\n    this.qoffset_y = 0;\n    this.qoffset_z = 0;\n    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    this.magic = 0;\n    this.isHDR = false;\n    this.extensionFlag = [0, 0, 0, 0];\n    this.extensionSize = 0;\n    this.extensionCode = 0;\n};\n\n\n\n/*** Static Pseudo-constants ***/\n\n// datatype codes\nnifti.NIFTI1.TYPE_NONE            = 0;\nnifti.NIFTI1.TYPE_BINARY          = 1;\nnifti.NIFTI1.TYPE_UINT8           = 2;\nnifti.NIFTI1.TYPE_INT16           = 4;\nnifti.NIFTI1.TYPE_INT32           = 8;\nnifti.NIFTI1.TYPE_FLOAT32        = 16;\nnifti.NIFTI1.TYPE_COMPLEX64      = 32;\nnifti.NIFTI1.TYPE_FLOAT64        = 64;\nnifti.NIFTI1.TYPE_RGB24         = 128;\nnifti.NIFTI1.TYPE_INT8          = 256;\nnifti.NIFTI1.TYPE_UINT16        = 512;\nnifti.NIFTI1.TYPE_UINT32        = 768;\nnifti.NIFTI1.TYPE_INT64        = 1024;\nnifti.NIFTI1.TYPE_UINT64       = 1280;\nnifti.NIFTI1.TYPE_FLOAT128     = 1536;\nnifti.NIFTI1.TYPE_COMPLEX128   = 1792;\nnifti.NIFTI1.TYPE_COMPLEX256   = 2048;\n\n// transform codes\nnifti.NIFTI1.XFORM_UNKNOWN        = 0;\nnifti.NIFTI1.XFORM_SCANNER_ANAT   = 1;\nnifti.NIFTI1.XFORM_ALIGNED_ANAT   = 2;\nnifti.NIFTI1.XFORM_TALAIRACH      = 3;\nnifti.NIFTI1.XFORM_MNI_152        = 4;\n\n// unit codes\nnifti.NIFTI1.SPATIAL_UNITS_MASK = 0x07;\nnifti.NIFTI1.TEMPORAL_UNITS_MASK = 0x38;\nnifti.NIFTI1.UNITS_UNKNOWN        = 0;\nnifti.NIFTI1.UNITS_METER          = 1;\nnifti.NIFTI1.UNITS_MM             = 2;\nnifti.NIFTI1.UNITS_MICRON         = 3;\nnifti.NIFTI1.UNITS_SEC            = 8;\nnifti.NIFTI1.UNITS_MSEC          = 16;\nnifti.NIFTI1.UNITS_USEC          = 24;\nnifti.NIFTI1.UNITS_HZ            = 32;\nnifti.NIFTI1.UNITS_PPM           = 40;\nnifti.NIFTI1.UNITS_RADS          = 48;\n\n// nifti1 codes\nnifti.NIFTI1.MAGIC_COOKIE = 348;\nnifti.NIFTI1.STANDARD_HEADER_SIZE = 348;\nnifti.NIFTI1.MAGIC_NUMBER_LOCATION = 344;\nnifti.NIFTI1.MAGIC_NUMBER = [0x6E, 0x2B, 0x31];  // n+1 (.nii)\nnifti.NIFTI1.MAGIC_NUMBER2 = [0x6E, 0x69, 0x31];  // ni1 (.hdr/.img)\nnifti.NIFTI1.EXTENSION_HEADER_SIZE = 8;\n\n\n/*** Prototype Methods ***/\n\n/**\n * Reads the header data.\n * @param {ArrayBuffer} data\n */\nnifti.NIFTI1.prototype.readHeader = function (data) {\n    var rawData = new DataView(data),\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index;\n\n    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {  // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n\n    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n\n    this.dim_info = nifti.Utils.getByteAt(rawData, 39);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 40 + (ctr * 2);\n        this.dims[ctr] = nifti.Utils.getShortAt(rawData, index, this.littleEndian);\n    }\n\n    this.intent_p1 = nifti.Utils.getFloatAt(rawData, 56, this.littleEndian);\n    this.intent_p2 = nifti.Utils.getFloatAt(rawData, 60, this.littleEndian);\n    this.intent_p3 = nifti.Utils.getFloatAt(rawData, 64, this.littleEndian);\n    this.intent_code = nifti.Utils.getShortAt(rawData, 68, this.littleEndian);\n\n    this.datatypeCode = nifti.Utils.getShortAt(rawData, 70, this.littleEndian);\n    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 72, this.littleEndian);\n\n    this.slice_start = nifti.Utils.getShortAt(rawData, 74, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 76 + (ctr * 4);\n        this.pixDims[ctr] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);\n    }\n\n    this.vox_offset = nifti.Utils.getFloatAt(rawData, 108, this.littleEndian);\n\n    this.scl_slope = nifti.Utils.getFloatAt(rawData, 112, this.littleEndian);\n    this.scl_inter = nifti.Utils.getFloatAt(rawData, 116, this.littleEndian);\n\n    this.slice_end = nifti.Utils.getShortAt(rawData, 120, this.littleEndian);\n    this.slice_code = nifti.Utils.getByteAt(rawData, 122);\n\n    this.xyzt_units = nifti.Utils.getByteAt(rawData, 123);\n\n    this.cal_max = nifti.Utils.getFloatAt(rawData, 124, this.littleEndian);\n    this.cal_min = nifti.Utils.getFloatAt(rawData, 128, this.littleEndian);\n\n    this.slice_duration = nifti.Utils.getFloatAt(rawData, 132, this.littleEndian);\n    this.toffset = nifti.Utils.getFloatAt(rawData, 136, this.littleEndian);\n\n    this.description = nifti.Utils.getStringAt(rawData, 148, 228);\n    this.aux_file = nifti.Utils.getStringAt(rawData, 228, 252);\n\n    this.qform_code = nifti.Utils.getShortAt(rawData, 252, this.littleEndian);\n    this.sform_code = nifti.Utils.getShortAt(rawData, 254, this.littleEndian);\n\n    this.quatern_b = nifti.Utils.getFloatAt(rawData, 256, this.littleEndian);\n    this.quatern_c = nifti.Utils.getFloatAt(rawData, 260, this.littleEndian);\n    this.quatern_d = nifti.Utils.getFloatAt(rawData, 264, this.littleEndian);\n    this.qoffset_x = nifti.Utils.getFloatAt(rawData, 268, this.littleEndian);\n    this.qoffset_y = nifti.Utils.getFloatAt(rawData, 272, this.littleEndian);\n    this.qoffset_z = nifti.Utils.getFloatAt(rawData, 276, this.littleEndian);\n\n    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 280 + (((ctrOut * 4) + ctrIn) * 4);\n            this.affine[ctrOut][ctrIn] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);\n        }\n    }\n\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n\n    this.intent_name = nifti.Utils.getStringAt(rawData, 328, 344);\n    this.magic = nifti.Utils.getStringAt(rawData, 344, 348);\n\n    this.isHDR = (this.magic === nifti.NIFTI1.MAGIC_NUMBER2);\n\n    if (rawData.byteLength > nifti.NIFTI1.MAGIC_COOKIE) {\n        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 348);\n        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 348 + 1);\n        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 348 + 2);\n        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 348 + 3);\n\n        if (this.extensionFlag[0]) {\n            this.extensionSize = this.getExtensionSize(rawData);\n            this.extensionCode = this.getExtensionCode(rawData);\n        }\n    }\n};\n\n\n/**\n * Returns a formatted string of header fields.\n * @returns {string}\n */\nnifti.NIFTI1.prototype.toFormattedString = function () {\n    var fmt = nifti.Utils.formatNumber,\n        string = \"\";\n\n    string += (\"Dim Info = \" + this.dim_info + \"\\n\");\n\n    string += (\"Image Dimensions (1-8): \" +\n        this.dims[0] + \", \" +\n        this.dims[1] + \", \" +\n        this.dims[2] + \", \" +\n        this.dims[3] + \", \" +\n        this.dims[4] + \", \" +\n        this.dims[5] + \", \" +\n        this.dims[6] + \", \" +\n        this.dims[7] + \"\\n\");\n\n    string += (\"Intent Parameters (1-3): \" +\n        this.intent_p1 + \", \" +\n        this.intent_p2 + \", \" +\n        this.intent_p3) + \"\\n\";\n\n    string += (\"Intent Code = \" + this.intent_code + \"\\n\");\n    string += (\"Datatype = \" + this.datatypeCode +  \" (\" + this.getDatatypeCodeString(this.datatypeCode) + \")\\n\");\n    string += (\"Bits Per Voxel = \" + this.numBitsPerVoxel + \"\\n\");\n    string += (\"Slice Start = \" + this.slice_start + \"\\n\");\n    string += (\"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) + \", \" +\n        fmt(this.pixDims[1]) + \", \" +\n        fmt(this.pixDims[2]) + \", \" +\n        fmt(this.pixDims[3]) + \", \" +\n        fmt(this.pixDims[4]) + \", \" +\n        fmt(this.pixDims[5]) + \", \" +\n        fmt(this.pixDims[6]) + \", \" +\n        fmt(this.pixDims[7]) + \"\\n\");\n\n    string += (\"Image Offset = \" + this.vox_offset + \"\\n\");\n    string += (\"Data Scale:  Slope = \" + fmt(this.scl_slope) + \"  Intercept = \" + fmt(this.scl_inter) + \"\\n\");\n    string += (\"Slice End = \" + this.slice_end + \"\\n\");\n    string += (\"Slice Code = \" + this.slice_code + \"\\n\");\n    string += (\"Units Code = \" + this.xyzt_units + \" (\" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + \", \" + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + \")\\n\");\n    string += (\"Display Range:  Max = \" + fmt(this.cal_max) + \"  Min = \" + fmt(this.cal_min) + \"\\n\");\n    string += (\"Slice Duration = \" + this.slice_duration + \"\\n\");\n    string += (\"Time Axis Shift = \" + this.toffset + \"\\n\");\n    string += (\"Description: \\\"\" + this.description + \"\\\"\\n\");\n    string += (\"Auxiliary File: \\\"\" + this.aux_file + \"\\\"\\n\");\n    string += (\"Q-Form Code = \" + this.qform_code + \" (\" + this.getTransformCodeString(this.qform_code) + \")\\n\");\n    string += (\"S-Form Code = \" + this.sform_code + \" (\" + this.getTransformCodeString(this.sform_code) + \")\\n\");\n    string += (\"Quaternion Parameters:  \" +\n        \"b = \" + fmt(this.quatern_b) + \"  \" +\n        \"c = \" + fmt(this.quatern_c) + \"  \" +\n        \"d = \" + fmt(this.quatern_d) + \"\\n\");\n\n    string += (\"Quaternion Offsets:  \" +\n        \"x = \" + this.qoffset_x + \"  \" +\n        \"y = \" + this.qoffset_y + \"  \" +\n        \"z = \" + this.qoffset_z + \"\\n\");\n\n    string += (\"S-Form Parameters X: \" +\n        fmt(this.affine[0][0]) + \", \" +\n        fmt(this.affine[0][1]) + \", \" +\n        fmt(this.affine[0][2]) + \", \" +\n        fmt(this.affine[0][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Y: \" +\n        fmt(this.affine[1][0]) + \", \" +\n        fmt(this.affine[1][1]) + \", \" +\n        fmt(this.affine[1][2]) + \", \" +\n        fmt(this.affine[1][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Z: \" +\n        fmt(this.affine[2][0]) + \", \" +\n        fmt(this.affine[2][1]) + \", \" +\n        fmt(this.affine[2][2]) + \", \" +\n        fmt(this.affine[2][3]) + \"\\n\");\n\n    string += (\"Intent Name: \\\"\" + this.intent_name + \"\\\"\\n\");\n\n    if (this.extensionFlag[0]) {\n        string += (\"Extension: Size = \" + this.extensionSize + \"  Code = \" + this.extensionCode + \"\\n\");\n\n    }\n\n    return string;\n};\n\n\n/**\n * Returns a human-readable string of datatype.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getDatatypeCodeString = function (code) {\n    if (code === nifti.NIFTI1.TYPE_UINT8) {\n        return \"1-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT16) {\n        return \"2-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT32) {\n        return \"4-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_FLOAT32) {\n        return \"4-Byte Float\";\n    } else if (code === nifti.NIFTI1.TYPE_FLOAT64) {\n        return \"8-Byte Float\";\n    } else if (code === nifti.NIFTI1.TYPE_RGB24) {\n        return \"RGB\";\n    } else if (code === nifti.NIFTI1.TYPE_INT8) {\n        return \"1-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT16) {\n        return \"2-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT32) {\n        return \"4-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT64) {\n        return \"8-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT64) {\n        return \"8-Byte Unsigned Integer\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns a human-readable string of transform type.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getTransformCodeString = function (code) {\n    if (code === nifti.NIFTI1.XFORM_SCANNER_ANAT) {\n        return \"Scanner\";\n    } else if (code === nifti.NIFTI1.XFORM_ALIGNED_ANAT) {\n        return \"Aligned\";\n    } else if (code === nifti.NIFTI1.XFORM_TALAIRACH) {\n        return \"Talairach\";\n    } else if (code === nifti.NIFTI1.XFORM_MNI_152) {\n        return \"MNI\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns a human-readable string of spatial and temporal units.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getUnitsCodeString = function (code) {\n    if (code === nifti.NIFTI1.UNITS_METER) {\n        return \"Meters\";\n    } else if (code === nifti.NIFTI1.UNITS_MM) {\n        return \"Millimeters\";\n    } else if (code === nifti.NIFTI1.UNITS_MICRON) {\n        return \"Microns\";\n    } else if (code === nifti.NIFTI1.UNITS_SEC) {\n        return \"Seconds\";\n    } else if (code === nifti.NIFTI1.UNITS_MSEC) {\n        return \"Milliseconds\";\n    } else if (code === nifti.NIFTI1.UNITS_USEC) {\n        return \"Microseconds\";\n    } else if (code === nifti.NIFTI1.UNITS_HZ) {\n        return \"Hz\";\n    } else if (code === nifti.NIFTI1.UNITS_PPM) {\n        return \"PPM\";\n    } else if (code === nifti.NIFTI1.UNITS_RADS) {\n        return \"Rads\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns the qform matrix.\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI1.prototype.getQformMat = function () {\n    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x,\n        this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);\n};\n\n\n\n/**\n * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {number} qb\n * @param {number} qc\n * @param {number} qd\n * @param {number} qx\n * @param {number} qy\n * @param {number} qz\n * @param {number} dx\n * @param {number} dy\n * @param {number} dz\n * @param {number} qfac\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function (qb, qc, qd, qx, qy, qz, dx, dy, dz,\n                                                qfac) {\n    var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n        a,\n        b = qb,\n        c = qc,\n        d = qd,\n        xd,\n        yd,\n        zd;\n\n    // last row is always [ 0 0 0 1 ]\n    R[3][0] = R[3][1] = R[3][2] = 0.0;\n    R[3][3] = 1.0;\n\n    // compute a parameter from b,c,d\n    a = 1.0 - (b * b + c * c + d * d);\n    if (a < 0.0000001) {                   /* special case */\n\n        a = 1.0 / Math.sqrt(b * b + c * c + d * d);\n        b *= a;\n        c *= a;\n        d *= a;        /* normalize (b,c,d) vector */\n        a = 0.0;                        /* a = 0 ==> 180 degree rotation */\n    } else {\n\n        a = Math.sqrt(a);                     /* angle = 2*arccos(a) */\n    }\n\n    // load rotation matrix, including scaling factors for voxel sizes\n    xd = (dx > 0.0) ? dx : 1.0;       /* make sure are positive */\n    yd = (dy > 0.0) ? dy : 1.0;\n    zd = (dz > 0.0) ? dz : 1.0;\n\n    if (qfac < 0.0) {\n        zd = -zd;         /* left handedness? */\n    }\n\n    R[0][0] =       (a * a + b * b - c * c - d * d) * xd;\n    R[0][1] = 2.0 * (b * c - a * d) * yd;\n    R[0][2] = 2.0 * (b * d + a * c) * zd;\n    R[1][0] = 2.0 * (b * c + a * d) * xd;\n    R[1][1] =       (a * a + c * c - b * b - d * d) * yd;\n    R[1][2] = 2.0 * (c * d - a * b) * zd;\n    R[2][0] = 2.0 * (b * d - a * c) * xd;\n    R[2][1] = 2.0 * (c * d + a * b) * yd;\n    R[2][2] =       (a * a + d * d - c * c - b * b) * zd;\n\n    // load offsets\n    R[0][3] = qx;\n    R[1][3] = qy;\n    R[2][3] = qz;\n\n    return R;\n};\n\n\n\n/**\n * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {Array.<Array.<number>>} R\n * @returns {string}\n */\nnifti.NIFTI1.prototype.convertNiftiSFormToNEMA = function (R) {\n    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest,\n        M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;\n    k = 0;\n\n    Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n    P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n\n    //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */\n\n    //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */\n\n    /* load column vectors for each (i,j,k) direction from matrix */\n\n    /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/\n\n    xi = R[0][0];\n    xj = R[0][1];\n    xk = R[0][2];\n\n    yi = R[1][0];\n    yj = R[1][1];\n    yk = R[1][2];\n\n    zi = R[2][0];\n    zj = R[2][1];\n    zk = R[2][2];\n\n    /* normalize column vectors to get unit vectors along each ijk-axis */\n\n    /* normalize i axis */\n    val = Math.sqrt(xi * xi + yi * yi + zi * zi);\n    if (val === 0.0) {  /* stupid input */\n        return null;\n    }\n\n    xi /= val;\n    yi /= val;\n    zi /= val;\n\n    /* normalize j axis */\n    val = Math.sqrt(xj * xj + yj * yj + zj * zj);\n    if (val === 0.0) {  /* stupid input */\n        return null;\n    }\n\n    xj /= val;\n    yj /= val;\n    zj /= val;\n\n    /* orthogonalize j axis to i axis, if needed */\n    val = xi * xj + yi * yj + zi * zj;    /* dot product between i and j */\n    if (Math.abs(val) > 1.E-4) {\n        xj -= val * xi;\n        yj -= val * yi;\n        zj -= val * zi;\n        val = Math.sqrt(xj * xj + yj * yj + zj * zj);  /* must renormalize */\n        if (val === 0.0) {              /* j was parallel to i? */\n            return null;\n        }\n        xj /= val;\n        yj /= val;\n        zj /= val;\n    }\n\n    /* normalize k axis; if it is zero, make it the cross product i x j */\n    val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n    if (val === 0.0) {\n        xk = yi * zj - zi * yj;\n        yk = zi * xj - zj * xi;\n        zk = xi * yj - yi * xj;\n    } else {\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    /* orthogonalize k to i */\n    val = xi * xk + yi * yk + zi * zk;    /* dot product between i and k */\n    if (Math.abs(val) > 1.E-4) {\n        xk -= val * xi;\n        yk -= val * yi;\n        zk -= val * zi;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {    /* bad */\n            return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    /* orthogonalize k to j */\n    val = xj * xk + yj * yk + zj * zk;    /* dot product between j and k */\n    if (Math.abs(val) > 1.e-4) {\n        xk -= val * xj;\n        yk -= val * yj;\n        zk -= val * zj;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {     /* bad */\n            return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    Q[0][0] = xi;\n    Q[0][1] = xj;\n    Q[0][2] = xk;\n    Q[1][0] = yi;\n    Q[1][1] = yj;\n    Q[1][2] = yk;\n    Q[2][0] = zi;\n    Q[2][1] = zj;\n    Q[2][2] = zk;\n\n    /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */\n\n    detQ = this.nifti_mat33_determ(Q);\n    if (detQ === 0.0) { /* shouldn't happen unless user is a DUFIS */\n        return null;\n    }\n\n    /* Build and test all possible +1/-1 coordinate permutation matrices P;\n     then find the P such that the rotation matrix M=PQ is closest to the\n     identity, in the sense of M having the smallest total rotation angle. */\n\n    /* Despite the formidable looking 6 nested loops, there are\n     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */\n\n    vbest = -666.0;\n    ibest = pbest = qbest = rbest = 1;\n    jbest = 2;\n    kbest = 3;\n\n    for (i = 1; i <= 3; i += 1) {     /* i = column number to use for row #1 */\n        for (j = 1; j <= 3; j += 1) {    /* j = column number to use for row #2 */\n            if (i !== j) {\n                for (k = 1; k <= 3; k += 1) {  /* k = column number to use for row #3 */\n                    if (!(i === k || j === k)) {\n                        P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;\n                        for (p = -1; p <= 1; p += 2) {    /* p,q,r are -1 or +1      */\n                            for (q = -1; q <= 1; q += 2) {   /* and go into rows #1,2,3 */\n                                for (r = -1; r <= 1; r += 2) {\n                                    P[0][i - 1] = p;\n                                    P[1][j - 1] = q;\n                                    P[2][k - 1] = r;\n                                    detP = this.nifti_mat33_determ(P);           /* sign of permutation */\n                                    if ((detP * detQ) > 0.0) {\n                                        M = this.nifti_mat33_mul(P, Q);\n\n                                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */\n                                        /* we want largest trace(M) == smallest angle == M nearest to I */\n\n                                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */\n                                        if (val > vbest) {\n                                            vbest = val;\n                                            ibest = i;\n                                            jbest = j;\n                                            kbest = k;\n                                            pbest = p;\n                                            qbest = q;\n                                            rbest = r;\n                                        }\n                                    }  /* doesn't match sign of Q */\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.\n\n     The matrix P that corresponds is the best permutation approximation\n     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates\n     to the (i,j,k) axes.\n\n     For example, the first row of P (which contains pbest in column ibest)\n     determines the way the i axis points relative to the anatomical\n     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,\n     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).\n\n     So, using ibest and pbest, we can assign the output code for\n     the i axis.  Mutatis mutandis for the j and k axes, of course. */\n\n    iChar = jChar = kChar = iSense = jSense = kSense = 0;\n\n    switch (ibest * pbest) {\n        case 1: /*i = NIFTI_L2R*/\n            iChar = 'X';\n            iSense = '+';\n            break;\n        case -1: /*i = NIFTI_R2L*/\n            iChar = 'X';\n            iSense = '-';\n            break;\n        case 2: /*i = NIFTI_P2A*/\n            iChar = 'Y';\n            iSense = '+';\n            break;\n        case -2: /*i = NIFTI_A2P*/\n            iChar = 'Y';\n            iSense = '-';\n            break;\n        case 3: /*i = NIFTI_I2S*/\n            iChar = 'Z';\n            iSense = '+';\n            break;\n        case -3: /*i = NIFTI_S2I*/\n            iChar = 'Z';\n            iSense = '-';\n            break;\n    }\n\n    switch (jbest * qbest) {\n        case 1: /*j = NIFTI_L2R*/\n            jChar = 'X';\n            jSense = '+';\n            break;\n        case -1: /*j = NIFTI_R2L*/\n            jChar = 'X';\n            jSense = '-';\n            break;\n        case 2: /*j = NIFTI_P2A*/\n            jChar = 'Y';\n            jSense = '+';\n            break;\n        case -2: /*j = NIFTI_A2P*/\n            jChar = 'Y';\n            jSense = '-';\n            break;\n        case 3: /*j = NIFTI_I2S*/\n            jChar = 'Z';\n            jSense = '+';\n            break;\n        case -3: /*j = NIFTI_S2I*/\n            jChar = 'Z';\n            jSense = '-';\n            break;\n    }\n\n    switch (kbest * rbest) {\n        case 1: /*k = NIFTI_L2R*/\n            kChar = 'X';\n            kSense = '+';\n            break;\n        case -1: /*k = NIFTI_R2L*/\n            kChar = 'X';\n            kSense = '-';\n            break;\n        case 2: /*k = NIFTI_P2A*/\n            kChar = 'Y';\n            kSense = '+';\n            break;\n        case -2: /*k = NIFTI_A2P*/\n            kChar = 'Y';\n            kSense = '-';\n            break;\n        case 3: /*k = NIFTI_I2S*/\n            kChar = 'Z';\n            kSense = '+';\n            break;\n        case -3: /*k = NIFTI_S2I*/\n            kChar = 'Z';\n            kSense = '-';\n            break;\n    }\n\n    return (iChar + jChar + kChar + iSense + jSense + kSense);\n};\n\n\n\nnifti.NIFTI1.prototype.nifti_mat33_mul = function (A, B) {\n    var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        i,\n        j;\n\n    for (i = 0; i < 3; i += 1) {\n        for (j = 0; j < 3; j += 1) {\n            C[i][j] =  A[i][0] * B[0][j]  + A[i][1] * B[1][j] + A[i][2] * B[2][j];\n        }\n    }\n\n    return C;\n};\n\n\n\nnifti.NIFTI1.prototype.nifti_mat33_determ = function (R) {\n    var r11, r12, r13, r21, r22, r23, r31, r32, r33;\n    /*  INPUT MATRIX:  */\n    r11 = R[0][0];\n    r12 = R[0][1];\n    r13 = R[0][2];\n    r21 = R[1][0];\n    r22 = R[1][1];\n    r23 = R[1][2];\n    r31 = R[2][0];\n    r32 = R[2][1];\n    r33 = R[2][2];\n\n    return (r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13);\n};\n\n\n/**\n * Returns the byte index of the extension.\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionLocation = function() {\n    return nifti.NIFTI1.MAGIC_COOKIE + 4;\n};\n\n\n/**\n * Returns the extension size.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionSize = function(data) {\n    return nifti.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);\n};\n\n\n\n/**\n * Returns the extension code.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionCode = function(data) {\n    return nifti.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.NIFTI1;\n}\n", "\n/*jslint browser: true, node: true */\n/*global */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\nnifti.NIFTI1 = nifti.NIFTI1 || ((typeof require !== 'undefined') ? require('./nifti1.js') : null);\n\n\n/*** Constructor ***/\n\n/**\n * The NIFTI2 constructor.\n * @constructor\n * @property {boolean} littleEndian\n * @property {number} dim_info\n * @property {number[]} dims - image dimensions\n * @property {number} intent_p1\n * @property {number} intent_p2\n * @property {number} intent_p3\n * @property {number} intent_code\n * @property {number} datatypeCode\n * @property {number} numBitsPerVoxel\n * @property {number} slice_start\n * @property {number} slice_end\n * @property {number} slice_code\n * @property {number[]} pixDims - voxel dimensions\n * @property {number} vox_offset\n * @property {number} scl_slope\n * @property {number} scl_inter\n * @property {number} xyzt_units\n * @property {number} cal_max\n * @property {number} cal_min\n * @property {number} slice_duration\n * @property {number} toffset\n * @property {string} description\n * @property {string} aux_file\n * @property {string} intent_name\n * @property {number} qform_code\n * @property {number} sform_code\n * @property {number} quatern_b\n * @property {number} quatern_c\n * @property {number} quatern_d\n * @property {number} quatern_x\n * @property {number} quatern_y\n * @property {number} quatern_z\n * @property {Array.<Array.<number>>} affine\n * @property {string} magic\n * @property {number[]} extensionFlag\n * @type {Function}\n */\nnifti.NIFTI2 = nifti.NIFTI2 || function () {\n    this.littleEndian = false;\n    this.dim_info = 0;\n    this.dims = [];\n    this.intent_p1 = 0;\n    this.intent_p2 = 0;\n    this.intent_p3 = 0;\n    this.intent_code = 0;\n    this.datatypeCode = 0;\n    this.numBitsPerVoxel = 0;\n    this.slice_start = 0;\n    this.slice_end = 0;\n    this.slice_code = 0;\n    this.pixDims = [];\n    this.vox_offset = 0;\n    this.scl_slope = 1;\n    this.scl_inter = 0;\n    this.xyzt_units = 0;\n    this.cal_max = 0;\n    this.cal_min = 0;\n    this.slice_duration = 0;\n    this.toffset = 0;\n    this.description = \"\";\n    this.aux_file = \"\";\n    this.intent_name = \"\";\n    this.qform_code = 0;\n    this.sform_code = 0;\n    this.quatern_b = 0;\n    this.quatern_c = 0;\n    this.quatern_d = 0;\n    this.qoffset_x = 0;\n    this.qoffset_y = 0;\n    this.qoffset_z = 0;\n    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    this.magic = 0;\n    this.extensionFlag = [0, 0, 0, 0];\n};\n\n\n\n/*** Static Pseudo-constants ***/\n\nnifti.NIFTI2.MAGIC_COOKIE = 540;\nnifti.NIFTI2.MAGIC_NUMBER_LOCATION = 4;\nnifti.NIFTI2.MAGIC_NUMBER = [0x6E, 0x2B, 0x32, 0, 0x0D, 0x0A, 0x1A, 0x0A];  // n+2\\0\n\n\n\n/*** Prototype Methods ***/\n\n/**\n * Reads the header data.\n * @param {ArrayBuffer} data\n */\nnifti.NIFTI2.prototype.readHeader = function (data) {\n    var rawData = new DataView(data),\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index,\n        array;\n\n    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {  // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n\n    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n\n    this.datatypeCode = nifti.Utils.getShortAt(rawData, 12, this.littleEndian);\n    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 14, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 16 + (ctr * 8);\n        this.dims[ctr] = nifti.Utils.getLongAt(rawData, index, this.littleEndian);\n    }\n\n    this.intent_p1 = nifti.Utils.getDoubleAt(rawData, 80, this.littleEndian);\n    this.intent_p2 = nifti.Utils.getDoubleAt(rawData, 88, this.littleEndian);\n    this.intent_p3 = nifti.Utils.getDoubleAt(rawData, 96, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 104 + (ctr * 8);\n        this.pixDims[ctr] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);\n    }\n\n    this.vox_offset = nifti.Utils.getLongAt(rawData, 168, this.littleEndian);\n\n    this.scl_slope = nifti.Utils.getDoubleAt(rawData, 176, this.littleEndian);\n    this.scl_inter = nifti.Utils.getDoubleAt(rawData, 184, this.littleEndian);\n\n    this.cal_max = nifti.Utils.getDoubleAt(rawData, 192, this.littleEndian);\n    this.cal_min = nifti.Utils.getDoubleAt(rawData, 200, this.littleEndian);\n\n    this.slice_duration = nifti.Utils.getDoubleAt(rawData, 208, this.littleEndian);\n\n    this.toffset = nifti.Utils.getDoubleAt(rawData, 216, this.littleEndian);\n\n    this.slice_start = nifti.Utils.getLongAt(rawData, 224, this.littleEndian);\n    this.slice_end = nifti.Utils.getLongAt(rawData, 232, this.littleEndian);\n\n    this.description = nifti.Utils.getStringAt(rawData, 240, 240 + 80);\n    this.aux_file = nifti.Utils.getStringAt(rawData, 320, 320 + 24);\n\n    this.qform_code = nifti.Utils.getIntAt(rawData, 344, this.littleEndian);\n    this.sform_code = nifti.Utils.getIntAt(rawData, 348, this.littleEndian);\n\n    this.quatern_b = nifti.Utils.getDoubleAt(rawData, 352, this.littleEndian);\n    this.quatern_c = nifti.Utils.getDoubleAt(rawData, 360, this.littleEndian);\n    this.quatern_d = nifti.Utils.getDoubleAt(rawData, 368, this.littleEndian);\n    this.qoffset_x = nifti.Utils.getDoubleAt(rawData, 376, this.littleEndian);\n    this.qoffset_y = nifti.Utils.getDoubleAt(rawData, 384, this.littleEndian);\n    this.qoffset_z = nifti.Utils.getDoubleAt(rawData, 392, this.littleEndian);\n\n    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 400 + (((ctrOut * 4) + ctrIn) * 8);\n            this.affine[ctrOut][ctrIn] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);\n        }\n    }\n\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n\n    this.slice_code = nifti.Utils.getIntAt(rawData, 496, this.littleEndian);\n    this.xyzt_units = nifti.Utils.getIntAt(rawData, 500, this.littleEndian);\n    this.intent_code = nifti.Utils.getIntAt(rawData, 504, this.littleEndian);\n    this.intent_name = nifti.Utils.getStringAt(rawData, 508, 508 + 16);\n\n    this.dim_info = nifti.Utils.getByteAt(rawData, 524);\n\n    if (rawData.byteLength > nifti.NIFTI2.MAGIC_COOKIE) {\n        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 540);\n        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 540 + 1);\n        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 540 + 2);\n        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 540 + 3);\n\n        if (this.extensionFlag[0]) {\n            this.extensionSize = this.getExtensionSize(rawData);\n            this.extensionCode = this.getExtensionCode(rawData);\n        }\n    }\n};\n\n\n\n/**\n * Returns a formatted string of header fields.\n * @returns {string}\n */\nnifti.NIFTI2.prototype.toFormattedString = function () {\n    var fmt = nifti.Utils.formatNumber,\n        string = \"\";\n\n    string += (\"Datatype = \" +  + this.datatypeCode + \" (\" + this.getDatatypeCodeString(this.datatypeCode) + \")\\n\");\n    string += (\"Bits Per Voxel = \" + \" = \" + this.numBitsPerVoxel + \"\\n\");\n    string += (\"Image Dimensions\" + \" (1-8): \" +\n        this.dims[0] + \", \" +\n        this.dims[1] + \", \" +\n        this.dims[2] + \", \" +\n        this.dims[3] + \", \" +\n        this.dims[4] + \", \" +\n        this.dims[5] + \", \" +\n        this.dims[6] + \", \" +\n        this.dims[7] + \"\\n\");\n\n    string += (\"Intent Parameters (1-3): \" +\n        this.intent_p1 + \", \" +\n        this.intent_p2 + \", \" +\n        this.intent_p3) + \"\\n\";\n\n    string += (\"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) + \", \" +\n        fmt(this.pixDims[1]) + \", \" +\n        fmt(this.pixDims[2]) + \", \" +\n        fmt(this.pixDims[3]) + \", \" +\n        fmt(this.pixDims[4]) + \", \" +\n        fmt(this.pixDims[5]) + \", \" +\n        fmt(this.pixDims[6]) + \", \" +\n        fmt(this.pixDims[7]) + \"\\n\");\n\n    string += (\"Image Offset = \" + this.vox_offset + \"\\n\");\n    string += (\"Data Scale:  Slope = \" + fmt(this.scl_slope) + \"  Intercept = \" + fmt(this.scl_inter) + \"\\n\");\n    string += (\"Display Range:  Max = \" + fmt(this.cal_max) + \"  Min = \" + fmt(this.cal_min) + \"\\n\");\n    string += (\"Slice Duration = \" + this.slice_duration + \"\\n\");\n    string += (\"Time Axis Shift = \" + this.toffset + \"\\n\");\n    string += (\"Slice Start = \" + this.slice_start + \"\\n\");\n    string += (\"Slice End = \" + this.slice_end + \"\\n\");\n    string += (\"Description: \\\"\" + this.description + \"\\\"\\n\");\n    string += (\"Auxiliary File: \\\"\" + this.aux_file + \"\\\"\\n\");\n    string += (\"Q-Form Code = \" + this.qform_code + \" (\" + this.getTransformCodeString(this.qform_code) + \")\\n\");\n    string += (\"S-Form Code = \" + this.sform_code + \" (\" + this.getTransformCodeString(this.sform_code) + \")\\n\");\n    string += (\"Quaternion Parameters:  \" +\n    \"b = \" + fmt(this.quatern_b) + \"  \" +\n    \"c = \" + fmt(this.quatern_c) + \"  \" +\n    \"d = \" + fmt(this.quatern_d) + \"\\n\");\n\n    string += (\"Quaternion Offsets:  \" +\n    \"x = \" + this.qoffset_x + \"  \" +\n    \"y = \" + this.qoffset_y + \"  \" +\n    \"z = \" + this.qoffset_z + \"\\n\");\n\n    string += (\"S-Form Parameters X: \" +\n    fmt(this.affine[0][0]) + \", \" +\n    fmt(this.affine[0][1]) + \", \" +\n    fmt(this.affine[0][2]) + \", \" +\n    fmt(this.affine[0][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Y: \" +\n    fmt(this.affine[1][0]) + \", \" +\n    fmt(this.affine[1][1]) + \", \" +\n    fmt(this.affine[1][2]) + \", \" +\n    fmt(this.affine[1][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Z: \" +\n    fmt(this.affine[2][0]) + \", \" +\n    fmt(this.affine[2][1]) + \", \" +\n    fmt(this.affine[2][2]) + \", \" +\n    fmt(this.affine[2][3]) + \"\\n\");\n\n    string += (\"Slice Code = \" + this.slice_code + \"\\n\");\n    string += (\"Units Code = \" + this.xyzt_units + \" (\" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + \", \" + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + \")\\n\");\n    string += (\"Intent Code = \" + this.intent_code + \"\\n\");\n    string += (\"Intent Name: \\\"\" + this.intent_name + \"\\\"\\n\");\n\n    string += (\"Dim Info = \" + this.dim_info + \"\\n\");\n\n    return string;\n};\n\n\n\n/**\n * Returns the byte index of the extension.\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionLocation = function() {\n    return nifti.NIFTI2.MAGIC_COOKIE + 4;\n};\n\n\n\n/**\n * Returns the extension size.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionSize = nifti.NIFTI1.prototype.getExtensionSize;\n\n\n\n/**\n * Returns the extension code.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionCode = nifti.NIFTI1.prototype.getExtensionCode;\n\n\n\n/**\n * Returns a human-readable string of datatype.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getDatatypeCodeString = nifti.NIFTI1.prototype.getDatatypeCodeString;\n\n\n\n/**\n * Returns a human-readable string of transform type.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getTransformCodeString = nifti.NIFTI1.prototype.getTransformCodeString;\n\n\n\n/**\n * Returns a human-readable string of spatial and temporal units.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getUnitsCodeString = nifti.NIFTI1.prototype.getUnitsCodeString;\n\n\n\n/**\n * Returns the qform matrix.\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI2.prototype.getQformMat = nifti.NIFTI1.prototype.getQformMat;\n\n\n\n/**\n * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {number} qb\n * @param {number} qc\n * @param {number} qd\n * @param {number} qx\n * @param {number} qy\n * @param {number} qz\n * @param {number} dx\n * @param {number} dy\n * @param {number} dz\n * @param {number} qfac\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;\n\n\n\n/**\n * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {Array.<Array.<number>>} R\n * @returns {string}\n */\nnifti.NIFTI2.prototype.convertNiftiSFormToNEMA = nifti.NIFTI1.prototype.convertNiftiSFormToNEMA;\n\n\n\nnifti.NIFTI2.prototype.nifti_mat33_mul = nifti.NIFTI1.prototype.nifti_mat33_mul;\n\n\n\nnifti.NIFTI2.prototype.nifti_mat33_determ = nifti.NIFTI1.prototype.nifti_mat33_determ;\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.NIFTI2;\n}\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) =>\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nconst copy_block = (s, buf, len, header) =>\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n  s.pending += len;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) =>\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) =>\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let lx = 0;         /* running index in l_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) =>\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let black_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) =>\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //let out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n};\n\nmodule.exports._tr_init  = _tr_init;\nmodule.exports._tr_stored_block = _tr_stored_block;\nmodule.exports._tr_flush_block  = _tr_flush_block;\nmodule.exports._tr_tally = _tr_tally;\nmodule.exports._tr_align = _tr_align;\n", "'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nmodule.exports = adler32;\n", "'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = require('./trees');\nconst adler32 = require('./adler32');\nconst crc32   = require('./crc32');\nconst msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN,\n  Z_DEFLATED\n} = require('./constants');\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst EXTRA_STATE = 69;\nconst NAME_STATE = 73;\nconst COMMENT_STATE = 91;\nconst HCRC_STATE = 103;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  let max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    const max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  _tr_init(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\nconst deflate = (strm, flush) => {\n\n  let beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      let level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n", "'use strict';\n\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nmodule.exports.assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nmodule.exports.flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n", "// String encode/decode helpers\n'use strict';\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  let i, out;\n  const len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n", "'use strict';\n\n\nconst zlib_deflate = require('./zlib/deflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = require('./zlib/constants');\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 30;       /* got a data error -- remain here until reset */\nconst TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nmodule.exports = inflate_table;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32       = require('./adler32');\nconst crc32         = require('./crc32');\nconst inflate_fast  = require('./inffast');\nconst inflate_table = require('./inftrees');\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH, Z_BLOCK, Z_TREES,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,\n  Z_DEFLATED\n} = require('./constants');\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n};\n\n\nmodule.exports.inflateReset = inflateReset;\nmodule.exports.inflateReset2 = inflateReset2;\nmodule.exports.inflateResetKeep = inflateResetKeep;\nmodule.exports.inflateInit = inflateInit;\nmodule.exports.inflateInit2 = inflateInit2;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateEnd = inflateEnd;\nmodule.exports.inflateGetHeader = inflateGetHeader;\nmodule.exports.inflateSetDictionary = inflateSetDictionary;\nmodule.exports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n", "'use strict';\n\n\nconst zlib_inflate = require('./zlib/inflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\nconst GZheader     = require('./zlib/gzheader');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');\n", "// Top level file is just a mixin of submodules & constants\n'use strict';\n\nconst { Deflate, deflate, deflateRaw, gzip } = require('./lib/deflate');\n\nconst { Inflate, inflate, inflateRaw, ungzip } = require('./lib/inflate');\n\nconst constants = require('./lib/zlib/constants');\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = ungzip;\nmodule.exports.constants = constants;\n", "\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\n\n/**\n * nifti\n * @type {*|{}}\n */\nvar nifti = nifti || {};\nnifti.NIFTI1 = nifti.NIFTI1 || ((typeof require !== 'undefined') ? require('./nifti1.js') : null);\nnifti.NIFTI2 = nifti.NIFTI2 || ((typeof require !== 'undefined') ? require('./nifti2.js') : null);\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\n\nvar pako = pako || ((typeof require !== 'undefined') ? require('pako') : null);\n\n\n\n/*** Static Methods ***/\n\n/**\n * Returns true if this data represents a NIFTI-1 header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI1 = function (data) {\n    var buf, mag1, mag2, mag3;\n\n    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {\n        return false;\n    }\n\n    buf = new DataView(data);\n\n    if (buf)\n\n    mag1 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 2);\n\n    return !!((mag1 === nifti.NIFTI1.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI1.MAGIC_NUMBER[1]) &&\n        (mag3 === nifti.NIFTI1.MAGIC_NUMBER[2]));\n};\n\n\n/**\n * Returns true if this data represents a NIFTI-2 header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI2 = function (data) {\n    var buf, mag1, mag2, mag3;\n\n    if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {\n        return false;\n    }\n\n    buf = new DataView(data);\n    mag1 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 2);\n\n    return !!((mag1 === nifti.NIFTI2.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI2.MAGIC_NUMBER[1]) &&\n    (mag3 === nifti.NIFTI2.MAGIC_NUMBER[2]));\n};\n\n\n\n/**\n * Returns true if this data represents a NIFTI header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI = function (data) {\n    return (nifti.isNIFTI1(data) || nifti.isNIFTI2(data));\n};\n\n\n\n/**\n * Returns true if this data is GZIP compressed.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isCompressed = function (data) {\n    var buf, magicCookie1, magicCookie2;\n\n    if (data) {\n        buf = new DataView(data);\n\n        magicCookie1 = buf.getUint8(0);\n        magicCookie2 = buf.getUint8(1);\n\n        if (magicCookie1 === nifti.Utils.GUNZIP_MAGIC_COOKIE1) {\n            return true;\n        }\n\n        if (magicCookie2 === nifti.Utils.GUNZIP_MAGIC_COOKIE2) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n\n\n/**\n * Returns decompressed data.\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.decompress = function (data) {\n    return pako.inflate(data).buffer;\n};\n\n\n\n/**\n * Reads and returns the header object.\n * @param {ArrayBuffer} data\n * @returns {nifti.NIFTI1|nifti.NIFTI2|null}\n */\nnifti.readHeader = function (data) {\n    var header = null;\n\n    if (nifti.isCompressed(data)) {\n        data = nifti.decompress(data);\n    }\n\n    if (nifti.isNIFTI1(data)) {\n        header = new nifti.NIFTI1();\n    } else if (nifti.isNIFTI2(data)) {\n        header = new nifti.NIFTI2();\n    }\n\n    if (header) {\n        header.readHeader(data);\n    } else {\n        console.error(\"That file does not appear to be NIFTI!\");\n    }\n\n    return header;\n};\n\n\n\n/**\n * Returns true if this header contains an extension.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @returns {boolean}\n */\nnifti.hasExtension = function (header) {\n    return (header.extensionFlag[0] != 0);\n};\n\n\n\n/**\n * Returns the image data.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readImage = function (header, data) {\n    var imageOffset = header.vox_offset,\n        timeDim = 1,\n        statDim = 1;\n\n    if (header.dims[4]) {\n        timeDim = header.dims[4];\n    }\n\n    if (header.dims[5]) {\n        statDim = header.dims[5];\n    }\n\n    var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);\n    return data.slice(imageOffset, imageOffset + imageSize);\n};\n\n\n\n/**\n * Returns the extension data (including extension header).\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readExtension = function (header, data) {\n    var loc = header.getExtensionLocation(),\n        size = header.extensionSize;\n\n    return data.slice(loc, loc + size);\n};\n\n\n\n/**\n * Returns the extension data.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readExtensionData = function (header, data) {\n    var loc = header.getExtensionLocation(),\n        size = header.extensionSize;\n\n    return data.slice(loc + 8, loc + size - 8);\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Cancellation token system with similarity to the cancellation_token in Microsoft's PPL.\n */\n\n/**\n * Interface used by cancelable operations to monitor whether cancellation has occurred.\n *\n * Note that this interface does not provide any way to trigger cancellation; for that,\n * CancellationTokenSource is used.\n */\nexport interface CancellationToken {\n  /**\n   * Indicates whether cancellation has occurred.\n   */\n  readonly isCanceled: boolean;\n\n  /**\n   * Add a cancellation handler function.  The handler will be invoked synchronously if\n   * this.isCanceled === true.  Otherwise, it will be invoked synchronously upon cancellation,\n   * unless it is removed prior to cancellation.\n   *\n   * The handler function must not throw any exceptions when called.\n   *\n   * @precondition The handler function must not already be registered.\n   *\n   * @param handler The handler function to add.\n   *\n   * @return A function that unregisters the handler.\n   */\n  add(handler: () => void): () => void;\n\n  /**\n   * Unregister a cancellation handler function.  If this.isCanceled, or the specified handler\n   * function has not been registered, then this function has no effect.\n   */\n  remove(handler: () => void): void;\n}\n\nclass CancellationError {\n  name = 'CancellationError';\n  message = 'CANCELED';\n  toString() {\n    return 'CANCELED';\n  }\n}\n\n/**\n * Singleton instance of CancellationError thrown to indicate cancellation.\n */\nexport const CANCELED = new CancellationError();\n\n/**\n * Throws CANCELED if token.isCanceled === true.\n */\nexport function throwIfCanceled(token: CancellationToken) {\n  if (token.isCanceled === true) {\n    throw CANCELED;\n  }\n}\n\nconst noopFunction = () => {};\n\n/**\n * CancellationToken that cannot be canceled.  This can be passed to operations that require a\n * CancellationToken but will not need to be canceled.\n */\nexport const uncancelableToken: CancellationToken = {\n  isCanceled: false,\n  add: () => noopFunction,\n  remove: noopFunction\n};\n\n/**\n * Class that can be used to trigger cancellation.\n */\nexport class CancellationTokenSource implements CancellationToken {\n  /**\n   * Trigger cancellation.\n   *\n   * If this.isCanceled === false, then each registered cancellation handler is invoked\n   * synchronously.\n   */\n  cancel() {\n    const {handlers} = this;\n    if (handlers !== null) {\n      this.handlers = null;\n      if (handlers !== undefined) {\n        for (let handler of handlers) {\n          handler();\n        }\n      }\n    }\n  }\n\n  get isCanceled() {\n    return this.handlers === null;\n  }\n\n  private handlers: Set<() => void>|undefined|null;\n\n  add(handler: () => void) {\n    let {handlers} = this;\n    if (handlers === null) {\n      handler();\n      return noopFunction;\n    }\n    if (handlers === undefined) {\n      handlers = this.handlers = new Set<() => void>();\n    }\n    handlers.add(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  remove(handler: () => void) {\n    const {handlers} = this;\n    if (handlers != null) {\n      handlers.delete(handler);\n    }\n  }\n}\n\n/**\n * Creates a CancellationToken corresponding to an asynchronous process with multiple consumers.  It\n * is cancelled only when the cancellation tokens corresponding to all of the consumers have been\n * cancelled.\n */\nexport class MultipleConsumerCancellationTokenSource extends CancellationTokenSource {\n  private consumers = new Set<CancellationToken>();\n\n  addConsumer(cancellationToken: CancellationToken = uncancelableToken) {\n    const {consumers} = this;\n    if (consumers.has(cancellationToken) || cancellationToken.isCanceled) {\n      return;\n    }\n    consumers.add(cancellationToken);\n    cancellationToken.add(() => {\n      consumers.delete(cancellationToken);\n      if (consumers.size === 0) {\n        this.cancel();\n      }\n    });\n  }\n}\n\n\n/**\n * Creates a promise and a dependent cancellation token.\n *\n * The dependent cancellation token will be canceled if the specified `cancellationToken` is\n * canceled while the promise is pending.\n *\n * @param cancellationToken The token that provides notification of cancellation.\n * @param executor The executor passed the resolve and reject functions for the promise, as well as\n * the dependent cancellation token.  If cancellation occurs after either resolve or reject is\n * called, then the dependent token is not cancelled.\n *\n * @returns A new Promise.\n */\nexport function makeCancelablePromise<T>(\n    cancellationToken: CancellationToken,\n    executor: (\n        resolve: (value: T|Promise<T>) => void, reject: (error: any) => void,\n        token: CancellationToken) => void) {\n  return new Promise<T>((resolve, reject) => {\n    if (cancellationToken === uncancelableToken) {\n      executor(resolve, reject, uncancelableToken);\n      return;\n    }\n    const scopedToken = new CancellationTokenSource();\n    const unregister = cancellationToken.add(() => {\n      scopedToken.cancel();\n    });\n    executor(\n        value => {\n          unregister();\n          resolve(value);\n        },\n        error => {\n          unregister();\n          reject(error);\n        },\n        scopedToken);\n  });\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Disposable { dispose: () => void; }\n\nexport type Disposer = Disposable | (() => void);\n\nconst DEBUG_REF_COUNTS = false;\n\nexport function invokeDisposer(disposer: Disposer) {\n  if (typeof disposer === 'object') {\n    disposer.dispose();\n  } else {\n    disposer();\n  }\n}\n\nexport function invokeDisposers(disposers: Disposer[]) {\n  for (let i = disposers.length; i > 0; --i) {\n    invokeDisposer(disposers[i - 1]);\n  }\n}\n\nexport function registerEventListener(\n    target: EventTarget, type: string, listener: EventListenerOrEventListenerObject,\n    options?: boolean|AddEventListenerOptions) {\n  target.addEventListener(type, listener, options);\n  return () => target.removeEventListener(type, listener, options);\n}\n\nexport class RefCounted implements Disposable {\n  public refCount = 1;\n  wasDisposed: boolean|undefined;\n  private disposers: Disposer[];\n  addRef() {\n    ++this.refCount;\n    return this;\n  }\n  disposedStacks: any;\n  dispose() {\n    if (DEBUG_REF_COUNTS) {\n      if (this.refCount === 0) {\n        debugger;\n      }\n      (this.disposedStacks = (this.disposedStacks || [])).push((new Error()).stack);\n    }\n    if (--this.refCount !== 0) {\n      return;\n    }\n    this.refCountReachedZero();\n  }\n\n  protected refCountReachedZero() {\n    this.disposed();\n    let {disposers} = this;\n    if (disposers !== undefined) {\n      invokeDisposers(disposers);\n      this.disposers = <any>undefined;\n    }\n    this.wasDisposed = true;\n  }\n  disposed() {}\n  registerDisposer<T extends Disposer>(f: T): T {\n    let {disposers} = this;\n    if (disposers == null) {\n      this.disposers = [f];\n    } else {\n      disposers.push(f);\n    }\n    return f;\n  }\n  unregisterDisposer<T extends Disposer>(f: T): T {\n    let {disposers} = this;\n    if (disposers != null) {\n      let index = disposers.indexOf(f);\n      if (index !== -1) {\n        disposers.splice(index, 1);\n      }\n    }\n    return f;\n  }\n  registerEventListener(\n      target: EventTarget, type: string, listener: EventListenerOrEventListenerObject,\n      options?: boolean|AddEventListenerOptions) {\n    this.registerDisposer(registerEventListener(target, type, listener, options));\n  }\n  registerCancellable<T extends{cancel: () => void}>(cancellable: T) {\n    this.registerDisposer(() => {\n      cancellable.cancel();\n    });\n    return cancellable;\n  }\n}\n\nexport class RefCountedValue<T> extends RefCounted {\n  constructor(public value: T) {\n    super();\n  }\n}\n\n/**\n * A variable of this type is associated with an increment of the reference count.  If a function\n * parameter is declared with this type, then callers must donate a reference count.\n */\nexport type Owned<T extends Disposable> = T;\n\n/**\n * A variable of this type is not associated with an increment of the reference count.\n */\nexport type Borrowed<T extends Disposable> = T;\n\nexport function disposableOnce(value: Disposer|undefined) {\n  return () => {\n    if (value !== undefined) {\n      let x = value;\n      value = undefined;\n      invokeDisposer(x);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CANCELED, CancellationToken, CancellationTokenSource, makeCancelablePromise, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {RefCounted} from 'neuroglancer/util/disposable';\n\nexport type RPCHandler = (this: RPC, x: any) => void;\n\nexport type RpcId = number;\n\nconst IS_WORKER = !(typeof Window !== 'undefined' && self instanceof Window);\n\nconst DEBUG = false;\n\nconst DEBUG_MESSAGES = false;\n\nconst PROMISE_RESPONSE_ID = 'rpc.promise.response';\nconst PROMISE_CANCEL_ID = 'rpc.promise.cancel';\n\nvar handlers = new Map<string, RPCHandler>();\n\nexport function registerRPC(key: string, handler: RPCHandler) {\n  handlers.set(key, handler);\n}\n\nexport type RPCPromise<T> = Promise<{value: T, transfers?: any[]}>;\n\nexport class RPCError extends Error {\n  constructor(public name: string, public message: string) {\n    super(message);\n  }\n}\n\nexport function registerPromiseRPC<T>(\n    key: string,\n    handler: (this: RPC, x: any, cancellationToken: CancellationToken) => RPCPromise<T>) {\n  registerRPC(key, function(this: RPC, x: any) {\n    let id = <number>x['id'];\n    const cancellationToken = new CancellationTokenSource();\n    let promise = handler.call(this, x, cancellationToken) as RPCPromise<T>;\n    this.set(id, {promise, cancellationToken});\n    promise.then(\n        ({value, transfers}) => {\n          this.delete(id);\n          this.invoke(PROMISE_RESPONSE_ID, {'id': id, 'value': value}, transfers);\n        },\n        error => {\n          this.delete(id);\n          this.invoke(\n              PROMISE_RESPONSE_ID, {'id': id, 'error': error.message, 'errorName': error.name});\n        });\n  });\n}\n\nregisterRPC(PROMISE_CANCEL_ID, function(this: RPC, x: any) {\n  let id = <number>x['id'];\n  const request = this.get(id);\n  if (request !== undefined) {\n    let {cancellationToken} = request;\n    cancellationToken.cancel();\n  }\n});\n\nregisterRPC(PROMISE_RESPONSE_ID, function(this: RPC, x: any) {\n  let id = <number>x['id'];\n  let {resolve, reject} = this.get(id);\n  this.delete(id);\n  if (x.hasOwnProperty('value')) {\n    resolve(x['value']);\n  } else {\n    const errorName = x['errorName'];\n    if (errorName === CANCELED.name) {\n      reject(CANCELED);\n    } else {\n      reject(new RPCError(x['errorName'], x['error']));\n    }\n  }\n});\n\ninterface RPCTarget {\n  postMessage(message?: any, ports?: any): void;\n  onmessage: ((ev: MessageEvent) => any)|null;\n}\n\nconst INITIAL_RPC_ID = IS_WORKER ? -1 : 0;\n\nexport class RPC {\n  private objects = new Map<RpcId, any>();\n  private nextId: RpcId = INITIAL_RPC_ID;\n  constructor(public target: RPCTarget) {\n    target.onmessage = (e) => {\n      let data = e.data;\n      if (DEBUG_MESSAGES) {\n        console.log('Received message', data);\n      }\n      handlers.get(data.functionName)!.call(this, data);\n    };\n  }\n\n  get numObjects() {\n    return this.objects.size;\n  }\n\n  set(id: RpcId, value: any) {\n    this.objects.set(id, value);\n  }\n\n  delete(id: RpcId) {\n    this.objects.delete(id);\n  }\n  get(id: RpcId) {\n    return this.objects.get(id);\n  }\n  getRef<T extends SharedObject>(x: {'id': RpcId, 'gen': number}): T {\n    let rpcId = x['id'];\n    let obj = <T>this.get(rpcId);\n    obj.referencedGeneration = x['gen'];\n    obj.addRef();\n    return obj;\n  }\n\n  getOptionalRef<T extends SharedObject>(x: {'id': RpcId, 'gen': number}): T|undefined {\n    if (x === undefined) return undefined;\n    let rpcId = x['id'];\n    let obj = this.get(rpcId) as T;\n    obj.referencedGeneration = x['gen'];\n    obj.addRef();\n    return obj;\n  }\n\n  invoke(name: string, x: any, transfers?: any[]) {\n    x.functionName = name;\n    if (DEBUG_MESSAGES) {\n      console.trace('Sending message', x);\n    }\n    this.target.postMessage(x, transfers);\n  }\n\n  promiseInvoke<T>(name: string, x: any, cancellationToken = uncancelableToken, transfers?: any[]):\n      Promise<T> {\n    return makeCancelablePromise<T>(cancellationToken, (resolve, reject, token) => {\n      const id = x['id'] = this.newId();\n      this.set(id, {resolve, reject});\n      this.invoke(name, x, transfers);\n      token.add(() => {\n        this.invoke(PROMISE_CANCEL_ID, {'id': id});\n      });\n    });\n  }\n  newId() {\n    return IS_WORKER ? this.nextId-- : this.nextId++;\n  }\n}\n\nexport class SharedObject extends RefCounted {\n  rpc: RPC|null = null;\n  rpcId: RpcId|null = null;\n  isOwner: boolean|undefined;\n  unreferencedGeneration: number;\n  referencedGeneration: number;\n\n  initializeSharedObject(rpc: RPC, rpcId = rpc.newId()) {\n    this.rpc = rpc;\n    this.rpcId = rpcId;\n    this.isOwner = false;\n    rpc.set(rpcId, this);\n  }\n\n  initializeCounterpart(rpc: RPC, options: any = {}) {\n    this.initializeSharedObject(rpc);\n    this.unreferencedGeneration = 0;\n    this.referencedGeneration = 0;\n    this.isOwner = true;\n    options['id'] = this.rpcId;\n    options['type'] = this.RPC_TYPE_ID;\n    rpc.invoke('SharedObject.new', options);\n  }\n\n  dispose() {\n    super.dispose();\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   */\n  addCounterpartRef() {\n    return {'id': this.rpcId, 'gen': ++this.referencedGeneration};\n  }\n\n  protected refCountReachedZero() {\n    if (this.isOwner === true) {\n      if (this.referencedGeneration === this.unreferencedGeneration) {\n        this.ownerDispose();\n      }\n    } else if (this.isOwner === false) {\n      this.rpc!.invoke(\n          'SharedObject.refCountReachedZero', {'id': this.rpcId, 'gen': this.referencedGeneration});\n    } else {\n      super.refCountReachedZero();\n    }\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   */\n  protected ownerDispose() {\n    if (DEBUG) {\n      console.log(`[${IS_WORKER}] #rpc object = ${this.rpc!.numObjects}`);\n    }\n    let {rpc, rpcId} = this;\n    super.refCountReachedZero();\n    rpc!.delete(rpcId!);\n    rpc!.invoke('SharedObject.dispose', {'id': rpcId});\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   *\n   * This should be called when the counterpart's refCount is decremented and reaches zero.\n   */\n  counterpartRefCountReachedZero(generation: number) {\n    this.unreferencedGeneration = generation;\n    if (this.refCount === 0 && generation === this.referencedGeneration) {\n      this.ownerDispose();\n    }\n  }\n\n  /**\n   * Should be set to a constant specifying the SharedObject type identifier on the prototype of\n   * final derived owner classes.  It is not used on counterpart (non-owner) classes.\n   */\n  RPC_TYPE_ID: string;\n}\n\nexport function initializeSharedObjectCounterpart(obj: SharedObject, rpc?: RPC, options: any = {}) {\n  if (rpc != null) {\n    obj.initializeSharedObject(rpc, options['id']);\n  }\n}\n\n/**\n * Base class for defining a SharedObject type that will never be owned.\n */\nexport class SharedObjectCounterpart extends SharedObject {\n  constructor(rpc?: RPC, options: any = {}) {\n    super();\n    initializeSharedObjectCounterpart(this, rpc, options);\n  }\n}\n\n\nexport interface SharedObjectConstructor { new(rpc: RPC, options: any): SharedObjectCounterpart; }\n\nregisterRPC('SharedObject.dispose', function(x) {\n  let obj = <SharedObject>this.get(x['id']);\n  if (obj.refCount !== 0) {\n    throw new Error(`Attempted to dispose object with non-zero reference count.`);\n  }\n  if (DEBUG) {\n    console.log(`[${IS_WORKER}] #rpc objects: ${this.numObjects}`);\n  }\n  obj.disposed();\n  this.delete(obj.rpcId!);\n  obj.rpcId = null;\n  obj.rpc = null;\n});\n\n// RPC ID used to request the other thread to create a worker.\n//\n// On Safari, workers cannot themselves create additional workers.  As a workaround, workers can\n// send the main thread a worker URL and a `MessagePort` and the main thread will create the worker\n// and send it the message port.\nexport const WORKER_RPC_ID = 'Worker';\n\nregisterRPC(WORKER_RPC_ID, function(x) {\n  const {port, path} = x;\n  const worker = new Worker(path);\n  worker.postMessage({port}, [port]);\n});\n\nregisterRPC('SharedObject.refCountReachedZero', function(x) {\n  let obj = <SharedObject>this.get(x['id']);\n  let generation = <number>x['gen'];\n  obj.counterpartRefCountReachedZero(generation);\n});\n\nconst sharedObjectConstructors = new Map<string, SharedObjectConstructor>();\n\n/**\n * Register a class as a SharedObject owner type under the specified identifier.\n *\n * This is intended to be used as a decorator.\n */\nexport function registerSharedObjectOwner(identifier: string) {\n  return (constructorFunction: {prototype: {RPC_TYPE_ID: string}}) => {\n    constructorFunction.prototype.RPC_TYPE_ID = identifier;\n  };\n}\n\n/**\n * Register a class as a SharedObject counterpart type under the specified identifier.\n *\n * This is intended to be used as a decorator.\n *\n * Also register the type as a SharedObject owner, which is useful if this type is also used as a\n * SharedObject owner.\n */\nexport function registerSharedObject(identifier?: string) {\n  return (constructorFunction: SharedObjectConstructor) => {\n    if (identifier !== undefined) {\n      constructorFunction.prototype.RPC_TYPE_ID = identifier;\n    } else {\n      identifier = constructorFunction.prototype.RPC_TYPE_ID;\n      if (identifier === undefined) {\n        throw new Error('RPC_TYPE_ID should have already been defined');\n      }\n    }\n    sharedObjectConstructors.set(identifier, constructorFunction);\n  };\n}\n\nregisterRPC('SharedObject.new', function(x) {\n  let rpc = <RPC>this;\n  let typeName = <string>x['type'];\n  let constructorFunction = sharedObjectConstructors.get(typeName)!;\n  let obj = new constructorFunction(rpc, x);\n  // Counterpart objects start with a reference count of zero.\n  --obj.refCount;\n});\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RPC} from 'neuroglancer/worker_rpc';\n\nexport var rpc = new RPC(self);\n(<any>self).rpc = rpc;\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport throttle from 'lodash/throttle';\nimport {CHUNK_LAYER_STATISTICS_RPC_ID, CHUNK_MANAGER_RPC_ID, CHUNK_QUEUE_MANAGER_RPC_ID, CHUNK_SOURCE_INVALIDATE_RPC_ID, ChunkDownloadStatistics, ChunkMemoryStatistics, ChunkPriorityTier, LayerChunkProgressInfo, ChunkSourceParametersConstructor, ChunkState, getChunkDownloadStatisticIndex, getChunkStateStatisticIndex, numChunkMemoryStatistics, numChunkStatistics, REQUEST_CHUNK_STATISTICS_RPC_ID} from 'neuroglancer/chunk_manager/base';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {CancellationToken, CancellationTokenSource} from 'neuroglancer/util/cancellation';\nimport {Disposable, RefCounted} from 'neuroglancer/util/disposable';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {LinkedListOperations} from 'neuroglancer/util/linked_list';\nimport LinkedList0 from 'neuroglancer/util/linked_list.0';\nimport LinkedList1 from 'neuroglancer/util/linked_list.1';\nimport {StringMemoize} from 'neuroglancer/util/memoize';\nimport {ComparisonFunction, PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\nimport PairingHeap0 from 'neuroglancer/util/pairing_heap.0';\nimport PairingHeap1 from 'neuroglancer/util/pairing_heap.1';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {initializeSharedObjectCounterpart, registerPromiseRPC, registerRPC, registerSharedObject, registerSharedObjectOwner, RPC, SharedObject, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst DEBUG_CHUNK_UPDATES = false;\n\nexport interface ChunkStateListener {\n  stateChanged(chunk: Chunk, oldState: ChunkState): void;\n}\n\nlet nextMarkGeneration = 0;\nexport function getNextMarkGeneration() {\n  return ++nextMarkGeneration;\n}\n\nexport class Chunk implements Disposable {\n  // Node properties used for eviction/promotion heaps and LRU linked lists.\n  child0: Chunk|null = null;\n  next0: Chunk|null = null;\n  prev0: Chunk|null = null;\n  child1: Chunk|null = null;\n  next1: Chunk|null = null;\n  prev1: Chunk|null = null;\n\n  source: ChunkSource|null = null;\n\n  key: string|null = null;\n\n  private state_ = ChunkState.NEW;\n\n  error: any = null;\n\n  // Used by layers for marking chunks for various purposes.\n  markGeneration = -1;\n\n  /**\n   * Specifies existing priority within priority tier.  Only meaningful if priorityTier in\n   * CHUNK_ORDERED_PRIORITY_TIERS.  Higher numbers mean higher priority.\n   */\n  priority = 0;\n\n  /**\n   * Specifies updated priority within priority tier, not yet reflected in priority queue state.\n   * Only meaningful if newPriorityTier in CHUNK_ORDERED_PRIORITY_TIERS.\n   */\n  newPriority = 0;\n\n  priorityTier = ChunkPriorityTier.RECENT;\n\n  /**\n   * Specifies updated priority tier, not yet reflected in priority queue state.\n   */\n  newPriorityTier = ChunkPriorityTier.RECENT;\n\n  private systemMemoryBytes_: number = 0;\n  private gpuMemoryBytes_: number = 0;\n  private downloadSlots_: number = 1;\n  backendOnly = false;\n  isComputational = false;\n  newlyRequestedToFrontend = false;\n  requestedToFrontend = false;\n\n  /**\n   * Cancellation token used to cancel the pending download.  Set to undefined except when state !==\n   * DOWNLOADING.  This should not be accessed by code outside this module.\n   */\n  downloadCancellationToken: CancellationTokenSource|undefined = undefined;\n\n  initialize(key: string) {\n    this.key = key;\n    this.priority = Number.NEGATIVE_INFINITY;\n    this.priorityTier = ChunkPriorityTier.RECENT;\n    this.newPriority = Number.NEGATIVE_INFINITY;\n    this.newPriorityTier = ChunkPriorityTier.RECENT;\n    this.error = null;\n    this.state = ChunkState.NEW;\n    this.requestedToFrontend = false;\n    this.newlyRequestedToFrontend = false;\n  }\n\n  /**\n   * Sets this.priority{Tier,} to this.newPriority{Tier,}, and resets this.newPriorityTier to\n   * ChunkPriorityTier.RECENT.\n   *\n   * This does not actually update any queues to reflect this change.\n   */\n  updatePriorityProperties() {\n    this.priorityTier = this.newPriorityTier;\n    this.priority = this.newPriority;\n    this.newPriorityTier = ChunkPriorityTier.RECENT;\n    this.newPriority = Number.NEGATIVE_INFINITY;\n    this.requestedToFrontend = this.newlyRequestedToFrontend;\n  }\n\n  dispose() {\n    this.source = null;\n    this.error = null;\n  }\n\n  get chunkManager() {\n    return (<ChunkSource>this.source).chunkManager;\n  }\n\n  get queueManager() {\n    return (<ChunkSource>this.source).chunkManager.queueManager;\n  }\n\n  downloadFailed(error: any) {\n    this.error = error;\n    this.queueManager.updateChunkState(this, ChunkState.FAILED);\n  }\n\n  downloadSucceeded() {\n    this.queueManager.updateChunkState(this, ChunkState.SYSTEM_MEMORY_WORKER);\n  }\n\n  freeSystemMemory() {}\n\n  serialize(msg: any, _transfers: any[]) {\n    msg['id'] = this.key;\n    msg['source'] = (<ChunkSource>this.source).rpcId;\n    msg['new'] = true;\n  }\n\n  toString() {\n    return this.key;\n  }\n\n  set state(newState: ChunkState) {\n    if (newState === this.state_) {\n      return;\n    }\n    const oldState = this.state_;\n    this.state_ = newState;\n    this.source!.chunkStateChanged(this, oldState);\n  }\n\n  get state() {\n    return this.state_;\n  }\n\n  set systemMemoryBytes(bytes: number) {\n    updateChunkStatistics(this, -1);\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, false);\n    this.systemMemoryBytes_ = bytes;\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, true);\n    updateChunkStatistics(this, 1);\n    this.chunkManager.queueManager.scheduleUpdate();\n  }\n\n  get systemMemoryBytes() {\n    return this.systemMemoryBytes_;\n  }\n\n  set gpuMemoryBytes(bytes: number) {\n    updateChunkStatistics(this, -1);\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, false);\n    this.gpuMemoryBytes_ = bytes;\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, true);\n    updateChunkStatistics(this, 1);\n    this.chunkManager.queueManager.scheduleUpdate();\n  }\n\n  get gpuMemoryBytes() {\n    return this.gpuMemoryBytes_;\n  }\n\n  get downloadSlots() {\n    return this.downloadSlots_;\n  }\n\n  set downloadSlots(count: number) {\n    if (count === this.downloadSlots_) return;\n    updateChunkStatistics(this, -1);\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, false);\n    this.downloadSlots_ = count;\n    this.chunkManager.queueManager.adjustCapacitiesForChunk(this, true);\n    updateChunkStatistics(this, 1);\n    this.chunkManager.queueManager.scheduleUpdate();\n  }\n\n  registerListener(listener: ChunkStateListener) {\n    if (!this.source) {\n      return false;\n    }\n    return this.source.registerChunkListener(this.key!, listener);\n  }\n\n  unregisterListener(listener: ChunkStateListener) {\n    if (!this.source) {\n      return false;\n    }\n    return this.source.unregisterChunkListener(this.key!, listener);\n  }\n\n  static priorityLess(a: Chunk, b: Chunk) {\n    return a.priority < b.priority;\n  }\n\n  static priorityGreater(a: Chunk, b: Chunk) {\n    return a.priority > b.priority;\n  }\n}\n\nexport interface ChunkConstructor<T extends Chunk> {\n  new(): T;\n}\n\nconst numSourceQueueLevels = 2;\n\n/**\n * Base class inherited by both ChunkSource, for implementing the backend part of chunk sources that\n * also have a frontend-part, as well as other chunk sources, such as the GenericFileSource, that\n * has only a backend part.\n */\nexport class ChunkSourceBase extends SharedObject {\n  private listeners_ = new Map<string, ChunkStateListener[]>();\n  chunks: Map<string, Chunk> = new Map<string, Chunk>();\n  freeChunks: Chunk[] = new Array<Chunk>();\n  statistics = new Float64Array(numChunkStatistics);\n\n  /**\n   * sourceQueueLevel must be greater than the sourceQueueLevel of any ChunkSource whose download\n   * method depends on chunks from this source.  A normal ChunkSource with no other dependencies\n   * should have a level of 0.\n   */\n  sourceQueueLevel = 0;\n\n  constructor(public chunkManager: Borrowed<ChunkManager>) {\n    super();\n    chunkManager.queueManager.sources.add(this);\n  }\n\n  disposed() {\n    this.chunkManager.queueManager.sources.delete(this);\n    super.disposed();\n  }\n\n  getNewChunk_<T extends Chunk>(chunkType: ChunkConstructor<T>): T {\n    let freeChunks = this.freeChunks;\n    let freeChunksLength = freeChunks.length;\n    if (freeChunksLength > 0) {\n      let chunk = <T>freeChunks[freeChunksLength - 1];\n      freeChunks.length = freeChunksLength - 1;\n      chunk.source = this;\n      return chunk;\n    }\n    let chunk = new chunkType();\n    chunk.source = this;\n    return chunk;\n  }\n\n  /**\n   * Adds the specified chunk to the chunk cache.\n   *\n   * If the chunk cache was previously empty, also call this.addRef() to increment the reference\n   * count.\n   */\n  addChunk(chunk: Chunk) {\n    let {chunks} = this;\n    if (chunks.size === 0) {\n      this.addRef();\n    }\n    chunks.set(chunk.key!, chunk);\n    updateChunkStatistics(chunk, 1);\n  }\n\n  /**\n   * Remove the specified chunk from the chunk cache.\n   *\n   * If the chunk cache becomes empty, also call this.dispose() to decrement the reference count.\n   */\n  removeChunk(chunk: Chunk) {\n    let {chunks, freeChunks} = this;\n    chunks.delete(chunk.key!);\n    chunk.dispose();\n    freeChunks[freeChunks.length] = chunk;\n    if (chunks.size === 0) {\n      this.dispose();\n    }\n  }\n\n  registerChunkListener(key: string, listener: ChunkStateListener) {\n    if (!this.listeners_.has(key)) {\n      this.listeners_.set(key, [listener]);\n    } else {\n      this.listeners_.get(key)!.push(listener);\n    }\n    return true;\n  }\n\n  unregisterChunkListener(key: string, listener: ChunkStateListener) {\n    if (!this.listeners_.has(key)) {\n      return false;\n    }\n    const keyListeners = this.listeners_.get(key)!;\n    const idx = keyListeners.indexOf(listener);\n    if (idx < 0) {\n      return false;\n    }\n    keyListeners.splice(idx, 1);\n    if (keyListeners.length === 0) {\n      this.listeners_.delete(key);\n    }\n    return true;\n  }\n\n  chunkStateChanged(chunk: Chunk, oldState: ChunkState) {\n    if (!chunk.key) {\n      return;\n    }\n    if (!this.listeners_.has(chunk.key)) {\n      return;\n    }\n    for (const listener of [...this.listeners_.get(chunk.key)!]) {\n      listener.stateChanged(chunk, oldState);\n    }\n  }\n}\n\nfunction updateChunkStatistics(chunk: Chunk, sign: number) {\n  const {statistics} = chunk.source!;\n  const {systemMemoryBytes, gpuMemoryBytes} = chunk;\n  const index = getChunkStateStatisticIndex(chunk.state, chunk.priorityTier);\n  statistics[index * numChunkMemoryStatistics + ChunkMemoryStatistics.numChunks] += sign;\n  statistics[index * numChunkMemoryStatistics + ChunkMemoryStatistics.systemMemoryBytes] +=\n      sign * systemMemoryBytes;\n  statistics[index * numChunkMemoryStatistics + ChunkMemoryStatistics.gpuMemoryBytes] +=\n      sign * gpuMemoryBytes;\n}\n\nexport interface ChunkSourceBase {\n  /**\n   * Begin downloading the specified the chunk.  The returned promise should resolve when the\n   * downloaded data has been successfully decoded and stored in the chunk, or rejected if the\n   * download or decoding fails.\n   *\n   * Note: This method must be defined by subclasses.\n   *\n   * @param chunk Chunk to download.\n   * @param cancellationToken If this token is canceled, the download/decoding should be aborted if\n   * possible.\n   *\n   * TODO(jbms): Move this back to the class definition above and declare this abstract once mixins\n   * are compatible with abstract classes.\n   */\n  download(chunk: Chunk, cancellationToken: CancellationToken): Promise<void>;\n}\n\nexport class ChunkSource extends ChunkSourceBase {\n  constructor(rpc: RPC, options: any) {\n    // No need to add a reference, since the owner counterpart will hold a reference to the owner\n    // counterpart of chunkManager.\n    const chunkManager = <ChunkManager>rpc.get(options['chunkManager']);\n    super(chunkManager);\n    initializeSharedObjectCounterpart(this, rpc, options);\n  }\n}\n\nfunction startChunkDownload(chunk: Chunk) {\n  const downloadCancellationToken = chunk.downloadCancellationToken = new CancellationTokenSource();\n  const startTime = Date.now();\n  chunk.source!.download(chunk, downloadCancellationToken)\n      .then(\n          () => {\n            if (chunk.downloadCancellationToken === downloadCancellationToken) {\n              chunk.downloadCancellationToken = undefined;\n              const endTime = Date.now();\n              const {statistics} = chunk.source!;\n              statistics[getChunkDownloadStatisticIndex(ChunkDownloadStatistics.totalTime)] +=\n                  (endTime - startTime);\n              ++statistics[getChunkDownloadStatisticIndex(ChunkDownloadStatistics.totalChunks)];\n              chunk.downloadSucceeded();\n            }\n          },\n          (error: any) => {\n            if (chunk.downloadCancellationToken === downloadCancellationToken) {\n              chunk.downloadCancellationToken = undefined;\n              chunk.downloadFailed(error);\n              console.log(`Error retrieving chunk ${chunk}: ${error}`);\n            }\n          });\n}\n\nfunction cancelChunkDownload(chunk: Chunk) {\n  const token = chunk.downloadCancellationToken!;\n  chunk.downloadCancellationToken = undefined;\n  token.cancel();\n}\n\nclass ChunkPriorityQueue {\n  /**\n   * Heap roots for VISIBLE and PREFETCH priority tiers.\n   */\n  private heapRoots: (Chunk|null)[] = [null, null];\n\n  /**\n   * Head node for RECENT linked list.\n   */\n  private recentHead = new Chunk();\n  constructor(\n      private heapOperations: PairingHeapOperations<Chunk>,\n      private linkedListOperations: LinkedListOperations<Chunk>) {\n    linkedListOperations.initializeHead(this.recentHead);\n  }\n\n  add(chunk: Chunk) {\n    let priorityTier = chunk.priorityTier;\n    if (priorityTier === ChunkPriorityTier.RECENT) {\n      this.linkedListOperations.insertAfter(this.recentHead, chunk);\n    } else {\n      let {heapRoots} = this;\n      heapRoots[priorityTier] = this.heapOperations.meld(heapRoots[priorityTier], chunk);\n    }\n  }\n\n  * candidates(): Iterator<Chunk> {\n    if (this.heapOperations.compare === Chunk.priorityLess) {\n      // Start with least-recently used RECENT chunk.\n      let {linkedListOperations, recentHead} = this;\n      while (true) {\n        let chunk = linkedListOperations.back(recentHead);\n        if (chunk == null) {\n          break;\n        } else {\n          yield chunk;\n        }\n      }\n      let {heapRoots} = this;\n      for (let tier = ChunkPriorityTier.LAST_ORDERED_TIER;\n           tier >= ChunkPriorityTier.FIRST_ORDERED_TIER; --tier) {\n        while (true) {\n          let root = heapRoots[tier];\n          if (root == null) {\n            break;\n          } else {\n            yield root;\n          }\n        }\n      }\n    } else {\n      let heapRoots = this.heapRoots;\n      for (let tier = ChunkPriorityTier.FIRST_ORDERED_TIER;\n           tier <= ChunkPriorityTier.LAST_ORDERED_TIER; ++tier) {\n        while (true) {\n          let root = heapRoots[tier];\n          if (root == null) {\n            break;\n          } else {\n            yield root;\n          }\n        }\n      }\n      let {linkedListOperations, recentHead} = this;\n      while (true) {\n        let chunk = linkedListOperations.front(recentHead);\n        if (chunk == null) {\n          break;\n        } else {\n          yield chunk;\n        }\n      }\n    }\n  }\n\n  /**\n   * Deletes a chunk from this priority queue.\n   * @param chunk The chunk to delete from the priority queue.\n   */\n  delete(chunk: Chunk) {\n    let priorityTier = chunk.priorityTier;\n    if (priorityTier === ChunkPriorityTier.RECENT) {\n      this.linkedListOperations.pop(chunk);\n    } else {\n      let heapRoots = this.heapRoots;\n      heapRoots[priorityTier] = this.heapOperations.remove(<Chunk>heapRoots[priorityTier], chunk);\n    }\n  }\n}\n\nfunction makeChunkPriorityQueue0(compare: ComparisonFunction<Chunk>) {\n  return new ChunkPriorityQueue(new PairingHeap0(compare), LinkedList0);\n}\n\nfunction makeChunkPriorityQueue1(compare: ComparisonFunction<Chunk>) {\n  return new ChunkPriorityQueue(new PairingHeap1(compare), LinkedList1);\n}\n\nfunction tryToFreeCapacity(\n    size: number, capacity: AvailableCapacity, priorityTier: ChunkPriorityTier, priority: number,\n    evictionCandidates: Iterator<Chunk>, evict: (chunk: Chunk) => void) {\n  while (capacity.availableItems < 1 || capacity.availableSize < size) {\n    let evictionCandidate = evictionCandidates.next().value;\n    if (evictionCandidate === undefined) {\n      // No eviction candidates available, promotions are done.\n      return false;\n    } else {\n      let evictionTier = evictionCandidate.priorityTier;\n      if (evictionTier < priorityTier ||\n          (evictionTier === priorityTier && evictionCandidate.priority >= priority)) {\n        // Lowest priority eviction candidate has priority >= highest\n        // priority promotion candidate.  No more promotions are\n        // possible.\n        return false;\n      }\n      evict(evictionCandidate);\n    }\n  }\n  return true;\n}\n\nclass AvailableCapacity extends RefCounted {\n  currentSize: number = 0;\n  currentItems: number = 0;\n\n  capacityChanged = new NullarySignal();\n\n  constructor(\n      public itemLimit: Borrowed<SharedWatchableValue<number>>,\n      public sizeLimit: Borrowed<SharedWatchableValue<number>>) {\n    super();\n    this.registerDisposer(itemLimit.changed.add(this.capacityChanged.dispatch));\n    this.registerDisposer(sizeLimit.changed.add(this.capacityChanged.dispatch));\n  }\n\n  /**\n   * Adjust available capacity by the specified amounts.\n   */\n  adjust(items: number, size: number) {\n    this.currentItems -= items;\n    this.currentSize -= size;\n  }\n\n  get availableSize() {\n    return this.sizeLimit.value - this.currentSize;\n  }\n  get availableItems() {\n    return this.itemLimit.value - this.currentItems;\n  }\n\n  toString() {\n    return `bytes=${this.currentSize}/${this.sizeLimit.value},` +\n        `items=${this.currentItems}/${this.itemLimit.value}`;\n  }\n}\n\n@registerSharedObject(CHUNK_QUEUE_MANAGER_RPC_ID)\nexport class ChunkQueueManager extends SharedObjectCounterpart {\n  gpuMemoryCapacity: AvailableCapacity;\n  systemMemoryCapacity: AvailableCapacity;\n\n  /**\n   * Download capacity for each sourceQueueLevel.\n   */\n  downloadCapacity: AvailableCapacity[];\n  computeCapacity: AvailableCapacity;\n\n  enablePrefetch: SharedWatchableValue<boolean>;\n\n  /**\n   * Set of chunk sources associated with this queue manager.\n   */\n  sources = new Set<Borrowed<ChunkSource>>();\n\n  /**\n   * Contains all chunks in QUEUED state pending download, for each sourceQueueLevel.\n   */\n  private queuedDownloadPromotionQueue = [\n    makeChunkPriorityQueue1(Chunk.priorityGreater),\n    makeChunkPriorityQueue1(Chunk.priorityGreater),\n  ];\n\n  /**\n   * Contains all chunks in QUEUED state pending compute.\n   */\n  private queuedComputePromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);\n\n  /**\n   * Contains all chunks in DOWNLOADING state, for each sourceQueueLevel.\n   */\n  private downloadEvictionQueue = [\n    makeChunkPriorityQueue1(Chunk.priorityLess),\n    makeChunkPriorityQueue1(Chunk.priorityLess),\n  ];\n\n  /**\n   * Contains all chunks in COMPUTING state.\n   */\n  private computeEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);\n\n  /**\n   * Contains all chunks that take up memory (DOWNLOADING, SYSTEM_MEMORY,\n   * GPU_MEMORY).\n   */\n  private systemMemoryEvictionQueue = makeChunkPriorityQueue0(Chunk.priorityLess);\n\n  /**\n   * Contains all chunks in SYSTEM_MEMORY state not in RECENT priority tier.\n   */\n  private gpuMemoryPromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);\n\n  /**\n   * Contains all chunks in GPU_MEMORY state.\n   */\n  private gpuMemoryEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);\n\n  // Should be `number|null`, but marked `any` to work around @types/node being pulled in.\n  private updatePending: any = null;\n\n  gpuMemoryChanged = new NullarySignal();\n\n  private numQueued = 0;\n  private numFailed = 0;\n  private gpuMemoryGeneration = 0;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    const getCapacity = (capacity: any) => {\n      const result = this.registerDisposer(\n          new AvailableCapacity(rpc.get(capacity['itemLimit']), rpc.get(capacity['sizeLimit'])));\n      result.capacityChanged.add(() => this.scheduleUpdate());\n      return result;\n    };\n    this.gpuMemoryCapacity = getCapacity(options['gpuMemoryCapacity']);\n    this.systemMemoryCapacity = getCapacity(options['systemMemoryCapacity']);\n    this.enablePrefetch = rpc.get(options['enablePrefetch']);\n    this.downloadCapacity = [\n      getCapacity(options['downloadCapacity']),\n      getCapacity(options['downloadCapacity']),\n    ];\n    this.computeCapacity = getCapacity(options['computeCapacity']);\n  }\n\n  scheduleUpdate() {\n    if (this.updatePending === null) {\n      this.updatePending = setTimeout(this.process.bind(this), 0);\n    }\n  }\n\n  * chunkQueuesForChunk(chunk: Chunk) {\n    switch (chunk.state) {\n      case ChunkState.QUEUED:\n        if (chunk.isComputational) {\n          yield this.queuedComputePromotionQueue;\n        } else {\n          yield this.queuedDownloadPromotionQueue[chunk.source!.sourceQueueLevel];\n        }\n        break;\n\n      case ChunkState.DOWNLOADING:\n        if (chunk.isComputational) {\n          yield this.computeEvictionQueue;\n        } else {\n          yield this.downloadEvictionQueue[chunk.source!.sourceQueueLevel];\n          yield this.systemMemoryEvictionQueue;\n        }\n        break;\n\n      case ChunkState.SYSTEM_MEMORY_WORKER:\n      case ChunkState.SYSTEM_MEMORY:\n        yield this.systemMemoryEvictionQueue;\n        if (chunk.priorityTier !== ChunkPriorityTier.RECENT && !chunk.backendOnly &&\n            chunk.requestedToFrontend) {\n          yield this.gpuMemoryPromotionQueue;\n        }\n        break;\n\n      case ChunkState.GPU_MEMORY:\n        yield this.systemMemoryEvictionQueue;\n        yield this.gpuMemoryEvictionQueue;\n        break;\n    }\n  }\n\n  adjustCapacitiesForChunk(chunk: Chunk, add: boolean) {\n    let factor = add ? -1 : 1;\n    switch (chunk.state) {\n      case ChunkState.FAILED:\n        this.numFailed -= factor;\n        break;\n\n      case ChunkState.QUEUED:\n        this.numQueued -= factor;\n        break;\n\n      case ChunkState.DOWNLOADING:\n        (chunk.isComputational ? this.computeCapacity :\n                                 this.downloadCapacity[chunk.source!.sourceQueueLevel])\n            .adjust(factor * chunk.downloadSlots, factor * chunk.systemMemoryBytes);\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        break;\n\n      case ChunkState.SYSTEM_MEMORY:\n      case ChunkState.SYSTEM_MEMORY_WORKER:\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        break;\n\n      case ChunkState.GPU_MEMORY:\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        this.gpuMemoryCapacity.adjust(factor, factor * chunk.gpuMemoryBytes);\n        break;\n    }\n  }\n\n  private removeChunkFromQueues_(chunk: Chunk) {\n    updateChunkStatistics(chunk, -1);\n    for (let queue of this.chunkQueuesForChunk(chunk)) {\n      queue.delete(chunk);\n    }\n  }\n\n  // var freedChunks = 0;\n  private addChunkToQueues_(chunk: Chunk) {\n    if (chunk.state === ChunkState.QUEUED && chunk.priorityTier === ChunkPriorityTier.RECENT) {\n      // Delete this chunk.\n      let {source} = chunk;\n      source!.removeChunk(chunk);\n      this.adjustCapacitiesForChunk(chunk, false);\n      return false;\n    } else {\n      updateChunkStatistics(chunk, 1);\n      for (let queue of this.chunkQueuesForChunk(chunk)) {\n        queue.add(chunk);\n      }\n      return true;\n    }\n  }\n\n  performChunkPriorityUpdate(chunk: Chunk) {\n    if (chunk.priorityTier === chunk.newPriorityTier && chunk.priority === chunk.newPriority) {\n      chunk.newPriorityTier = ChunkPriorityTier.RECENT;\n      chunk.newPriority = Number.NEGATIVE_INFINITY;\n      return;\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(\n          `${chunk}: changed priority ${chunk.priorityTier}:` +\n          `${chunk.priority} -> ${chunk.newPriorityTier}:${chunk.newPriority}`);\n    }\n    this.removeChunkFromQueues_(chunk);\n    chunk.updatePriorityProperties();\n    if (chunk.state === ChunkState.NEW) {\n      chunk.state = ChunkState.QUEUED;\n      this.adjustCapacitiesForChunk(chunk, true);\n    }\n    this.addChunkToQueues_(chunk);\n  }\n\n  updateChunkState(chunk: Chunk, newState: ChunkState) {\n    if (newState === chunk.state) {\n      return;\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(`${chunk}: changed state ${ChunkState[chunk.state]} -> ${ChunkState[newState]}`);\n    }\n    this.adjustCapacitiesForChunk(chunk, false);\n    this.removeChunkFromQueues_(chunk);\n    chunk.state = newState;\n    this.adjustCapacitiesForChunk(chunk, true);\n    this.addChunkToQueues_(chunk);\n    this.scheduleUpdate();\n  }\n\n  private processGPUPromotions_() {\n    let queueManager = this;\n    function evictFromGPUMemory(chunk: Chunk) {\n      queueManager.freeChunkGPUMemory(chunk);\n      chunk.source!.chunkManager.queueManager.updateChunkState(chunk, ChunkState.SYSTEM_MEMORY);\n    }\n    let promotionCandidates = this.gpuMemoryPromotionQueue.candidates();\n    let evictionCandidates = this.gpuMemoryEvictionQueue.candidates();\n    let capacity = this.gpuMemoryCapacity;\n    while (true) {\n      let promotionCandidate = promotionCandidates.next().value;\n      if (promotionCandidate === undefined) {\n        break;\n      } else {\n        let priorityTier = promotionCandidate.priorityTier;\n        let priority = promotionCandidate.priority;\n        if (!tryToFreeCapacity(\n                promotionCandidate.gpuMemoryBytes, capacity, priorityTier, priority,\n                evictionCandidates, evictFromGPUMemory)) {\n          break;\n        }\n        this.copyChunkToGPU(promotionCandidate);\n        this.updateChunkState(promotionCandidate, ChunkState.GPU_MEMORY);\n      }\n    }\n  }\n\n  freeChunkGPUMemory(chunk: Chunk) {\n    ++this.gpuMemoryGeneration;\n    this.rpc!.invoke(\n        'Chunk.update',\n        {'id': chunk.key, 'state': ChunkState.SYSTEM_MEMORY, 'source': chunk.source!.rpcId});\n  }\n\n  freeChunkSystemMemory(chunk: Chunk) {\n    if (chunk.state === ChunkState.SYSTEM_MEMORY_WORKER) {\n      chunk.freeSystemMemory();\n    } else {\n      this.rpc!.invoke(\n          'Chunk.update',\n          {'id': chunk.key, 'state': ChunkState.EXPIRED, 'source': chunk.source!.rpcId});\n    }\n  }\n\n  retrieveChunkData(chunk: Chunk) {\n    return this.rpc!.promiseInvoke<TypedArray>(\n        'Chunk.retrieve', {key: chunk.key!, source: chunk.source!.rpcId});\n  }\n\n  copyChunkToGPU(chunk: Chunk) {\n    ++this.gpuMemoryGeneration;\n    let rpc = this.rpc!;\n    if (chunk.state === ChunkState.SYSTEM_MEMORY) {\n      rpc.invoke(\n          'Chunk.update',\n          {'id': chunk.key, 'source': chunk.source!.rpcId, 'state': ChunkState.GPU_MEMORY});\n    } else {\n      let msg: any = {};\n      let transfers: any[] = [];\n      chunk.serialize(msg, transfers);\n      msg['state'] = ChunkState.GPU_MEMORY;\n      rpc.invoke('Chunk.update', msg, transfers);\n    }\n  }\n\n  private processQueuePromotions_() {\n    let queueManager = this;\n    const evict = (chunk: Chunk) => {\n      switch (chunk.state) {\n        case ChunkState.DOWNLOADING:\n          cancelChunkDownload(chunk);\n          break;\n        case ChunkState.GPU_MEMORY:\n          queueManager.freeChunkGPUMemory(chunk);\n        case ChunkState.SYSTEM_MEMORY_WORKER:\n        case ChunkState.SYSTEM_MEMORY:\n          queueManager.freeChunkSystemMemory(chunk);\n          break;\n      }\n      // Note: After calling this, chunk may no longer be valid.\n      this.updateChunkState(chunk, ChunkState.QUEUED);\n    };\n\n    const promotionLambda =\n        (promotionCandidates: Iterator<Chunk>, evictionCandidates: Iterator<Chunk>,\n         capacity: AvailableCapacity) => {\n          let systemMemoryEvictionCandidates = this.systemMemoryEvictionQueue.candidates();\n          let systemMemoryCapacity = this.systemMemoryCapacity;\n          while (true) {\n            let promotionCandidateResult = promotionCandidates.next();\n            if (promotionCandidateResult.done) {\n              return;\n            }\n            let promotionCandidate = promotionCandidateResult.value;\n            const size = 0; /* unknown size, since it hasn't been downloaded yet. */\n            let priorityTier = promotionCandidate.priorityTier;\n            let priority = promotionCandidate.priority;\n            // console.log(\"Download capacity: \" + downloadCapacity);\n            if (!tryToFreeCapacity(\n                    size, capacity, priorityTier, priority, evictionCandidates, evict)) {\n              return;\n            }\n            if (!tryToFreeCapacity(\n                    size, systemMemoryCapacity, priorityTier, priority,\n                    systemMemoryEvictionCandidates, evict)) {\n              return;\n            }\n            this.updateChunkState(promotionCandidate, ChunkState.DOWNLOADING);\n            startChunkDownload(promotionCandidate);\n          }\n        };\n\n    for (let sourceQueueLevel = 0; sourceQueueLevel < numSourceQueueLevels; ++sourceQueueLevel) {\n      promotionLambda(\n          this.queuedDownloadPromotionQueue[sourceQueueLevel].candidates(),\n          this.downloadEvictionQueue[sourceQueueLevel].candidates(),\n          this.downloadCapacity[sourceQueueLevel]);\n    }\n    promotionLambda(\n        this.queuedComputePromotionQueue.candidates(), this.computeEvictionQueue.candidates(),\n        this.computeCapacity);\n  }\n\n  process() {\n    if (!this.updatePending) {\n      return;\n    }\n    this.updatePending = null;\n    const gpuMemoryGeneration = this.gpuMemoryGeneration;\n    this.processGPUPromotions_();\n    this.processQueuePromotions_();\n    this.logStatistics();\n    if (this.gpuMemoryGeneration !== gpuMemoryGeneration) {\n      this.gpuMemoryChanged.dispatch();\n    }\n  }\n\n  logStatistics() {\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(\n          `[Chunk status] QUEUED: ${this.numQueued}, FAILED: ` +\n          `${this.numFailed}, DOWNLOAD: ${this.downloadCapacity}, ` +\n          `MEM: ${this.systemMemoryCapacity}, GPU: ${this.gpuMemoryCapacity}`);\n    }\n  }\n\n  invalidateSourceCache(source: ChunkSource) {\n    for (const chunk of source.chunks.values()) {\n      switch (chunk.state) {\n        case ChunkState.DOWNLOADING:\n          cancelChunkDownload(chunk);\n          break;\n        case ChunkState.SYSTEM_MEMORY_WORKER:\n          chunk.freeSystemMemory();\n          break;\n      }\n      // Note: After calling this, chunk may no longer be valid.\n      this.updateChunkState(chunk, ChunkState.QUEUED);\n    }\n    this.rpc!.invoke('Chunk.update', {'source': source.rpcId});\n    this.scheduleUpdate();\n  }\n}\n\nexport class ChunkRenderLayerBackend extends SharedObjectCounterpart implements LayerChunkProgressInfo {\n  chunkManagerGeneration: number = -1;\n\n  numVisibleChunksNeeded: number = 0;\n  numVisibleChunksAvailable: number = 0;\n  numPrefetchChunksNeeded: number = 0;\n  numPrefetchChunksAvailable: number = 0;\n}\n\nconst LAYER_CHUNK_STATISTICS_INTERVAL = 200;\n\n@registerSharedObject(CHUNK_MANAGER_RPC_ID)\nexport class ChunkManager extends SharedObjectCounterpart {\n  queueManager: ChunkQueueManager;\n\n  /**\n   * Array of chunks within each existing priority tier.\n   */\n  private existingTierChunks: Chunk[][] = [];\n\n  /**\n   * Array of chunks whose new priorities have not yet been reflected in the\n   * queue states.\n   */\n  private newTierChunks: Chunk[] = [];\n\n  // Should be `number|null`, but marked `any` to workaround `@types/node` being pulled in.\n  private updatePending: any = null;\n\n  recomputeChunkPriorities = new NullarySignal();\n\n  /**\n   * Dispatched immediately after recomputeChunkPriorities is dispatched.\n   * This signal should be used for handlers that depend on the result of another handler.\n   */\n  recomputeChunkPrioritiesLate = new NullarySignal();\n\n  memoize = new StringMemoize();\n\n  layers: ChunkRenderLayerBackend[] = [];\n\n  private sendLayerChunkStatistics = this.registerCancellable(throttle(() => {\n    this.rpc!.invoke(CHUNK_LAYER_STATISTICS_RPC_ID, {\n      id: this.rpcId,\n      layers: this.layers.map(layer => ({\n                                id: layer.rpcId,\n                                numVisibleChunksAvailable: layer.numVisibleChunksAvailable,\n                                numVisibleChunksNeeded: layer.numVisibleChunksNeeded,\n                                numPrefetchChunksAvailable: layer.numPrefetchChunksAvailable,\n                                numPrefetchChunksNeeded: layer.numPrefetchChunksNeeded\n                              }))\n    });\n  }, LAYER_CHUNK_STATISTICS_INTERVAL));\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.queueManager = (<ChunkQueueManager>rpc.get(options['chunkQueueManager'])).addRef();\n\n    // Update chunk priorities periodically after GPU memory changes to ensure layer chunk\n    // statistics are updated.\n    this.registerDisposer(this.queueManager.gpuMemoryChanged.add(this.registerCancellable(throttle(\n        () => this.scheduleUpdateChunkPriorities(), LAYER_CHUNK_STATISTICS_INTERVAL,\n        {leading: false, trailing: true}))));\n\n    for (let tier = ChunkPriorityTier.FIRST_TIER; tier <= ChunkPriorityTier.LAST_TIER; ++tier) {\n      if (tier === ChunkPriorityTier.RECENT) {\n        continue;\n      }\n      this.existingTierChunks[tier] = [];\n    }\n  }\n\n  scheduleUpdateChunkPriorities() {\n    if (this.updatePending === null) {\n      this.updatePending = setTimeout(this.recomputeChunkPriorities_.bind(this), 0);\n    }\n  }\n\n  registerLayer(layer: ChunkRenderLayerBackend) {\n    const generation = this.recomputeChunkPriorities.count;\n    if (layer.chunkManagerGeneration !== generation) {\n      layer.chunkManagerGeneration = generation;\n      this.layers.push(layer);\n      layer.numVisibleChunksAvailable = 0;\n      layer.numVisibleChunksNeeded = 0;\n      layer.numPrefetchChunksAvailable = 0;\n      layer.numPrefetchChunksNeeded = 0;\n    }\n  }\n\n  private recomputeChunkPriorities_() {\n    this.updatePending = null;\n    this.layers.length = 0;\n    this.recomputeChunkPriorities.dispatch();\n    this.recomputeChunkPrioritiesLate.dispatch();\n    this.updateQueueState([ChunkPriorityTier.VISIBLE, ChunkPriorityTier.PREFETCH]);\n    this.sendLayerChunkStatistics();\n  }\n\n  /**\n   * @param chunk\n   * @param tier New priority tier.  Must not equal ChunkPriorityTier.RECENT.\n   * @param priority Priority within tier.\n   * @param toFrontend true if the chunk should be moved to the frontend when ready.\n   */\n  requestChunk(chunk: Chunk, tier: ChunkPriorityTier, priority: number, toFrontend = true) {\n    if (!Number.isFinite(priority)) {\n      // Non-finite priority indicates a bug.\n      debugger;\n      return;\n    }\n    if (tier === ChunkPriorityTier.RECENT) {\n      throw new Error('Not going to request a chunk with the RECENT tier');\n    }\n    chunk.newlyRequestedToFrontend = chunk.newlyRequestedToFrontend || toFrontend;\n    if (chunk.newPriorityTier === ChunkPriorityTier.RECENT) {\n      this.newTierChunks.push(chunk);\n    }\n    const newPriorityTier = chunk.newPriorityTier;\n    if (tier < newPriorityTier || (tier === newPriorityTier && priority > chunk.newPriority)) {\n      chunk.newPriorityTier = tier;\n      chunk.newPriority = priority;\n    }\n  }\n\n  /**\n   * Update queue state to reflect updated contents of the specified priority tiers.  Existing\n   * chunks within those tiers not present in this.newTierChunks will be moved to the RECENT tier\n   * (and removed if in the QUEUED state).\n   */\n  updateQueueState(tiers: ChunkPriorityTier[]) {\n    let existingTierChunks = this.existingTierChunks;\n    let queueManager = this.queueManager;\n    for (let tier of tiers) {\n      let chunks = existingTierChunks[tier];\n      if (DEBUG_CHUNK_UPDATES) {\n        console.log(`existingTierChunks[${ChunkPriorityTier[tier]}].length=${chunks.length}`);\n      }\n      for (let chunk of chunks) {\n        if (chunk.newPriorityTier === ChunkPriorityTier.RECENT) {\n          // Downgrade the priority of this chunk.\n          queueManager.performChunkPriorityUpdate(chunk);\n        }\n      }\n      chunks.length = 0;\n    }\n    let newTierChunks = this.newTierChunks;\n    for (let chunk of newTierChunks) {\n      queueManager.performChunkPriorityUpdate(chunk);\n      existingTierChunks[chunk.priorityTier].push(chunk);\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(`updateQueueState: newTierChunks.length = ${newTierChunks.length}`);\n    }\n    newTierChunks.length = 0;\n    this.queueManager.scheduleUpdate();\n  }\n}\n\n\n/**\n * Mixin for adding a `parameters` member to a ChunkSource, and for registering the shared object\n * type based on the `RPC_ID` member of the Parameters class.\n */\nexport function WithParameters<Parameters, TBase extends {new (...args: any[]): SharedObject}>(\n    Base: TBase, parametersConstructor: ChunkSourceParametersConstructor<Parameters>) {\n  @registerSharedObjectOwner(parametersConstructor.RPC_ID)\n  class C extends Base {\n    parameters: Parameters;\n    constructor(...args: any[]) {\n      super(...args);\n      const options = args[1];\n      this.parameters = options['parameters'];\n    }\n  }\n  return C;\n}\n\n/**\n * Interface that represents shared objects that request chunks from a ChunkManager.\n */\nexport interface ChunkRequester extends SharedObject {\n  chunkManager: ChunkManager;\n}\n\n/**\n * Mixin that adds a chunkManager property initialized from the RPC-supplied options.\n *\n * The resultant class implements `ChunkRequester`.\n */\nexport function withChunkManager<T extends {new (...args: any[]): SharedObject}>(Base: T) {\n  return class extends Base implements ChunkRequester {\n    chunkManager: ChunkManager;\n    constructor(...args: any[]) {\n      super(...args);\n      const rpc: RPC = args[0];\n      const options = args[1];\n      // We don't increment the reference count, because our owner owns a reference to the\n      // ChunkManager.\n      this.chunkManager = <ChunkManager>rpc.get(options['chunkManager']);\n    }\n  };\n}\n\nregisterRPC(CHUNK_SOURCE_INVALIDATE_RPC_ID, function(x) {\n  const source = <ChunkSource>this.get(x['id']);\n  source.chunkManager.queueManager.invalidateSourceCache(source);\n});\n\nregisterPromiseRPC(REQUEST_CHUNK_STATISTICS_RPC_ID, function(x: {queue: number}) {\n  const queue = this.get(x.queue) as ChunkQueueManager;\n  const results = new Map<number, Float64Array>();\n  for (const source of queue.sources) {\n    results.set(source.rpcId!, source.statistics);\n  }\n  return Promise.resolve({value: results});\n});\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ChunkState {\n  // Chunk is stored in GPU memory in addition to system memory.\n  GPU_MEMORY = 0,\n  // Chunk is stored only in system memory but not in GPU memory.\n  SYSTEM_MEMORY = 1,\n\n  // Chunk is stored in system memory on worker.\n  SYSTEM_MEMORY_WORKER = 2,\n\n  // Chunk is downloading.\n  DOWNLOADING = 3,\n  // Chunk is not yet downloading.\n  QUEUED = 4,\n\n  // Chunk has just been added.\n  NEW = 5,\n\n  // Download failed.\n  FAILED = 6,\n\n  EXPIRED = 7,\n\n  // If new states are added, keep numChangeStates in sync.\n}\n\nexport const numChunkStates = 8;\n\nexport enum ChunkPriorityTier {\n  FIRST_TIER = 0,\n  FIRST_ORDERED_TIER = 0,\n  VISIBLE = 0,\n  PREFETCH = 1,\n  LAST_ORDERED_TIER = 1,\n  RECENT = 2,\n  LAST_TIER = 2\n}\n\nexport const numChunkPriorityTiers = 3;\n\nexport enum ChunkDownloadStatistics {\n  totalTime = 0,\n  totalChunks = 1,\n}\n\nexport enum ChunkMemoryStatistics {\n  numChunks = 0,\n  systemMemoryBytes = 1,\n  gpuMemoryBytes = 2,\n}\n\nexport const numChunkMemoryStatistics = 3;\n\nexport const numChunkDownloadStatistics = 2;\n\nexport const numChunkStatistics =\n    numChunkStates * numChunkPriorityTiers * numChunkMemoryStatistics + numChunkDownloadStatistics;\n\nexport function getChunkStateStatisticIndex(state: ChunkState, priorityTier: ChunkPriorityTier) {\n  return state * numChunkPriorityTiers + priorityTier;\n}\n\nexport function getChunkDownloadStatisticIndex(statistic: ChunkDownloadStatistics) {\n  return numChunkStates * numChunkPriorityTiers * numChunkMemoryStatistics + statistic;\n}\n\nexport const PREFETCH_PRIORITY_MULTIPLIER = 1e13;\n\nexport const CHUNK_QUEUE_MANAGER_RPC_ID = 'ChunkQueueManager';\nexport const CHUNK_MANAGER_RPC_ID = 'ChunkManager';\nexport const CHUNK_SOURCE_INVALIDATE_RPC_ID = 'ChunkSource.invalidate';\n\nexport const REQUEST_CHUNK_STATISTICS_RPC_ID = 'ChunkQueueManager.requestChunkStatistics';\n\n// Used for sending per-layer visible/prefetch chunk statistics from backend to frontend.\nexport const CHUNK_LAYER_STATISTICS_RPC_ID = 'ChunkManager.chunkLayerStatistics';\n\nexport interface ChunkSourceParametersConstructor<T> {\n  new(): T;\n  RPC_ID: string;\n}\n\nexport class LayerChunkProgressInfo {\n  numVisibleChunksNeeded: number = 0;\n  numVisibleChunksAvailable: number = 0;\n  numPrefetchChunksNeeded: number = 0;\n  numPrefetchChunksAvailable: number = 0;\n}\n", "// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface Node<T> {\n  next0: T|null;\n  prev0: T|null;\n}\n\nexport default class {\n  static insertAfter<T extends Node<T>>(head: T, x: T) {\n    let next = <T>head.next0;\n    x.next0 = next;\n    x.prev0 = head;\n    head.next0 = x;\n    next.prev0 = x;\n  }\n  static insertBefore<T extends Node<T>>(head: T, x: T) {\n    let prev = <T>head.prev0;\n    x.prev0 = prev;\n    x.next0 = head;\n    head.prev0 = x;\n    prev.next0 = x;\n  }\n  static front<T extends Node<T>>(head: T) {\n    let next = head.next0;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static back<T extends Node<T>>(head: T) {\n    let next = head.prev0;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static pop<T extends Node<T>>(x: T) {\n    let next = <T>x.next0;\n    let prev = <T>x.prev0;\n    next.prev0 = prev;\n    prev.next0 = next;\n    x.next0 = null;\n    x.prev0 = null;\n    return x;\n  }\n  static * iterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.next0; x !== head; x = <T>x.next0) {\n      yield x;\n    }\n  }\n  static * reverseIterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.prev0; x !== head; x = <T>x.prev0) {\n      yield x;\n    }\n  }\n  static initializeHead<T extends Node<T>>(head: T) {\n    head.next0 = head.prev0 = head;\n  }\n}\n", "// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface Node<T> {\n  next1: T|null;\n  prev1: T|null;\n}\n\nexport default class {\n  static insertAfter<T extends Node<T>>(head: T, x: T) {\n    let next = <T>head.next1;\n    x.next1 = next;\n    x.prev1 = head;\n    head.next1 = x;\n    next.prev1 = x;\n  }\n  static insertBefore<T extends Node<T>>(head: T, x: T) {\n    let prev = <T>head.prev1;\n    x.prev1 = prev;\n    x.next1 = head;\n    head.prev1 = x;\n    prev.next1 = x;\n  }\n  static front<T extends Node<T>>(head: T) {\n    let next = head.next1;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static back<T extends Node<T>>(head: T) {\n    let next = head.prev1;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static pop<T extends Node<T>>(x: T) {\n    let next = <T>x.next1;\n    let prev = <T>x.prev1;\n    next.prev1 = prev;\n    prev.next1 = next;\n    x.next1 = null;\n    x.prev1 = null;\n    return x;\n  }\n  static * iterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.next1; x !== head; x = <T>x.next1) {\n      yield x;\n    }\n  }\n  static * reverseIterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.prev1; x !== head; x = <T>x.prev1) {\n      yield x;\n    }\n  }\n  static initializeHead<T extends Node<T>>(head: T) {\n    head.next1 = head.prev1 = head;\n  }\n}\n", "/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {quat} a     Origin unit quaternion \r\n * @param  {quat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n * \r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface WritableArrayLike<T> {\n  length: number;\n  [n: number]: T;\n}\n\n/**\n * Partitions array[start:end] such that all elements for which predicate\n * returns true are before the elements for which predicate returns false.\n *\n * predicate will be called exactly once for each element in array[start:end],\n * in order.\n *\n * @returns {number} The index of the first element for which predicate returns\n * false, or end if there is no such element.\n */\nexport function partitionArray<T>(\n    array: T[], start: number, end: number, predicate: (x: T) => boolean): number {\n  while (start < end) {\n    let x = array[start];\n    if (predicate(x)) {\n      ++start;\n      continue;\n    }\n    --end;\n    array[start] = array[end];\n    array[end] = x;\n  }\n  return end;\n}\n\nexport function filterArrayInplace<T>(\n    array: T[], predicate: (x: T, index: number, array: T[]) => boolean) {\n  let length = array.length;\n  let outIndex = 0;\n  for (let i = 0; i < length; ++i) {\n    if (predicate(array[i], i, array)) {\n      array[outIndex] = array[i];\n      ++outIndex;\n    }\n  }\n  array.length = outIndex;\n}\n\nexport type TypedArrayConstructor = typeof Int8Array|typeof Uint8Array|typeof Int16Array|\n    typeof Uint16Array|typeof Int32Array|typeof Uint32Array|typeof Float32Array|typeof Float64Array;\n\nexport type TypedArray =\n    Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array;\n\n/**\n * Returns an array of size newSize that starts with the contents of array.\n * Either returns array if it has the correct size, or a new array with zero\n * padding at the end.\n */\nexport function maybePadArray<T extends TypedArray>(array: T, newSize: number): T {\n  if (array.length === newSize) {\n    return array;\n  }\n  let newArray = new (<any>array.constructor)(newSize);\n  newArray.set(array);\n  return newArray;\n}\n\nexport function getFortranOrderStrides(size: ArrayLike<number>, baseStride = 1) {\n  let length = size.length;\n  let strides = new Array<number>(length);\n  let stride = strides[0] = baseStride;\n  for (let i = 1; i < length; ++i) {\n    stride *= size[i - 1];\n    strides[i] = stride;\n  }\n  return strides;\n}\n\n/**\n * Converts an array of shape [majorSize, minorSize] to\n * [minorSize, majorSize].\n */\nexport function transposeArray2d<T extends TypedArray>(\n    array: T, majorSize: number, minorSize: number): T {\n  let transpose = new (<any>array.constructor)(array.length);\n  for (let i = 0; i < majorSize * minorSize; i += minorSize) {\n    for (let j = 0; j < minorSize; j++) {\n      let index: number = i / minorSize;\n      transpose[j * majorSize + index] = array[i + j];\n    }\n  }\n  return transpose;\n}\n\nexport function tile2dArray<T extends TypedArray>(\n    array: T, majorDimension: number, minorTiles: number, majorTiles: number) {\n  const minorDimension = array.length / majorDimension;\n  const length = array.length * minorTiles * majorTiles;\n  const result: T = new (<any>array.constructor)(length);\n  const minorTileStride = array.length * majorTiles;\n  const majorTileStride = majorDimension;\n  const minorStride = majorDimension * majorTiles;\n  for (let minor = 0; minor < minorDimension; ++minor) {\n    for (let major = 0; major < majorDimension; ++major) {\n      const inputValue = array[minor * majorDimension + major];\n      const baseOffset = minor * minorStride + major;\n      for (let minorTile = 0; minorTile < minorTiles; ++minorTile) {\n        for (let majorTile = 0; majorTile < majorTiles; ++majorTile) {\n          result[minorTile * minorTileStride + majorTile * majorTileStride + baseOffset] =\n              inputValue;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nexport function binarySearch<T>(\n    haystack: ArrayLike<T>, needle: T, compare: (a: T, b: T) => number, low = 0,\n    high = haystack.length) {\n  while (low < high) {\n    const mid = (low + high - 1) >> 1;\n    const compareResult = compare(needle, haystack[mid]);\n    if (compareResult > 0) {\n      low = mid + 1;\n    } else if (compareResult < 0) {\n      high = mid;\n    } else {\n      return mid;\n    }\n  }\n  return ~low;\n}\n\n\n/**\n * Returns the first index in `[begin, end)` for which `predicate` is `true`, or returns `end` if no\n * such index exists.\n *\n * For any index `i` in `(begin, end)`, it must be the case that `predicate(i) >= predicate(i - 1)`.\n */\nexport function binarySearchLowerBound(\n    begin: number, end: number, predicate: (index: number) => boolean): number {\n  let count = end - begin;\n  while (count > 0) {\n    let step = Math.floor(count / 2);\n    let i = begin + step;\n    if (predicate(i)) {\n      count = step;\n    } else {\n      begin = i + 1;\n      count -= step + 1;\n    }\n  }\n  return begin;\n}\n\n/**\n * Returns an array of indices into `input` that equal (under `===`) `value`.\n */\nexport function findMatchingIndices<T>(input: T[], value: T) {\n  const out: number[] = [];\n  for (let i = 0, length = input.length; i < length; ++i) {\n    if (input[i] === value) {\n      out.push(i);\n    }\n  }\n  return out;\n}\n\n/**\n * Returns an array of the indices in `[0, ..., max)` not in `indices`.\n */\nexport function getIndicesComplement(indices: number[], max: number) {\n  const mask: boolean[] = [];\n  mask.length = max;\n  for (const i of indices) {\n    mask[i] = true;\n  }\n  return findMatchingIndices(mask, undefined);\n}\n\nexport function arraysEqual<T>(a: ArrayLike<T>, b: ArrayLike<T>) {\n  const length = a.length;\n  if (b.length !== length) return false;\n  for (let i = 0; i < length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nexport function arraysEqualWithPredicate<T>(\n    a: ArrayLike<T>, b: ArrayLike<T>, elementsEqual: (a: T, b: T) => boolean = (a, b) => a === b) {\n  const length = a.length;\n  if (b.length !== length) return false;\n  for (let i = 0; i < length; ++i) {\n    if (!elementsEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n\nexport function getInsertPermutation(n: number, sourceIndex: number, targetIndex: number) {\n  const newToOld: number[] = [];\n  if (targetIndex === sourceIndex) {\n    for (let i = 0; i < n; ++i) {\n      newToOld[i] = i;\n    }\n    return newToOld;\n  }\n  newToOld[targetIndex] = sourceIndex;\n  for (let oldDim = 0, newDim = 0; oldDim < n;) {\n    if (oldDim === sourceIndex) {\n      ++oldDim;\n      continue;\n    }\n    if (newDim === targetIndex) {\n      ++newDim;\n    }\n    newToOld[newDim++] = oldDim++;\n  }\n  return newToOld;\n}\n\nexport function\nscatterUpdate<T, Dest extends {[index: number]: T}, Source extends {readonly [index: number]: T}>(\n    dest: Dest, source: Source, indices: ArrayLike<number>): Dest {\n  for (let sourceIndex = 0, length = indices.length; sourceIndex < length; ++sourceIndex) {\n    const destIndex = indices[sourceIndex];\n    if (destIndex === -1) continue;\n    dest[destIndex] = source[sourceIndex];\n  }\n  return dest;\n}\n\nexport function\ngatherUpdate<T, Dest extends {[index: number]: T}, Source extends {readonly [index: number]: T}>(\n    dest: Dest, source: Source, indices: ArrayLike<number>): Dest {\n  for (let destIndex = 0, length = indices.length; destIndex < length; ++destIndex) {\n    const sourceIndex = indices[destIndex];\n    if (sourceIndex === -1) continue;\n    dest[destIndex] = source[sourceIndex];\n  }\n  return dest;\n}\n\nexport function transposeNestedArrays<T>(x: T[][]) {\n  const result: T[][] = [];\n  for (let outerIndex = 0, outerLength = x.length; outerIndex < outerLength; ++outerIndex) {\n    const inner = x[outerIndex];\n    for (let innerIndex = 0, innerLength = inner.length; innerIndex < innerLength; ++innerIndex) {\n      let resultInner = result[innerIndex];\n      if (resultInner === undefined) {\n        resultInner = result[innerIndex] = [];\n      }\n      resultInner.push(inner[innerIndex]);\n    }\n  }\n  return result;\n}\n\nexport interface ArraySpliceOp {\n  retainCount: number;\n  deleteCount: number;\n  insertCount: number;\n}\n\nexport function spliceArray<T>(array: T[], splices: readonly Readonly<ArraySpliceOp>[]) {\n  const parts: T[][] = [];\n  let origOffset = 0;\n  for (let i = 0, numSplices = splices.length; i < numSplices; ++i) {\n    const {retainCount, deleteCount, insertCount} = splices[i];\n    if (retainCount !== 0) {\n      parts.push(array.slice(origOffset, origOffset + retainCount));\n      origOffset += retainCount;\n    }\n    origOffset += deleteCount;\n    if (insertCount !== 0) {\n      parts.push(new Array<T>(insertCount));\n    }\n  }\n  const origLength = array.length;\n  if (origOffset !== origLength) {\n    parts.push(array.slice(origOffset));\n  }\n  return new Array(0).concat(...parts);\n}\n\nexport function getMergeSplices<T>(\n    oldArray: readonly T[], newArray: readonly T[],\n    compare: (a: T, b: T) => number): ArraySpliceOp[] {\n  const splices: ArraySpliceOp[] = [];\n  let oldIndex = 0, newIndex = 0, oldCount = oldArray.length, newCount = newArray.length;\n  while (oldIndex < oldCount && newIndex < newCount) {\n    let c: number;\n    let oldValue = oldArray[oldIndex];\n    let newValue = newArray[newIndex];\n    c = compare(oldValue, newValue);\n    if (c === 0) {\n      let retainCount = 1;\n      ++oldIndex;\n      ++newIndex;\n      while (oldIndex < oldCount && newIndex < newCount &&\n             (c = compare(oldArray[oldIndex], newArray[newIndex])) === 0) {\n        ++retainCount;\n        ++oldIndex;\n        ++newIndex;\n      }\n      splices.push({retainCount, deleteCount: 0, insertCount: 0});\n      continue;\n    }\n    if (c < 0) {\n      let deleteCount = 1;\n      while (++oldIndex < oldCount && (c = compare(oldArray[oldIndex], newValue)) < 0) {\n        ++deleteCount\n      }\n      splices.push({retainCount: 0, deleteCount, insertCount: 0});\n      continue;\n    }\n    if (c > 0) {\n      let insertCount = 1;\n      while (++newIndex < newCount && (c = compare(oldValue, newArray[newIndex])) > 0) {\n        ++insertCount\n      }\n      splices.push({retainCount: 0, deleteCount: 0, insertCount});\n      continue;\n    }\n  }\n  if (oldIndex < oldCount || newIndex < newCount) {\n    splices.push(\n        {retainCount: 0, deleteCount: oldCount - oldIndex, insertCount: newCount - newIndex});\n  }\n  return splices;\n}\n\nexport function mergeSequences(\n    aCount: number, bCount: number, compare: (a: number, b: number) => number,\n    aCallback: (a: number) => void, bCallback: (b: number) => void,\n    abCallback: (a: number, b: number) => void) {\n  let a = 0;\n  let b = 0;\n  if (aCount !== 0 && bCount !== 0) {\n    while (true) {\n      const x = compare(a, b);\n      if (x < 0) {\n        aCallback(a);\n        if (++a === aCount) break;\n      } else if (x > 0) {\n        bCallback(b);\n        if (++b === bCount) break;\n      } else {\n        abCallback(a, b);\n        ++a;\n        ++b;\n        if (a === aCount || b === bCount) break;\n      }\n    }\n  }\n  while (a < aCount) {\n    aCallback(a);\n    ++a;\n  }\n  while (b < bCount) {\n    bCallback(b);\n    ++b;\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {mat3, mat4, quat, vec3, vec4} from 'gl-matrix';\nimport {findMatchingIndices, TypedArray} from 'neuroglancer/util/array';\n\nexport {mat2, mat3, mat4, quat, vec2, vec3, vec4} from 'gl-matrix';\n\nexport const identityMat4 = mat4.create();\n\nexport const AXES_NAMES = ['x', 'y', 'z'];\n\nexport const kAxes = [\n  vec3.fromValues(1, 0, 0),\n  vec3.fromValues(0, 1, 0),\n  vec3.fromValues(0, 0, 1),\n];\nexport const kZeroVec = vec3.fromValues(0, 0, 0);\nexport const kZeroVec4 = vec4.fromValues(0, 0, 0, 0);\nexport const kOneVec = vec3.fromValues(1, 1, 1);\nexport const kInfinityVec = vec3.fromValues(Infinity, Infinity, Infinity);\nexport const kIdentityQuat = quat.create();\n\nexport function prod3(x: ArrayLike<number>) {\n  return x[0] * x[1] * x[2];\n}\n\nexport function prod4(x: ArrayLike<number>) {\n  return x[0] * x[1] * x[2] * x[3];\n}\n\n/**\n * Implements a one-to-one conversion from Vec3 to string, suitable for use a Map key.\n *\n * Specifically, returns the string representation of the 3 values separated by commas.\n */\nexport function vec3Key(x: ArrayLike<number>) {\n  return `${x[0]},${x[1]},${x[2]}`;\n}\n\n/**\n * Transforms `a` by a 180-degree rotation about X, stores result in `out`.\n */\nexport function quatRotateX180(out: quat, a: quat) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = w;\n  out[1] = z;\n  out[2] = -y;\n  out[3] = -x;\n}\n\n/**\n * Transforms `a` by a 180-degree rotation about Y, stores result in `out`.\n */\nexport function quatRotateY180(out: quat, a: quat) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = -z;\n  out[1] = w;\n  out[2] = x;\n  out[3] = -y;\n}\n\n/**\n * Transforms `a` by a 180-degree rotation about Z, stores result in `out`.\n */\nexport function quatRotateZ180(out: quat, a: quat) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = y;\n  out[1] = -x;\n  out[2] = w;\n  out[3] = -z;\n}\n\n\n/**\n * Transforms a vector `a` by a homogenous transformation matrix `m`.  The translation component of\n * `m` is ignored.\n */\nexport function transformVectorByMat4(out: vec3, a: vec3, m: mat4) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = m[0] * x + m[4] * y + m[8] * z;\n  out[1] = m[1] * x + m[5] * y + m[9] * z;\n  out[2] = m[2] * x + m[6] * y + m[10] * z;\n  return out;\n}\n\n/**\n * Transforms a vector `a` by the transpose of a homogenous transformation matrix `m`.  The\n * translation component of `m` is ignored.\n */\nexport function transformVectorByMat4Transpose(out: vec3, a: vec3, m: mat4) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = m[0] * x + m[1] * y + m[2] * z;\n  out[1] = m[4] * x + m[5] * y + m[6] * z;\n  out[2] = m[8] * x + m[9] * y + m[10] * z;\n  return out;\n}\n\nexport function translationRotationScaleZReflectionToMat4(\n    out: mat4, translation: vec3, rotation: quat, scale: vec3, zReflection: number) {\n  const temp: Float32Array = out;\n  out[0] = scale[0];\n  out[1] = scale[1];\n  out[2] = scale[2] * zReflection;\n  return mat4.fromRotationTranslationScale(out, rotation, translation, <vec3>temp);\n}\n\n/**\n * Returns the value of `t` that minimizes `(p - (a + t * (b - a)))`.\n */\nexport function findClosestParameterizedLinePosition(\n    a: Float32Array, b: Float32Array, p: Float32Array) {\n  // http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html\n  // Compute t: -dot(a-p, b-a) / |b - a|^2\n  const rank = p.length;\n  let denominator = 0;\n  for (let i = 0; i < rank; ++i) {\n    denominator += (a[i] - b[i]) ** 2;\n  }\n  let numerator = 0;\n  for (let i = 0; i < rank; ++i) {\n    const aValue = a[i];\n    numerator -= (aValue - p[i]) * (b[i] - aValue);\n  }\n  return numerator / Math.max(denominator, 1e-6);\n}\n\n/**\n * Sets `out` to the position on the line segment `[a, b]` closest to `p`.\n */\nexport function projectPointToLineSegment(\n    out: Float32Array, a: Float32Array, b: Float32Array, p: Float32Array) {\n  const rank = out.length;\n  let t = findClosestParameterizedLinePosition(a, b, p);\n  t = Math.max(0.0, Math.min(1.0, t));\n  for (let i = 0; i < rank; ++i) {\n    const aValue = a[i];\n    out[i] = aValue + t * (b[i] - aValue);\n  }\n  return out;\n}\n\nexport function mat3FromMat4(out: mat3, m: mat4) {\n  const m00 = m[0], m01 = m[1], m02 = m[2], m10 = m[4], m11 = m[5], m12 = m[6], m20 = m[8],\n        m21 = m[9], m22 = m[10];\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Extracts the left, right, bottom, top, near, far clipping planes from `projectionMat`.\n * @param out Row-major array of shape `(6, 4)` specifying for each of the left, right, bottom, top,\n *     near, far clipping planes the `a`, `b`, `c`, `d` coefficients such that\n *     `0 < a * x + b * y + c * z + d` if the point `x, y, z` is inside the half-space of the\n * clipping plane.\n * @param m Projection matrix\n */\nexport function getFrustrumPlanes(out: Float32Array, m: mat4): Float32Array {\n  // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf\n  const m00 = m[0], m10 = m[1], m20 = m[2], m30 = m[3], m01 = m[4], m11 = m[5], m21 = m[6],\n        m31 = m[7], m02 = m[8], m12 = m[9], m22 = m[10], m32 = m[11], m03 = m[12], m13 = m[13],\n        m23 = m[14], m33 = m[15];\n\n  out[0] = m30 + m00;  // left: a\n  out[1] = m31 + m01;  // left: b\n  out[2] = m32 + m02;  // left: c\n  out[3] = m33 + m03;  // left: d\n\n  out[4] = m30 - m00;  // right: a\n  out[5] = m31 - m01;  // right: b\n  out[6] = m32 - m02;  // right: c\n  out[7] = m33 - m03;  // right: d\n\n  out[8] = m30 + m10;   // bottom: a\n  out[9] = m31 + m11;   // bottom: b\n  out[10] = m32 + m12;  // bottom: c\n  out[11] = m33 + m13;  // bottom: d\n\n  out[12] = m30 - m10;  // top: a\n  out[13] = m31 - m11;  // top: b\n  out[14] = m32 - m12;  // top: c\n  out[15] = m33 - m13;  // top: d\n\n  const nearA = m30 + m20;  // near: a\n  const nearB = m31 + m21;  // near: b\n  const nearC = m32 + m22;  // near: c\n  const nearD = m33 + m23;  // near: d\n\n  const farA = m30 - m20;  // far: a\n  const farB = m31 - m21;  // far: b\n  const farC = m32 - m22;  // far: c\n  const farD = m33 - m23;  // far: d\n\n  // Normalize near plane\n  const nearNorm = Math.sqrt(nearA ** 2 + nearB ** 2 + nearC ** 2);\n  out[16] = nearA / nearNorm;\n  out[17] = nearB / nearNorm;\n  out[18] = nearC / nearNorm;\n  out[19] = nearD / nearNorm;\n\n  // Also normalize far plane\n  const farNorm = Math.sqrt(farA ** 2 + farB ** 2 + farC ** 2);\n  out[20] = farA / farNorm;\n  out[21] = farB / farNorm;\n  out[22] = farC / farNorm;\n  out[23] = farD / farNorm;\n\n  return out;\n}\n\n/**\n * Checks whether the specified axis-aligned bounding box (AABB) intersects the view frustrum.\n *\n * @param clippingPlanes Array of length 24 specifying the clipping planes of the view frustrum, as\n *     computed by `getFrustrumPlanes`\n */\nexport function isAABBVisible(\n    xLower: number, yLower: number, zLower: number, xUpper: number, yUpper: number, zUpper: number,\n    clippingPlanes: Float32Array) {\n  for (let i = 0; i < 6; ++i) {\n    const a = clippingPlanes[i * 4], b = clippingPlanes[i * 4 + 1], c = clippingPlanes[i * 4 + 2],\n          d = clippingPlanes[i * 4 + 3];\n    const sum = Math.max(a * xLower, a * xUpper) + Math.max(b * yLower, b * yUpper) +\n        Math.max(c * zLower, c * zUpper) + d;\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isAABBIntersectingPlane(\n    xLower: number, yLower: number, zLower: number, xUpper: number, yUpper: number, zUpper: number,\n    clippingPlanes: Float32Array) {\n  for (let i = 0; i < 4; ++i) {\n    const a = clippingPlanes[i * 4], b = clippingPlanes[i * 4 + 1], c = clippingPlanes[i * 4 + 2],\n          d = clippingPlanes[i * 4 + 3];\n    const sum = Math.max(a * xLower, a * xUpper) + Math.max(b * yLower, b * yUpper) +\n        Math.max(c * zLower, c * zUpper) + d;\n    if (sum < 0) {\n      return false;\n    }\n  }\n  {\n    const i = 5;\n    const a = clippingPlanes[i * 4], b = clippingPlanes[i * 4 + 1], c = clippingPlanes[i * 4 + 2],\n          d = clippingPlanes[i * 4 + 3];\n    const maxSum = Math.max(a * xLower, a * xUpper) + Math.max(b * yLower, b * yUpper) +\n        Math.max(c * zLower, c * zUpper);\n    const minSum = Math.min(a * xLower, a * xUpper) + Math.min(b * yLower, b * yUpper) +\n        Math.min(c * zLower, c * zUpper);\n    const epsilon = Math.abs(d) * 1e-6;\n    if (minSum > -d + epsilon || maxSum < -d - epsilon) return false;\n  }\n  return true;\n}\n\n\n/**\n * Returns the list (in sorted order) of input dimensions that depend on any of the specified output\n * dimensions.\n */\nexport function getDependentTransformInputDimensions(\n    transform: Float32Array|Float64Array, rank: number, outputDimensions: readonly number[],\n    transpose: boolean = false): number[] {\n  const numOutputDimensions = outputDimensions.length;\n  const isDependentInputDimension: boolean[] = [];\n  const inputStride = transpose ? 1 : rank + 1;\n  const outputStride = transpose ? rank + 1 : 1;\n  for (let i = 0; i < numOutputDimensions; ++i) {\n    const outputDim = outputDimensions[i];\n    for (let inputDim = 0; inputDim < rank; ++inputDim) {\n      if (transform[inputDim * inputStride + outputDim * outputStride] !== 0) {\n        isDependentInputDimension[inputDim] = true;\n      }\n    }\n  }\n  return findMatchingIndices(isDependentInputDimension, true);\n}\n\nexport function scaleMat3Input(out: mat3, input: mat3, scales: TypedArray) {\n  for (let j = 0; j < 3; ++j) {\n    const s = scales[j];\n    for (let i = 0; i < 3; ++i) {\n      out[i + j * 3] = s * input[i + j * 3];\n    }\n  }\n  return out;\n}\n\nexport function scaleMat3Output(out: mat3, input: mat3, scales: TypedArray) {\n  for (let i = 0; i < 3; ++i) {\n    const s = scales[i];\n    for (let j = 0; j < 3; ++j) {\n      out[i + j * 3] = s * input[i + j * 3];\n    }\n  }\n  return out;\n}\n\nexport function getViewFrustrumVolume(projectionMat: mat4) {\n  if (projectionMat[15] === 1) {\n    // orthographic projection\n    const depth = 2 / Math.abs(projectionMat[10]);\n    const width = 2 / Math.abs(projectionMat[0]);\n    const height = 2 / Math.abs(projectionMat[5]);\n    return width * height * depth;\n  }\n  // perspective projection\n  // a = (far + near) / (near - far);\n  // b = 2 * far * near / (near - far);\n  const a = projectionMat[10];\n  const b = projectionMat[14];\n  const near = 2 * b / (2 * a - 2);\n  const far = ((a - 1) * near) / (a + 1);\n\n  const baseArea = 4 / (projectionMat[0] * projectionMat[5]);\n  return baseArea / 3 * (Math.abs(far) ** 3 - Math.abs(near) ** 3);\n}\n\nexport function getViewFrustrumDepthRange(projectionMat: mat4) {\n  if (projectionMat[15] === 1) {\n    // orthographic projection\n    const depth = 2 / Math.abs(projectionMat[10]);\n    return depth;\n  }\n  // perspective projection\n  // a = (far + near) / (near - far);\n  // b = 2 * far * near / (near - far);\n  const a = projectionMat[10];\n  const b = projectionMat[14];\n  const near = 2 * b / (2 * a - 2);\n  const far = ((a - 1) * near) / (a + 1);\n  const depth = Math.abs(far - near);\n  return depth;\n}\n\n// Ensures the z output is 0.  Useful for disabling depth clipping.\nexport function disableZProjection(mat: mat4) {\n  mat[2] = 0;\n  mat[6] = 0;\n  mat[10] = 0;\n  mat[14] = 0;\n  return mat;\n}\n\nconst tempVec3 = vec3.create();\n\n// Determines the bounding box in world coordinates of the view frustrum for a given view-projection\n// matrix.\n//\n// https://gamedev.stackexchange.com/questions/29999/how-do-i-create-a-bounding-frustum-from-a-view-projection-matrix\nexport function getViewFrustrumWorldBounds(\n  invViewProjectionMat: mat4, bounds: Float32Array) {\n  bounds[0] = bounds[1] = bounds[2] = Number.POSITIVE_INFINITY;\n  bounds[3] = bounds[4] = bounds[5] = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < 8; ++i) {\n    tempVec3[0] = 2 * (i & 1) - 1;\n    tempVec3[1] = 2 * ((i >>> 1) & 1) - 1;\n    tempVec3[2] = 2 * ((i >>> 2) & 1) - 1;\n    vec3.transformMat4(tempVec3, tempVec3, invViewProjectionMat);\n    for (let j = 0; j < 3; ++j) {\n      const x = tempVec3[j];\n      bounds[j] = Math.min(bounds[j], x);\n      bounds[j + 3] = Math.max(bounds[j + 3], x);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WritableArrayLike} from 'neuroglancer/util/array';\nimport {vec3} from 'neuroglancer/util/geom';\n\nexport function verifyFloat(obj: any): number {\n  let t = typeof obj;\n  if (t === 'number' || t === 'string') {\n    let x = parseFloat('' + obj);\n    if (!Number.isNaN(x)) {\n      return x;\n    }\n  }\n  throw new Error(`Expected floating-point number, but received: ${JSON.stringify(obj)}.`);\n}\n\nexport function verifyFiniteFloat(obj: any): number {\n  let x = verifyFloat(obj);\n  if (Number.isFinite(x)) {\n    return x;\n  }\n  throw new Error(`Expected finite floating-point number, but received: ${x}.`);\n}\n\nexport function verifyFiniteNonNegativeFloat(obj: any): number {\n  let x = verifyFloat(obj);\n  if (Number.isFinite(x) && x >= 0) {\n    return x;\n  }\n  throw new Error(`Expected finite non-negative floating-point number, but received: ${x}.`);\n}\n\nexport function verifyFinitePositiveFloat(obj: any): number {\n  let x = verifyFiniteFloat(obj);\n  if (x > 0) {\n    return x;\n  }\n  throw new Error(`Expected positive finite floating-point number, but received: ${x}.`);\n}\n\nexport function parseXYZ<A extends WritableArrayLike<number>>(\n    out: A, obj: any, validator: (x: any) => number = verifyFloat): A {\n  verifyObject(obj);\n  out[0] = out[1] = out[2] = 0;\n  for (const key of Object.keys(obj)) {\n    switch (key) {\n    case 'x':\n      out[0] = validator(obj[key]);\n      break;\n    case 'y':\n      out[1] = validator(obj[key]);\n      break;\n    case 'z':\n      out[2] = validator(obj[key]);\n      break;\n    default:\n      throw new Error(\n          `Expected object to have keys ['x', 'y', 'z'], but received: ${JSON.stringify(obj)}.`);\n    }\n  }\n  return out;\n}\n\nexport function parseFiniteVec<U extends WritableArrayLike<number>>(out: U, obj: any[]) {\n  let length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error('Incompatible sizes');\n  }\n\n  for (let i = 0; i < length; ++i) {\n    if (!Number.isFinite(parseFloat(obj[i]))) {\n      throw new Error('Non-finite value.');\n    }\n  }\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseFloat(obj[i]);\n  }\n  return out;\n}\n\nexport function parseIntVec<U extends WritableArrayLike<number>>(out: U, obj: any) {\n  let length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error('Incompatible sizes.');\n  }\n\n  for (let i = 0; i < length; ++i) {\n    let val = parseInt(obj[i], undefined);\n    if (!Number.isInteger(val)) {\n      throw new Error('Non-integer value.');\n    }\n  }\n\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseInt(obj[i], undefined);\n  }\n  return out;\n}\n\n/**\n * Returns a JSON representation of x, with object keys sorted to ensure a\n * consistent result.\n */\nexport function stableStringify(x: any) {\n  if (typeof x === 'object') {\n    if (x === null) {\n      return 'null';\n    }\n    if (Array.isArray(x)) {\n      let s = '[';\n      let size = x.length;\n      let i = 0;\n      if (i < size) {\n        s += stableStringify(x[i]);\n        while (++i < size) {\n          s += ',';\n          s += stableStringify(x[i]);\n        }\n      }\n      s += ']';\n      return s;\n    }\n    let s = '{';\n    let keys = Object.keys(x).sort();\n    let i = 0;\n    let size = keys.length;\n    if (i < size) {\n      let key = keys[i];\n      s += JSON.stringify(key);\n      s += ':';\n      s += stableStringify(x[key]);\n      while (++i < size) {\n        s += ',';\n        key = keys[i];\n        s += JSON.stringify(key);\n        s += ':';\n        s += stableStringify(x[key]);\n      }\n    }\n    s += '}';\n    return s;\n  }\n  return JSON.stringify(x);\n}\n\nfunction swapQuotes(x: string) {\n  return x.replace(/['\"]/g, s => {\n    return (s === '\"' ? '\\'' : '\"');\n  });\n}\n\nexport function urlSafeStringifyString(x: string) {\n  return swapQuotes(JSON.stringify(swapQuotes(x)));\n}\n\nconst URL_SAFE_COMMA = '_';\n\nexport function urlSafeStringify(x: any): string {\n  if (typeof x === 'object') {\n    if (x === null) {\n      return 'null';\n    }\n    let toJSON = x['toJSON'];\n    if (typeof toJSON === 'function') {\n      return urlSafeStringify(toJSON.call(x));\n    }\n    if (Array.isArray(x)) {\n      let s = '[';\n      let size = x.length;\n      let i = 0;\n      if (i < size) {\n        s += urlSafeStringify(x[i]);\n        while (++i < size) {\n          s += URL_SAFE_COMMA;\n          s += urlSafeStringify(x[i]);\n        }\n      }\n      s += ']';\n      return s;\n    }\n    let s = '{';\n    let keys = Object.keys(x);\n    let first = true;\n    for (let key of keys) {\n      let value = x[key];\n      if (value === undefined) {\n        continue;\n      }\n      let valueString = urlSafeStringify(value);\n      if (!valueString) {\n        continue;\n      }\n      if (!first) {\n        s += URL_SAFE_COMMA;\n      } else {\n        first = false;\n      }\n      s += urlSafeStringifyString(key);\n      s += ':';\n      s += valueString;\n    }\n    s += '}';\n    return s;\n  }\n  if (typeof x === 'string') {\n    return urlSafeStringifyString(x);\n  }\n  return JSON.stringify(x);\n}\n\nconst SINGLE_QUOTE_STRING_PATTERN = /('(?:[^'\\\\]|(?:\\\\.))*')/;\nconst DOUBLE_QUOTE_STRING_PATTERN = /(\"(?:[^\"\\\\]|(?:\\\\.))*\")/;\nconst SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN =\n    new RegExp(`${SINGLE_QUOTE_STRING_PATTERN.source}|${DOUBLE_QUOTE_STRING_PATTERN.source}`);\nconst DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN =\n    new RegExp(`${DOUBLE_QUOTE_STRING_PATTERN.source}|${SINGLE_QUOTE_STRING_PATTERN.source}`);\n\nconst DOUBLE_QUOTE_PATTERN = /^((?:[^\"'\\\\]|(?:\\\\[^']))*)(\"|\\\\')/;\nconst SINGLE_QUOTE_PATTERN = /^((?:[^\"'\\\\]|(?:\\\\.))*)'/;\n\nfunction convertStringLiteral(\n  x: string, quoteInitial: string, quoteReplace: string, quoteSearch: RegExp) {\n  if (x.length >= 2 && x.charAt(0) === quoteInitial && x.charAt(x.length - 1) === quoteInitial) {\n    let inner = x.substr(1, x.length - 2);\n    let s = quoteReplace;\n    while (inner.length > 0) {\n      let m = inner.match(quoteSearch);\n      if (m === null) {\n        s += inner;\n        break;\n      }\n      s += m[1];\n      if (m[2] === quoteReplace) {\n        // We received a single unescaped quoteReplace character.\n        s += '\\\\';\n        s += quoteReplace;\n      } else {\n        // We received \"\\\\\" + quoteInitial.  We need to remove the escaping.\n        s += quoteInitial;\n      }\n      inner = inner.substr(m.index! + m[0].length);\n    }\n    s += quoteReplace;\n    return s;\n  }\n  return x;\n}\n\n/**\n * Converts a string literal delimited by either single or double quotes into a string literal\n * delimited by double quotes.\n */\nexport function normalizeStringLiteral(x: string) {\n  return convertStringLiteral(x, '\\'', '\"', DOUBLE_QUOTE_PATTERN);\n}\n\n\n\n// quoteChar: des\nfunction convertJsonHelper(x: string, desiredCommaChar: string, desiredQuoteChar: string) {\n  const commaSearch = /[&_,]/g;\n  let quoteInitial: string;\n  let quoteSearch: RegExp;\n  let stringLiteralPattern: RegExp;\n  if (desiredQuoteChar === '\"') {\n    quoteInitial = '\\'';\n    quoteSearch = DOUBLE_QUOTE_PATTERN;\n    stringLiteralPattern = SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN;\n  } else {\n    quoteInitial = '\"';\n    quoteSearch = SINGLE_QUOTE_PATTERN;\n    stringLiteralPattern = DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN;\n  }\n  let s = '';\n  while (x.length > 0) {\n    let m = x.match(stringLiteralPattern);\n    let before: string;\n    let replacement: string;\n    if (m === null) {\n      before = x;\n      x = '';\n      replacement = '';\n    } else {\n      before = x.substr(0, m.index);\n      x = x.substr(m.index! + m[0].length);\n      let originalString = m[1];\n      if (originalString !== undefined) {\n        replacement =\n            convertStringLiteral(originalString, quoteInitial, desiredQuoteChar, quoteSearch);\n      } else {\n        replacement = m[2];\n      }\n    }\n    s += before.replace(commaSearch, desiredCommaChar);\n    s += replacement;\n  }\n  return s;\n}\n\nexport function urlSafeToJSON(x: string) {\n  return convertJsonHelper(x, ',', '\"');\n}\n\nexport function jsonToUrlSafe(x: string) {\n  return convertJsonHelper(x, '_', '\\'');\n}\n\nexport function urlSafeParse(x: string) {\n  return JSON.parse(urlSafeToJSON(x));\n}\n\n// Converts a string containing a Python literal into a string containing an equivalent JSON\n// literal.\nexport function pythonLiteralToJSON(x: string) {\n  let s = '';\n  while (x.length > 0) {\n    let m = x.match(SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN);\n    let before: string;\n    let replacement: string;\n    if (m === null) {\n      before = x;\n      x = '';\n      replacement = '';\n    } else {\n      before = x.substr(0, m.index);\n      x = x.substr(m.index! + m[0].length);\n      let singleQuoteString = m[1];\n      if (singleQuoteString !== undefined) {\n        replacement = normalizeStringLiteral(singleQuoteString);\n      } else {\n        replacement = m[2];\n      }\n    }\n    s += before.replace(/\\(/g, '[')\n             .replace(/\\)/g, ']')\n             .replace('True', 'true')\n             .replace('False', 'false')\n             .replace(/,\\s*([\\}\\]])/g, '$1');\n    s += replacement;\n  }\n  return s;\n}\n\n// Converts a string containing a Python literal into an equivalent JavaScript value.\nexport function pythonLiteralParse(x: string) {\n  return JSON.parse(pythonLiteralToJSON(x));\n}\n\nexport function expectArray(x: unknown, length?: number): any[] {\n  if (!Array.isArray(x)) {\n    throw new Error(`Expected array, but received: ${JSON.stringify(x)}.`);\n  }\n  if (length !== undefined && x.length !== length) {\n    throw new Error(`Expected array of length ${length}, but received: ${JSON.stringify(x)}.`);\n  }\n  return x;\n}\n\n// Checks that `x' is an array, maps each element by parseElement.\nexport function parseArray<T>(x: any, parseElement: (x: any, index: number) => T): T[] {\n  if (!Array.isArray(x)) {\n    throw new Error(`Expected array, but received: ${JSON.stringify(x)}.`);\n  }\n  return (<any[]>x).map(parseElement);\n}\n\nexport function parseFixedLengthArray<T, U extends WritableArrayLike<T>>(\n    out: U, obj: any, parseElement: (x: any, index: number) => T): U {\n  const length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error(`Expected length ${length} array, but received: ${JSON.stringify(obj)}.`);\n  }\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseElement(obj[i], i);\n  }\n  return out;\n}\n\nexport function verifyObject(obj: any) {\n  if (typeof obj !== 'object' || obj == null || Array.isArray(obj)) {\n    throw new Error(`Expected JSON object, but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\nexport function verifyInt(obj: any) {\n  let result = parseInt(obj, 10);\n  if (!Number.isInteger(result)) {\n    throw new Error(`Expected integer, but received: ${JSON.stringify(obj)}.`);\n  }\n  return result;\n}\n\nexport function verifyPositiveInt(obj: any) {\n  let result = verifyInt(obj);\n  if (result <= 0) {\n    throw new Error(`Expected positive integer, but received: ${result}.`);\n  }\n  return result;\n}\n\nexport function verifyNonnegativeInt(obj: any) {\n  const result = verifyInt(obj);\n  if (result < 0) {\n    throw new Error(`Expected non-negative integer, but received: ${result}.`);\n  }\n  return result;\n}\n\nexport function verifyMapKey<U>(obj: any, map: Map<string, U>) {\n  let result = map.get(obj);\n  if (result === undefined) {\n    throw new Error(\n        `Expected one of ${JSON.stringify(Array.from(map.keys()))}, ` +\n        `but received: ${JSON.stringify(obj)}.`);\n  }\n  return result;\n}\n\nexport function verifyString(obj: any) {\n  if (typeof obj !== 'string') {\n    throw new Error(`Expected string, but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\nexport function verifyOptionalString(obj: any): string|undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n  return verifyString(obj);\n}\n\nexport function verifyOptionalInt(obj: any): number|undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n  return verifyInt(obj);\n}\n\nexport function verifyOptionalBoolean(obj: any): boolean|undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (typeof obj === 'boolean') {\n    return obj;\n  } else if (obj === 'true') {\n    return true;\n  } else if (obj === 'false') {\n    return false;\n  } else {\n    throw new Error(`Expected string or boolean but received: ${JSON.stringify(obj)}`);\n  }\n}\n\nexport function valueOr<T>(value: T|undefined, defaultValue: T) {\n  return value === undefined ? defaultValue : value;\n}\n\nexport function verifyObjectProperty<T>(\n    obj: any, propertyName: string, validator: (value: any) => T): T {\n  let value =\n      Object.prototype.hasOwnProperty.call(obj, propertyName) ? obj[propertyName] : undefined;\n  try {\n    return validator(value);\n  } catch (parseError) {\n    throw new Error(\n        `Error parsing ${JSON.stringify(propertyName)} property: ${parseError.message}`);\n  }\n}\n\nexport function verifyOptionalObjectProperty<T>(\n    obj: any, propertyName: string, validator: (value: any) => T): T|undefined;\n\nexport function verifyOptionalObjectProperty<T>(\n    obj: any, propertyName: string, validator: (value: any) => T, defaultValue: T): T;\n\nexport function verifyOptionalObjectProperty<T>(\n    obj: any, propertyName: string, validator: (value: any) => T, defaultValue?: any) {\n  return verifyObjectProperty(\n      obj, propertyName, x => x === undefined ? defaultValue : validator(x));\n}\n\nexport function verifyObjectAsMap<T>(obj: any, validator: (value: any) => T): Map<string, T> {\n  verifyObject(obj);\n  let map = new Map<string, T>();\n  for (let key of Object.keys(obj)) {\n    try {\n      map.set(key, validator(obj[key]));\n    } catch (parseError) {\n      throw new Error(\n          `Error parsing value associated with key ${JSON.stringify(key)}: ${parseError.message}`);\n    }\n  }\n  return map;\n}\n\nexport function verifyFloat01(obj: any): number {\n  if (typeof obj !== 'number' || !Number.isFinite(obj) || obj < 0 || obj > 1) {\n    throw new Error(\n        `Expected floating point number in [0,1], but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\n/**\n * The query string parameters may either be specified in the usual\n * 'name=value&otherName=otherValue' form or as (optionally urlSafe) JSON: '{\"name\":\"value\"}`.\n */\nexport function parseQueryStringParameters(queryString: string) {\n  if (queryString === '') {\n    return {};\n  }\n  if (queryString.startsWith('{')) {\n    return urlSafeParse(queryString);\n  } else {\n    let result: any = {};\n    let parts = queryString.split(/[&;]/);\n    for (let part of parts) {\n      let m = part.match(/^([^=&;]+)=([^&;]*)$/);\n      if (m === null) {\n        throw new Error(`Invalid query string part: ${JSON.stringify(part)}.`);\n      }\n      result[m[1]] = decodeURIComponent(m[2]);\n    }\n    return result;\n  }\n}\n\nexport function unparseQueryStringParameters(parameters: any) {\n  if (parameters === undefined) return '';\n  const keys = Object.keys(parameters);\n  if (keys.length === 0) return '';\n  if (keys.some(key => typeof parameters[key] !== 'string')) {\n    return JSON.stringify(parameters);\n  }\n  return keys.map(key => `${encodeURIComponent(key)}=${encodeURIComponent(parameters[key])}`)\n      .join('&');\n}\n\n/**\n * Verifies that `obj' is a string that, when converted to uppercase, matches a string property of\n * `enumType`.\n *\n * @returns The corresponding numerical value.\n */\nexport function verifyEnumString<T extends number>(obj: any, enumType: {[x: string]: T|string}): T {\n  if (typeof obj === 'string' && obj.match(/^[a-zA-Z]/) !== null) {\n    obj = obj.toUpperCase();\n    if (enumType.hasOwnProperty(obj)) {\n      return enumType[obj] as T;\n    }\n  }\n  throw new Error(`Invalid enum value: ${JSON.stringify(obj)}.`);\n}\n\nexport function verify3dVec(obj: any) {\n  return parseFixedLengthArray(vec3.create(), obj, verifyFiniteFloat);\n}\n\nexport function verify3dScale(obj: any) {\n  return parseFixedLengthArray(vec3.create(), obj, verifyFinitePositiveFloat);\n}\n\nexport function verify3dDimensions(obj: any) {\n  return parseFixedLengthArray(vec3.create(), obj, verifyPositiveInt);\n}\n\nexport function verifyStringArray(a: any) {\n  if (!Array.isArray(a)) {\n    throw new Error(`Expected array, received: ${JSON.stringify(a)}.`);\n  }\n  for (let x of a) {\n    if (typeof x !== 'string') {\n      throw new Error(`Expected string, received: ${JSON.stringify(x)}.`);\n    }\n  }\n  return <string[]>a;\n}\n\nexport function verifyIntegerArray(a: unknown) {\n  if (!Array.isArray(a)) {\n    throw new Error(`Expected array, received: ${JSON.stringify(a)}.`);\n  }\n  for (let x of a) {\n    if (!Number.isInteger(x)) {\n      throw new Error(`Expected integer, received: ${JSON.stringify(x)}.`);\n    }\n  }\n  return <number[]>a;\n}\n\nexport function verifyBoolean(x: any) {\n  if (typeof x !== 'boolean') {\n    throw new Error(`Expected boolean, received: ${JSON.stringify(x)}`);\n  }\n  return x;\n}\n\n// If `x` is an empty object/array/string, returns undefined.  Otherwise returns `x`.\nexport function emptyToUndefined(x: any) {\n  for (const _ in x) {\n    return x;\n  }\n  return undefined;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RefCounted, RefCountedValue} from 'neuroglancer/util/disposable';\nimport {stableStringify} from 'neuroglancer/util/json';\n\nexport class Memoize<Key, Value extends RefCounted> {\n  private map = new Map<Key, Value>();\n\n  /**\n   * If getter throws an exception, no value is added.\n   */\n  get<T extends Value>(key: Key, getter: () => T): T {\n    let {map} = this;\n    let obj = <T>map.get(key);\n    if (obj === undefined) {\n      obj = getter();\n      obj.registerDisposer(() => {\n        map.delete(key);\n      });\n      map.set(key, obj);\n    } else {\n      obj.addRef();\n    }\n    return obj;\n  }\n}\n\nexport class StringMemoize extends Memoize<string, RefCounted> {\n  get<T extends RefCounted>(x: any, getter: () => T) {\n    if (typeof x !== 'string') {\n      x = stableStringify(x);\n    }\n    return super.get(x, getter);\n  }\n\n  getUncounted<T>(x: any, getter: () => T) {\n    return this.get(x, () => new RefCountedValue(getter())).value;\n  }\n}\n", "// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\n\ninterface Node<T> {\n  child0: T|null;\n  next0: T|null;\n  prev0: T|null;\n}\n\n/**\n * Pairing heap.\n *\n * The root node is the minimum element according to comparator.\n *\n * @final\n */\nexport default class Implementation<T extends Node<T>> implements PairingHeapOperations<T> {\n  /**\n   * @param compare Returns true iff a < b.\n   */\n  constructor(public compare: (a: T, b: T) => boolean) {}\n\n  meld(a: T|null, b: T|null) {\n    if (b === null) {\n      return a;\n    }\n    if (a === null) {\n      return b;\n    }\n    let {compare} = this;\n    if (compare(b, a)) {\n      let temp = a;\n      a = b;\n      b = temp;\n    }\n    var aChild = a.child0;\n    b.next0 = aChild;\n    b.prev0 = a;\n    if (aChild !== null) {\n      aChild.prev0 = b;\n    }\n    a.child0 = b;\n    return a;\n  }\n  private combineChildren(node: T) {\n    var cur = node.child0;\n    if (cur === null) {\n      return null;\n    }\n    // While in this function, we will use the nextProperty to create a\n    // singly-linked list of pairwise-merged nodes that still need to be\n    // merged together.\n    let head: T|null = null;\n    while (true) {\n      let curNext: T|null = cur.next0;\n      let next: T|null, m: T;\n      if (curNext === null) {\n        next = null;\n        m = cur;\n      } else {\n        next = curNext.next0;\n        m = this.meld(cur, curNext)!;\n      }\n      m.next0 = head;\n      head = m;\n      if (next === null) {\n        break;\n      }\n      cur = next;\n    }\n\n    var root = head;\n    head = head.next0;\n    while (true) {\n      if (head === null) {\n        break;\n      }\n      let next: T|null = head.next0;\n      root = this.meld(root, head)!;\n      head = next;\n    }\n    root.prev0 = null;\n    root.next0 = null;\n    return root;\n  }\n  removeMin(root: T) {\n    var newRoot = this.combineChildren(root);\n    root.next0 = null;\n    root.prev0 = null;\n    root.child0 = null;\n    return newRoot;\n  }\n\n  remove(root: T, node: T) {\n    if (root === node) {\n      return this.removeMin(root);\n    }\n    var prev = node.prev0!;\n    var next = node.next0!;\n    if (prev.child0 === node) {\n      prev.child0 = next;\n    } else {\n      prev.next0 = next;\n    }\n    if (next !== null) {\n      next.prev0 = prev;\n    }\n    let newRoot = this.meld(root, this.combineChildren(node));\n    node.next0 = null;\n    node.prev0 = null;\n    node.child0 = null;\n    return newRoot;\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.\n   */\n  * entries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child0;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next0;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.  The entries\n   * will be removed as they are iterated.\n   */\n  * removedEntries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child0;\n      root.child0 = null;\n      root.next0 = null;\n      root.prev0 = null;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next0;\n        child.child0 = null;\n        child.next0 = null;\n        child.prev0 = null;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n}\n", "// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\n\ninterface Node<T> {\n  child1: T|null;\n  next1: T|null;\n  prev1: T|null;\n}\n\n/**\n * Pairing heap.\n *\n * The root node is the minimum element according to comparator.\n *\n * @final\n */\nexport default class Implementation<T extends Node<T>> implements PairingHeapOperations<T> {\n  /**\n   * @param compare Returns true iff a < b.\n   */\n  constructor(public compare: (a: T, b: T) => boolean) {}\n\n  meld(a: T|null, b: T|null) {\n    if (b === null) {\n      return a;\n    }\n    if (a === null) {\n      return b;\n    }\n    let {compare} = this;\n    if (compare(b, a)) {\n      let temp = a;\n      a = b;\n      b = temp;\n    }\n    var aChild = a.child1;\n    b.next1 = aChild;\n    b.prev1 = a;\n    if (aChild !== null) {\n      aChild.prev1 = b;\n    }\n    a.child1 = b;\n    return a;\n  }\n  private combineChildren(node: T) {\n    var cur = node.child1;\n    if (cur === null) {\n      return null;\n    }\n    // While in this function, we will use the nextProperty to create a\n    // singly-linked list of pairwise-merged nodes that still need to be\n    // merged together.\n    let head: T|null = null;\n    while (true) {\n      let curNext: T|null = cur.next1;\n      let next: T|null, m: T;\n      if (curNext === null) {\n        next = null;\n        m = cur;\n      } else {\n        next = curNext.next1;\n        m = this.meld(cur, curNext)!;\n      }\n      m.next1 = head;\n      head = m;\n      if (next === null) {\n        break;\n      }\n      cur = next;\n    }\n\n    var root = head;\n    head = head.next1;\n    while (true) {\n      if (head === null) {\n        break;\n      }\n      let next: T|null = head.next1;\n      root = this.meld(root, head)!;\n      head = next;\n    }\n    root.prev1 = null;\n    root.next1 = null;\n    return root;\n  }\n  removeMin(root: T) {\n    var newRoot = this.combineChildren(root);\n    root.next1 = null;\n    root.prev1 = null;\n    root.child1 = null;\n    return newRoot;\n  }\n\n  remove(root: T, node: T) {\n    if (root === node) {\n      return this.removeMin(root);\n    }\n    var prev = node.prev1!;\n    var next = node.next1!;\n    if (prev.child1 === node) {\n      prev.child1 = next;\n    } else {\n      prev.next1 = next;\n    }\n    if (next !== null) {\n      next.prev1 = prev;\n    }\n    let newRoot = this.meld(root, this.combineChildren(node));\n    node.next1 = null;\n    node.prev1 = null;\n    node.child1 = null;\n    return newRoot;\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.\n   */\n  * entries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child1;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next1;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.  The entries\n   * will be removed as they are iterated.\n   */\n  * removedEntries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child1;\n      root.child1 = null;\n      root.next1 = null;\n      root.prev1 = null;\n      yield root;\n      while (child !== null) {\n        let next: T|null = child.next1;\n        child.child1 = null;\n        child.next1 = null;\n        child.prev1 = null;\n        yield* this.entries(child);\n        child = next;\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Simple signal dispatch mechanism.\n */\n\n/**\n * This class provides a simple signal dispatch mechanism.  Handlers can be added, and then the\n * `dispatch` method calls all of them.\n *\n * If specified, Callable should be an interface containing only a callable signature returning\n * void.  Due to limitations in TypeScript, any interface containing a callable signature will be\n * accepted by the compiler, but the resultant signature of `dispatch` will not be correct.\n */\nexport class Signal<Callable extends Function = () => void> {\n  private handlers = new Set<Callable>();\n\n  /**\n   * Count of number of times this signal has been dispatched.  This is incremented each time\n   * `dispatch` is called prior to invoking the handlers.\n   */\n  count = 0;\n\n  constructor() {\n    const obj = this;\n    this.dispatch = <Callable><Function>function(this: any) {\n      ++obj.count;\n      obj.handlers.forEach(handler => {\n        handler.apply(this, arguments);\n      });\n    };\n  }\n\n  /**\n   * Add a handler function.  If `dispatch` is currently be called, then the new handler will be\n   * called before `dispatch` returns.\n   *\n   * @param handler The handler function to add.\n   *\n   * @return A function that unregisters the handler.\n   */\n  add(handler: Callable): () => boolean {\n    this.handlers.add(handler);\n    return () => {\n      return this.remove(handler);\n    };\n  }\n\n  /**\n   * Remove a handler function.  If `dispatch` is currently be called and the new handler has not\n   * yet been called, then it will not be called.\n   *\n   * @param handler Handler to remove.\n   * @return `true` if the handler was present, `false` otherwise.\n   */\n  remove(handler: Callable): boolean {\n    return this.handlers.delete(handler);\n  }\n\n  /**\n   * Invokes each handler function with the same parameters (including `this`) with which it is\n   * called.  Handlers are invoked in the order in which they were added.\n   */\n  dispatch: Callable;\n\n  /**\n   * Disposes of resources.  No methods, including `dispatch`, may be invoked afterwards.\n   */\n  dispose() {\n    this.handlers = <any>undefined;\n  }\n}\n\nexport function observeSignal(\n    callback: () => void,\n    ...signals: {add(callback: () => void): void, remove(callback: () => void): void}[]) {\n  callback();\n  for (let i = 0, count = signals.length; i < count; ++i) {\n    signals[i].add(callback);\n  }\n  return () => {\n    for (let i = 0, count = signals.length; i < count; ++i) {\n      signals[i].remove(callback);\n    }\n  };\n}\n\n/**\n * Simple specialization of Signal for the common case of a nullary handler signature.\n */\nexport class NullarySignal extends Signal<() => void> {}\n\n/**\n * Interface for a signal excluding the dispatch method.\n *\n * Unlike Signal, this interface is covariant in the type of Callable.\n */\nexport interface ReadonlySignal<Callable extends Function> {\n  readonly count: number;\n  add(handler: Callable): () => void;\n  remove(handler: Callable): boolean;\n}\n\nexport type NullaryReadonlySignal = ReadonlySignal<() => void>;\n\nexport const neverSignal: NullaryReadonlySignal = {\n  count: 0,\n  add(_handler: any) {\n    return () => {};\n  },\n  remove(_handler: any) {\n    return false;\n  },\n};\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RENDERED_VIEW_ADD_LAYER_RPC_ID = 'rendered_view.addLayer';\nexport const RENDERED_VIEW_REMOVE_LAYER_RPC_ID = 'rendered_view.removeLayer';\nexport const PROJECTION_PARAMETERS_RPC_ID = 'SharedProjectionParameters';\nexport const PROJECTION_PARAMETERS_CHANGED_RPC_METHOD_ID = 'SharedProjectionParameters.changed';\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ChunkRenderLayerBackend} from 'neuroglancer/chunk_manager/backend';\nimport {ProjectionParameters} from 'neuroglancer/projection_parameters';\nimport {PROJECTION_PARAMETERS_CHANGED_RPC_METHOD_ID, PROJECTION_PARAMETERS_RPC_ID, RENDERED_VIEW_ADD_LAYER_RPC_ID, RENDERED_VIEW_REMOVE_LAYER_RPC_ID} from 'neuroglancer/render_layer_common';\nimport {WatchableValueChangeInterface, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {RefCounted} from 'neuroglancer/util/disposable';\nimport {Signal} from 'neuroglancer/util/signal';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nexport interface RenderedViewBackend {\n  visibility: WatchableValueInterface<number>;\n  projectionParameters: WatchableValueInterface<ProjectionParameters>;\n}\n\nexport class RenderLayerBackendAttachment<\n    ViewBackend extends RenderedViewBackend = RenderedViewBackend,\n                        AttachmentState = unknown> extends RefCounted {\n  state: AttachmentState|undefined = undefined;\n  constructor(public view: ViewBackend) {\n    super();\n  }\n}\n\nexport class RenderLayerBackend<ViewBackend extends RenderedViewBackend = RenderedViewBackend,\n                                                    AttachmentState = unknown> extends\n    ChunkRenderLayerBackend {\n  attachments = new Map<ViewBackend, RenderLayerBackendAttachment>();\n  attach(attachment: RenderLayerBackendAttachment<ViewBackend, AttachmentState>) {\n    attachment;\n  }\n}\n\nregisterRPC(RENDERED_VIEW_ADD_LAYER_RPC_ID, function(x) {\n  const view: RenderedViewBackend = this.get(x.view);\n  const layer: RenderLayerBackend = this.get(x.layer);\n  const attachment = new RenderLayerBackendAttachment(view);\n  layer.attachments.set(view, attachment);\n  layer.attach(attachment);\n});\n\nregisterRPC(RENDERED_VIEW_REMOVE_LAYER_RPC_ID, function(x) {\n  const view: RenderedViewBackend = this.get(x.view);\n  const layer: RenderLayerBackend = this.get(x.layer);\n  const attachment = layer.attachments.get(view)!;\n  layer.attachments.delete(view);\n  attachment.dispose();\n});\n\n@registerSharedObject(PROJECTION_PARAMETERS_RPC_ID)\nexport class SharedProjectionParametersBackend<T extends ProjectionParameters =\n                                                             ProjectionParameters> extends\n    SharedObjectCounterpart implements WatchableValueChangeInterface<T> {\n  value: T;\n  oldValue: T;\n  changed = new Signal<(oldValue: T, newValue: T) => void>();\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.value = options.value;\n    this.oldValue = Object.assign({}, this.value);\n  }\n}\n\nregisterRPC(PROJECTION_PARAMETERS_CHANGED_RPC_METHOD_ID, function(x) {\n  const obj: SharedProjectionParametersBackend = this.get(x.id);\n  const {value, oldValue} = obj;\n  Object.assign(oldValue, value);\n  Object.assign(value, x.value);\n  obj.changed.dispatch(oldValue, value);\n});\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport debounce from 'lodash/debounce';\nimport {Borrowed, Disposable, invokeDisposers, Owned, RefCounted} from 'neuroglancer/util/disposable';\nimport {neverSignal, NullaryReadonlySignal, NullarySignal, Signal} from 'neuroglancer/util/signal';\nimport {Trackable} from 'neuroglancer/util/trackable';\n\nexport interface WatchableValueInterface<T> {\n  value: T;\n  changed: NullaryReadonlySignal;\n}\n\nexport interface WatchableValueChangeInterface<T> {\n  readonly value: T;\n  readonly changed: Signal<(oldValue: T, newValue: T) => void>;\n}\n\nexport class WatchableValue<T> implements WatchableValueInterface<T> {\n  get value() {\n    return this.value_;\n  }\n  set value(newValue: T) {\n    if (newValue !== this.value_) {\n      this.value_ = newValue;\n      this.changed.dispatch();\n    }\n  }\n  changed = new NullarySignal();\n  constructor(protected value_: T) {}\n}\n\nexport class TrackableValue<T> extends WatchableValue<T> implements Trackable {\n  constructor(value: T, public validator: (value: any) => T, public defaultValue = value) {\n    super(value);\n  }\n  toJSON(): any {\n    let {value_} = this;\n    if (value_ === this.defaultValue) {\n      return undefined;\n    }\n    return this.value_;\n  }\n  reset() {\n    this.value = this.defaultValue;\n  }\n  restoreState(x: any) {\n    if (x !== undefined) {\n      let {validator} = this;\n      try {\n        this.value = validator(x);\n        return;\n      } catch (ignoredError) {\n      }\n    }\n    this.value = this.defaultValue;\n  }\n}\n\nclass DerivedWatchableValue<U> extends RefCounted implements WatchableValueInterface<U> {\n  changed = new NullarySignal();\n  get value() {\n    return this.f(...this.ws.map(w => w.value));\n  }\n  private f: (...v: any[]) => U;\n  private ws: WatchableValueInterface<any>[];\n\n  constructor(f: (...v: any[]) => U, ws: WatchableValueInterface<any>[]) {\n    super();\n    this.f = f;\n    this.ws = ws;\n    for (const w of ws) {\n      this.registerDisposer(w.changed.add(this.changed.dispatch));\n    }\n  }\n}\n\nexport function makeDerivedWatchableValue<U, T extends any[]>(\n    f: (...v: T) => U, ...ws: {[K in keyof T]: WatchableValueInterface<T[K]>}) {\n  return new DerivedWatchableValue(f, ws);\n}\n\nclass CachedLazyDerivedWatchableValue<U> extends RefCounted implements WatchableValueInterface<U> {\n  changed = new NullarySignal();\n  private value_: U|undefined;\n  private valueGeneration = -1;\n  get value() {\n    const generation = this.changed.count;\n    if (generation !== this.valueGeneration) {\n      this.value_ = this.f(...this.ws.map(w => w.value));\n      this.valueGeneration = generation;\n    }\n    return this.value_ as U;\n  }\n  private f: (...v: any[]) => U;\n  private ws: WatchableValueInterface<any>[];\n\n  constructor(f: (...v: any[]) => U, ws: WatchableValueInterface<any>[]) {\n    super();\n    this.f = f;\n    this.ws = ws;\n    for (const w of ws) {\n      this.registerDisposer(w.changed.add(this.changed.dispatch));\n    }\n  }\n}\n\nexport function makeCachedLazyDerivedWatchableValue<U, T extends any[]>(\n    f: (...v: T) => U, ...ws: {[K in keyof T]: WatchableValueInterface<T[K]>}) {\n  return new CachedLazyDerivedWatchableValue(f, ws);\n}\n\nexport class CachedWatchableValue<T> extends RefCounted implements WatchableValueInterface<T> {\n  changed = new Signal();\n  value: T;\n  constructor(\n      base: WatchableValueInterface<T>, isEqual: (a: T, b: T) => boolean = (a, b) => a === b) {\n    super();\n    this.value = base.value;\n    this.registerDisposer(base.changed.add(() => {\n      const newValue = base.value;\n      if (!isEqual(this.value, newValue)) {\n        this.value = newValue;\n        this.changed.dispatch();\n      }\n    }));\n  }\n}\n\nexport function makeCachedDerivedWatchableValue<U, T extends any[]>(\n    f: (...v: T) => U, ws: {[K in keyof T]: WatchableValueInterface<T[K]>},\n    isEqual?: (a: U, b: U) => boolean) {\n  const derived = new DerivedWatchableValue(f, ws);\n  const cached = new CachedWatchableValue(derived, isEqual);\n  cached.registerDisposer(derived);\n  return cached;\n}\n\nexport class AggregateWatchableValue<T> extends RefCounted implements WatchableValueInterface<T> {\n  changed = new NullarySignal();\n  value: T;\n  constructor(\n      getWatchables: (self: RefCounted) => {[k in keyof T]: WatchableValueInterface<T[k]>}) {\n    super();\n    const watchables = getWatchables(this);\n    const keys = Object.keys(watchables) as (keyof T)[];\n    const updateValue = () => {\n      const obj = (Array.isArray(watchables) ? [] : {}) as T;\n      for (const k of keys) {\n        obj[k] = watchables[k].value;\n      }\n      this.value = obj;\n      this.changed.dispatch();\n    };\n    updateValue();\n    for (const k of keys) {\n      const watchable = watchables[k];\n      // Ensure a unique function is used each time in case the same watchable is assigned to\n      // multiple properties.\n      this.registerDisposer(watchable.changed.add(() => updateValue()));\n    }\n  }\n}\n\nexport class ComputedWatchableValue<U> extends RefCounted implements WatchableValueInterface<U> {\n  get value() {\n    return this.f();\n  }\n  changed = new NullarySignal();\n  constructor(public f: () => U, ...signals: NullarySignal[]) {\n    super();\n    for (const signal of signals) {\n      this.registerDisposer(signal.add(this.changed.dispatch));\n    }\n  }\n}\n\nexport class WatchableRefCounted<T extends RefCounted> extends RefCounted implements\n    WatchableValueInterface<T|undefined> {\n  changed = new NullarySignal();\n\n  private value_: Owned<T>|undefined;\n  private valueHandler: (() => void)|undefined;\n\n  get value(): Borrowed<T>|undefined {\n    return this.value_;\n  }\n\n  set value(value: Owned<T>|undefined) {\n    const {value_} = this;\n    this.value_ = value;\n    if (value_ !== undefined) {\n      value_.dispose();\n      value_.unregisterDisposer(this.valueHandler!);\n      this.valueHandler = undefined;\n    }\n    if (value !== undefined) {\n      const valueHandler = this.valueHandler = () => {\n        if (this.value_ === value) {\n          this.value_ = undefined;\n          this.changed.dispatch();\n        }\n      };\n      value.registerDisposer(valueHandler);\n    }\n\n    if (value !== value_) {\n      this.changed.dispatch();\n    }\n  }\n\n  reset() {\n    this.value = undefined;\n  }\n\n  disposed() {\n    if (this.value_ !== undefined) {\n      this.value_.unregisterDisposer(this.valueHandler!);\n      this.value_.dispose();\n    }\n    this.value_ = undefined;\n    super.disposed();\n  }\n}\n\n\nexport interface TrackableValueInterface<T> extends WatchableValueInterface<T>, Trackable {}\n\nexport class TrackableRefCounted<T extends RefCounted> extends WatchableRefCounted<T> implements\n    TrackableValueInterface<T|undefined> {\n  constructor(\n      public validator: (value: any) => T | undefined, public jsonConverter: (value: T) => any) {\n    super();\n  }\n  toJSON() {\n    const {value} = this;\n    return value && this.jsonConverter(value);\n  }\n\n  restoreState(x: any) {\n    this.value = this.validator(x);\n  }\n}\n\nexport class WatchableSet<T> {\n  changed = new Signal<(x: T|null, add: boolean) => void>();\n  values: Set<T>;\n  constructor(values?: Iterable<T>) {\n    if (values === undefined) {\n      this.values = new Set();\n    } else {\n      this.values = new Set(values);\n    }\n  }\n  add(x: T) {\n    const {values} = this;\n    if (!values.has(x)) {\n      values.add(x);\n      this.changed.dispatch(x, true);\n    }\n    return this;\n  }\n  delete(x: T) {\n    const {values} = this;\n    if (values.delete(x)) {\n      this.changed.dispatch(x, false);\n      return true;\n    }\n    return false;\n  }\n  has(x: T) {\n    return this.values.has(x);\n  }\n  get size() {\n    return this.values.size;\n  }\n  [Symbol.iterator]() {\n    return this.values[Symbol.iterator]();\n  }\n  clear() {\n    const {values} = this;\n    if (values.size > 0) {\n      values.clear();\n      this.changed.dispatch(null, false);\n    }\n  }\n}\n\nexport interface NestedStateManager<T = undefined> extends Disposable {\n  flush: () => void;\n  value: T;\n}\n\nexport function registerNested<U, T extends any[]>(\n    f: (context: RefCounted, ...values: T) => U,\n    ...watchables: {[K in keyof T]: WatchableValueInterface<T[K]>}): NestedStateManager<U> {\n  let values = watchables.map(w => w.value) as T;\n  const count = watchables.length;\n  let context = new RefCounted();\n  let result = f(context, ...values);\n\n  const handleChange = debounce(() => {\n    let changed = false;\n    for (let i = 0; i < count; ++i) {\n      const watchable = watchables[i];\n      const value = watchable.value;\n      if (values[i] !== value) {\n        values[i] = value;\n        changed = true;\n      }\n    }\n    if (!changed) return;\n    context.dispose();\n    context = new RefCounted();\n    result = f(context, ...values);\n  }, 0);\n\n  const signalDisposers = watchables.map(w => w.changed.add(handleChange));\n\n  return {\n    flush() {\n      handleChange.flush();\n    },\n    dispose() {\n      handleChange.cancel();\n      invokeDisposers(signalDisposers);\n      context.dispose();\n    },\n    get value() {\n      handleChange.flush();\n      return result;\n    },\n  };\n}\n\nexport function registerNestedSync<U, T extends any[]>(\n    f: (context: RefCounted, ...values: T) => U,\n    ...watchables: {[K in keyof T]: WatchableValueInterface<T[K]>}):\n    {readonly value: U, dispose(): void} {\n  let values = watchables.map(w => w.value) as T;\n  const count = watchables.length;\n  let context = new RefCounted();\n  let result = f(context, ...values);\n\n  const handleChange = () => {\n    let changed = false;\n    for (let i = 0; i < count; ++i) {\n      const watchable = watchables[i];\n      const value = watchable.value;\n      if (values[i] !== value) {\n        values[i] = value;\n        changed = true;\n      }\n    }\n    if (!changed) return;\n    context.dispose();\n    context = new RefCounted();\n    result = f(context, ...values);\n  };\n\n  const signalDisposers = watchables.map(w => w.changed.add(handleChange));\n\n  return {\n    dispose() {\n      invokeDisposers(signalDisposers);\n      context.dispose();\n    },\n    get value() {\n      return result;\n    },\n  };\n}\n\nexport function constantWatchableValue<T>(value: T): WatchableValueInterface<T> {\n  return {changed: neverSignal, value};\n}\n\nexport function observeWatchable<T>(\n    callback: (value: T) => void, watchable: WatchableValueInterface<T>) {\n  callback(watchable.value);\n  return watchable.changed.add(() => callback(watchable.value));\n}\n\nexport function linkWatchableValue<T>(\n    source: WatchableValueInterface<T>, target: WatchableValueInterface<T>) {\n  target.value = source.value;\n  return source.changed.add(() => {\n    target.value = source.value;\n  });\n}\n\nexport class IndirectWatchableValue<U, T> implements Disposable, WatchableValueInterface<T> {\n  protected inner: WatchableValueInterface<T>;\n  changed = new NullarySignal();\n  disposer: (() => void) | undefined;\n  private update = () => {\n    const {disposer, outer} = this;\n    if (disposer !== undefined) {\n      disposer();\n    }\n    const inner = this.inner = this.getInner(outer.value);\n    this.disposer = inner.changed.add(this.changed.dispatch);\n    this.changed.dispatch();\n  };\n  constructor(private outer: WatchableValueInterface<U>, private getInner: (outer: U) => WatchableValueInterface<T>) {\n    outer.changed.add(this.update);\n    this.update();\n  }\n\n  dispose() {\n    this.outer.changed.remove(this.update);\n    this.disposer!();\n  }\n\n  get value() {\n    return this.inner.value;\n  }\n  set value(value: T) {\n    this.inner.value = value;\n  }\n}\n\nexport class IndirectTrackableValue<U, T> extends IndirectWatchableValue<U, T> implements\n    Trackable {\n  declare inner: TrackableValueInterface<T>;\n  reset() {\n    this.inner.reset();\n  }\n  restoreState(obj: unknown) {\n    this.inner.restoreState(obj);\n  }\n  toJSON() {\n    return this.inner.toJSON();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface DebouncedFunction {\n  /**\n   * Ensures the wrapped function will be run at the next animation frame.\n   */\n  (): void;\n\n  /**\n   * Cancels any outstanding call.\n   */\n  cancel(): void;\n\n  /**\n   * Runs any outstanding call immediately.\n   */\n  flush(): void;\n}\n\n/**\n * Returns a function that, when called, ensures `callback` is invoked at the next animation frame.\n */\nexport function animationFrameDebounce(callback: () => void): DebouncedFunction {\n  let handle = -1;\n  const cancel = () => {\n    if (handle !== -1) {\n      cancelAnimationFrame(handle);\n      handle = -1;\n    }\n  };\n  const flush = () => {\n    if (handle !== -1) {\n      handle = -1;\n      callback();\n    }\n  };\n  return Object.assign(() => {\n    if (handle === -1) {\n      handle = requestAnimationFrame(() => {\n        handle = -1;\n        callback();\n      });\n    }\n  }, {flush, cancel});\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RefCounted} from 'neuroglancer/util/disposable';\nimport {Memoize} from 'neuroglancer/util/memoize';\n\nexport interface GL extends WebGL2RenderingContext {\n  memoize: Memoize<any, RefCounted>;\n  maxTextureSize: number;\n  maxTextureImageUnits: number;\n  max3dTextureSize: number;\n  tempTextureUnit: number;\n}\n\nexport const DEBUG_SHADERS = false;\n\nexport function initializeWebGL(canvas: HTMLCanvasElement) {\n  let options: any = {\n    'antialias': false,\n    'stencil': true,\n  };\n  if (DEBUG_SHADERS) {\n    console.log('DEBUGGING via preserveDrawingBuffer');\n    options['preserveDrawingBuffer'] = true;\n  }\n  let gl =\n      <GL>canvas.getContext('webgl2', options);\n  if (gl == null) {\n    throw new Error('WebGL not supported.');\n  }\n  gl.memoize = new Memoize<any, RefCounted>();\n  gl.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  gl.max3dTextureSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);\n  gl.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  gl.tempTextureUnit = gl.maxTextureImageUnits - 1;\n\n  // FIXME: verify that we received a stencil buffer\n  // var contextAttributes = gl.getContextAttributes();\n  // var haveStencilBuffer = contextAttributes.stencil;\n\n  for (const extension of ['EXT_color_buffer_float']) {\n    if (!gl.getExtension(extension)) {\n      throw new Error(`${extension} extension not available`);\n    }\n  }\n\n  // Extensions to attempt to add but not fail if they are not available.\n  for (const extension of [\n           // Some versions of Firefox 67.0 seem to require this extension being added in addition\n           // to EXT_color_buffer_float, despite the note here indicating it is unnecessary:\n           // https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend\n           //\n           // See https://github.com/google/neuroglancer/issues/140\n           'EXT_float_blend',\n  ]) {\n    gl.getExtension(extension);\n  }\n  return gl;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {FrameNumberCounter} from 'neuroglancer/chunk_manager/frontend';\nimport {TrackableValue} from 'neuroglancer/trackable_value';\nimport {animationFrameDebounce} from 'neuroglancer/util/animation_frame_debounce';\nimport {Borrowed, RefCounted} from 'neuroglancer/util/disposable';\nimport {mat4} from 'neuroglancer/util/geom';\nimport {parseFixedLengthArray, verifyFloat01} from 'neuroglancer/util/json';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {WatchableVisibilityPriority} from 'neuroglancer/visibility_priority/frontend';\nimport {GL, initializeWebGL} from 'neuroglancer/webgl/context';\n\nexport class RenderViewport {\n  // Width of visible portion of panel in canvas pixels.\n  width: number = 0;\n\n  // Height of visible portion of panel in canvas pixels.\n  height: number = 0;\n\n  // Width in canvas pixels, including portions outside of the canvas (i.e. outside the \"viewport\"\n  // window).\n  logicalWidth: number = 0;\n\n  // Height in canvas pixels, including portions outside of the canvas (i.e. outside the \"viewport\"\n  // window).\n  logicalHeight: number = 0;\n\n  // Left edge of visible region within full (logical) panel, as fraction in [0, 1].\n  visibleLeftFraction: number = 0;\n\n  // Top edge of visible region within full (logical) panel, as fraction in [0, 1].\n  visibleTopFraction: number = 0;\n\n  // Fraction of logical width that is visible, equal to `widthInCanvasPixels / logicalWidth`.\n  visibleWidthFraction: number = 0;\n\n  // Fraction of logical height that is visible, equal to `heightInCanvasPixels / logicalHeight`.\n  visibleHeightFraction: number = 0;\n}\n\nexport function applyRenderViewportToProjectionMatrix(\n    viewport: RenderViewport, projectionMatrix: mat4) {\n  const xScale = 1 / viewport.visibleWidthFraction;\n  const yScale = 1 / viewport.visibleHeightFraction;\n  const xOffset = -1 - (-1 + 2 * viewport.visibleLeftFraction) * xScale;\n  let yOffset = -1 - (-1 + 2 * viewport.visibleTopFraction) * yScale;\n  yOffset = -yOffset;\n  projectionMatrix[0] = projectionMatrix[0] * xScale + projectionMatrix[3] * xOffset;\n  projectionMatrix[4] = projectionMatrix[4] * xScale + projectionMatrix[7] * xOffset;\n  projectionMatrix[8] = projectionMatrix[8] * xScale + projectionMatrix[11] * xOffset;\n  projectionMatrix[12] = projectionMatrix[12] * xScale + projectionMatrix[15] * xOffset;\n\n  projectionMatrix[1] = projectionMatrix[1] * yScale + projectionMatrix[3] * yOffset;\n  projectionMatrix[5] = projectionMatrix[5] * yScale + projectionMatrix[7] * yOffset;\n  projectionMatrix[9] = projectionMatrix[9] * yScale + projectionMatrix[11] * yOffset;\n  projectionMatrix[13] = projectionMatrix[13] * yScale + projectionMatrix[15] * yOffset;\n}\n\nexport function renderViewportsEqual(a: RenderViewport, b: RenderViewport) {\n  return a.width === b.width &&\n      a.height === b.height && a.logicalWidth === b.logicalWidth &&\n      a.logicalHeight === b.logicalHeight && a.visibleLeftFraction === b.visibleLeftFraction &&\n      a.visibleTopFraction === b.visibleTopFraction;\n}\n\nexport abstract class RenderedPanel extends RefCounted {\n  gl: GL;\n\n  // Generation used to check whether the following bounds-related fields are up to date.\n  boundsGeneration = -1;\n\n  // Offset of visible portion of panel in canvas pixels from left side of canvas.\n  canvasRelativeClippedLeft: number = 0;\n\n  // Offset of visible portion of panel in canvas pixels from top of canvas.\n  canvasRelativeClippedTop: number = 0;\n\n  canvasRelativeLogicalLeft: number = 0;\n  canvasRelativeLogicalTop: number = 0;\n\n  renderViewport = new RenderViewport();\n\n  private boundsObserversRegistered = false;\n\n  constructor(\n      public context: Borrowed<DisplayContext>, public element: HTMLElement,\n      public visibility: WatchableVisibilityPriority) {\n    super();\n    this.gl = context.gl;\n    context.addPanel(this);\n  }\n\n  scheduleRedraw() {\n    if (this.visible) {\n      this.context.scheduleRedraw();\n    }\n  }\n\n  abstract isReady(): boolean;\n\n  ensureBoundsUpdated() {\n    const {context} = this;\n    context.ensureBoundsUpdated();\n    const {boundsGeneration} = context;\n    if (boundsGeneration === this.boundsGeneration) return;\n    this.boundsGeneration = boundsGeneration;\n    const {element} = this;\n    if (!this.boundsObserversRegistered && context.monitorPanel(element)) {\n      this.boundsObserversRegistered = true;\n    }\n    const clientRect = element.getBoundingClientRect();\n    const root = context.container;\n    const canvasRect = context.canvasRect!;\n    const {canvas} = context;\n    const {width: canvasPixelWidth, height: canvasPixelHeight} = canvas;\n    const screenToCanvasPixelScaleX = canvasPixelWidth / canvasRect.width;\n    const screenToCanvasPixelScaleY = canvasPixelHeight / canvasRect.height;\n    // Logical bounding rectangle in canvas/WebGL pixels (which may be a different size than screen\n    // pixels when using a fixed canvas size via the Python integration).\n    const canvasLeft = canvasRect.left, canvasTop = canvasRect.top;\n    let logicalLeft = this.canvasRelativeLogicalLeft = Math.round(\n            (clientRect.left - canvasLeft) * screenToCanvasPixelScaleX + element.clientLeft),\n        logicalTop = this.canvasRelativeLogicalTop = Math.round(\n            (clientRect.top - canvasTop) * screenToCanvasPixelScaleY + element.clientTop),\n        logicalWidth = element.clientWidth, logicalHeight = element.clientHeight,\n        logicalRight = logicalLeft + logicalWidth, logicalBottom = logicalTop + logicalHeight;\n    // Clipped bounding rectangle in canvas/WebGL pixels.  The clipped bounding rectangle is the\n    // portion actually visible and overlapping the canvas.\n    let clippedTop = logicalTop, clippedLeft = logicalLeft, clippedRight = logicalRight,\n        clippedBottom = logicalBottom;\n    for (let parent = element.parentElement; parent !== null && parent !== root;\n         parent = parent.parentElement) {\n      const rect = parent.getBoundingClientRect();\n      if (rect.x === 0 && rect.y === 0 && rect.width === 0 && rect.height === 0) {\n        // Assume this is a `display: contents;` element.\n        continue;\n      }\n      clippedLeft = Math.max(clippedLeft, (rect.left - canvasLeft) * screenToCanvasPixelScaleX);\n      clippedTop = Math.max(clippedTop, (rect.top - canvasTop) * screenToCanvasPixelScaleY);\n      clippedRight = Math.min(clippedRight, (rect.right - canvasLeft) * screenToCanvasPixelScaleX);\n      clippedBottom =\n          Math.min(clippedBottom, (rect.bottom - canvasTop) * screenToCanvasPixelScaleY);\n    }\n    clippedTop = this.canvasRelativeClippedTop = Math.round(Math.max(clippedTop, 0));\n    clippedLeft = this.canvasRelativeClippedLeft = Math.round(Math.max(clippedLeft, 0));\n    clippedRight = Math.round(Math.min(clippedRight, canvasPixelWidth));\n    clippedBottom = Math.round(Math.min(clippedBottom, canvasPixelHeight));\n    const viewport = this.renderViewport;\n    const clippedWidth = viewport.width = Math.max(0, clippedRight - clippedLeft);\n    const clippedHeight = viewport.height = Math.max(0, clippedBottom - clippedTop);\n    viewport.logicalWidth = logicalWidth;\n    viewport.logicalHeight = logicalHeight;\n    viewport.visibleLeftFraction = (clippedLeft - logicalLeft) / logicalWidth;\n    viewport.visibleTopFraction = (clippedTop - logicalTop) / logicalHeight;\n    viewport.visibleWidthFraction = clippedWidth / logicalWidth;\n    viewport.visibleHeightFraction = clippedHeight / logicalHeight;\n  }\n\n  // Sets the viewport to the clipped viewport.  Any drawing must take\n  // `visible{Left,Top,Width,Height}Fraction` into account.  setGLClippedViewport() {\n  setGLClippedViewport() {\n    const {gl, canvasRelativeClippedTop, canvasRelativeClippedLeft, renderViewport: {width, height}} = this;\n    const bottom = canvasRelativeClippedTop + height;\n    gl.enable(WebGL2RenderingContext.SCISSOR_TEST);\n    let glBottom = this.context.canvas.height - bottom;\n    gl.viewport(canvasRelativeClippedLeft, glBottom, width, height);\n    gl.scissor(canvasRelativeClippedLeft, glBottom, width, height);\n  }\n\n  // Sets the viewport to the logical viewport, using the scissor test to constrain drawing to the\n  // clipped viewport.  Drawing does not need to take `visible{Left,Top,Width,Height}Fraction` into\n  // account.\n  setGLLogicalViewport() {\n    const {gl, renderViewport: {width, height, logicalWidth, logicalHeight}} = this;\n    const canvasHeight = this.context.canvas.height;\n    gl.enable(WebGL2RenderingContext.SCISSOR_TEST);\n    gl.viewport(\n        this.canvasRelativeLogicalLeft,\n        canvasHeight - (this.canvasRelativeLogicalTop + logicalHeight), logicalWidth,\n        logicalHeight);\n    gl.scissor(\n        this.canvasRelativeClippedLeft, canvasHeight - (this.canvasRelativeClippedTop + height),\n        width, height);\n  }\n\n  abstract draw(): void;\n\n  disposed() {\n    if (this.boundsObserversRegistered) {\n      this.context.unmonitorPanel(this.element);\n    }\n    this.context.removePanel(this);\n    super.disposed();\n  }\n\n  get visible() {\n    return this.visibility.visible;\n  }\n\n  getDepthArray(): Float32Array|undefined {\n    return undefined;\n  }\n\n  get shouldDraw() {\n    if (!this.visible) return false;\n    const {element} = this;\n    if (element.clientWidth === 0 || element.clientHeight === 0 || element.offsetWidth === 0 ||\n        element.offsetHeight === 0) {\n      // Skip drawing if the panel has zero client area.\n      return false;\n    }\n    return true;\n  }\n\n  // Returns a number that determine the order in which panels are drawn. This is used by CdfPanel\n  // to ensure it is drawn after other panels that update the histogram.\n  //\n  // A higher number -> later draw.\n  get drawOrder() {\n    return 0;\n  }\n}\n\nexport abstract class IndirectRenderedPanel extends RenderedPanel {\n  canvas = document.createElement('canvas');\n  canvasRenderingContext = this.canvas.getContext('2d');\n  constructor(\n      context: Borrowed<DisplayContext>, element: HTMLElement,\n    visibility: WatchableVisibilityPriority) {\n    super(context, element, visibility);\n    const {canvas} = this;\n    element.appendChild(canvas);\n    element.style.position = 'relative';\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    canvas.style.right = '0';\n    canvas.style.top = '0';\n    canvas.style.bottom = '0';\n  }\n\n  abstract drawIndirect(): void;\n\n  draw() {\n    this.drawIndirect();\n    const {renderViewport, canvas} = this;\n    const {logicalWidth, logicalHeight} = renderViewport;\n    canvas.width = logicalWidth;\n    canvas.height = logicalHeight;\n    const {canvasRenderingContext} = this;\n    canvasRenderingContext?.drawImage(\n      this.context.canvas, this.canvasRelativeLogicalLeft, this.canvasRelativeLogicalTop,\n      logicalWidth, logicalHeight, 0, 0, logicalWidth, logicalHeight);\n  }\n}\n\n// Specifies a rectangular sub-region of the full viewer area to actually be rendered on the canvas.\n// This is used by the Python integration to produce large screenshots by tiling multiple\n// screenshots.\n//\n// The value is: `[left, top, width, height]` where all values are in [0, 1].\nexport class TrackableWindowedViewport extends TrackableValue<Float64Array> {\n  constructor() {\n    super(\n        Float64Array.of(0, 0, 1, 1),\n        obj => parseFixedLengthArray(new Float64Array(4), obj, verifyFloat01));\n  }\n  toJSON() {\n    const {value} = this;\n    const [left, top, width, height] = value;\n    if (left === 0 && top == 0 && width === 1 && height === 1) return undefined;\n    return Array.from(value);\n  }\n}\n\nexport class DisplayContext extends RefCounted implements FrameNumberCounter {\n  canvas = document.createElement('canvas');\n  gl: GL;\n  updateStarted = new NullarySignal();\n  updateFinished = new NullarySignal();\n  changed = this.updateFinished;\n  panels = new Set<RenderedPanel>();\n  canvasRect: ClientRect|undefined;\n  resizeGeneration = 0;\n  boundsGeneration = -1;\n\n  // Panels ordered by `drawOrder`.  If length is 0, needs to be recomputed.\n  private orderedPanels: RenderedPanel[] = [];\n\n  /**\n   * Unique number of the next frame.  Incremented once each time a frame is drawn.\n   */\n  frameNumber = 0;\n\n  private panelAncestors = new Map<HTMLElement, {parent: HTMLElement, count: number}>();\n\n  private resizeCallback = () => {\n    ++this.resizeGeneration;\n    this.scheduleRedraw();\n  };\n\n  monitorPanel(element: HTMLElement): boolean {\n    const {panelAncestors, container: root} = this;\n    if (!root.contains(element)) return false;\n    while (element !== root) {\n      let entry = panelAncestors.get(element);\n      if (entry !== undefined) {\n        ++entry.count;\n        break;\n      }\n      const parent = element.parentElement!;\n      entry = {parent, count: 1};\n      panelAncestors.set(element, entry);\n      element.addEventListener('scroll', this.resizeCallback, {capture: true});\n      this.resizeObserver.observe(element);\n      element = parent;\n    }\n    return true;\n  }\n\n  unmonitorPanel(element: HTMLElement) {\n    const {panelAncestors, container: root} = this;\n    while (element !== root) {\n      const entry = panelAncestors.get(element)!;\n      if (entry.count !== 1) {\n        --entry.count;\n        break;\n      }\n      element.removeEventListener('scroll', this.resizeCallback, {capture: true});\n      this.resizeObserver.unobserve(element);\n      panelAncestors.delete(element);\n      element = entry.parent;\n    }\n  }\n\n  private resizeObserver = new ResizeObserver(this.resizeCallback);\n\n  constructor(public container: HTMLElement) {\n    super();\n    const {canvas, resizeObserver} = this;\n    container.style.position = 'relative';\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0px';\n    canvas.style.left = '0px';\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    canvas.style.zIndex = '0';\n    resizeObserver.observe(canvas);\n    container.appendChild(canvas);\n    this.registerEventListener(canvas, 'webglcontextlost', (event: WebGLContextEvent) => {\n      console.log(`Lost WebGL context: ${event.statusMessage}`);\n      // Wait for context to be regained.\n      event.preventDefault();\n    });\n    this.registerEventListener(canvas, 'webglcontextrestored', () => {\n      console.log('WebGL context restored');\n      // Simply reload Neuroglancer.\n      window.location.reload();\n    });\n    this.gl = initializeWebGL(canvas);\n  }\n\n  applyWindowedViewportToElement(element: HTMLElement, value: Float64Array) {\n    // These values specify the position of the canvas relative to the viewer.  However, we will\n    // actually leave the canvas in place (such that it still fills the browser window) and move\n    // the viewer.\n    const [left, top, width, height] = value;\n    const totalWidth = 1 / width;\n    const totalHeight = 1 / height;\n    element.style.position = 'absolute';\n    element.style.top = `${- totalHeight * top * 100}%`;\n    element.style.left = `${- totalWidth * left * 100}%`;\n    element.style.width = `${totalWidth * 100}%`;\n    element.style.height = `${totalHeight * 100}%`;\n    ++this.resizeGeneration;\n    this.scheduleRedraw();\n  }\n\n  isReady() {\n    for (const panel of this.panels) {\n      if (!panel.visible) {\n        continue;\n      }\n      if (!panel.isReady()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a child element that overlays the canvas.\n   */\n  makeCanvasOverlayElement() {\n    const element = document.createElement('div');\n    element.style.position = 'absolute';\n    element.style.top = '0px';\n    element.style.left = '0px';\n    element.style.width = '100%';\n    element.style.height = '100%';\n    element.style.zIndex = '2';\n    this.container.appendChild(element);\n    return element;\n  }\n\n  disposed() {\n    this.orderedPanels.length = 0;\n    this.resizeObserver.disconnect();\n  }\n\n  addPanel(panel: Borrowed<RenderedPanel>) {\n    this.panels.add(panel);\n    this.orderedPanels.length = 0;\n    ++this.resizeGeneration;\n    this.scheduleRedraw();\n  }\n\n  removePanel(panel: Borrowed<RenderedPanel>) {\n    this.panels.delete(panel);\n    this.orderedPanels.length = 0;\n    ++this.resizeGeneration;\n    this.scheduleRedraw();\n  }\n\n  readonly scheduleRedraw = this.registerCancellable(animationFrameDebounce(() => this.draw()));\n\n  ensureBoundsUpdated() {\n    const {resizeGeneration} = this;\n    if (this.boundsGeneration === resizeGeneration) return;\n    const {canvas} = this;\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    this.canvasRect = canvas.getBoundingClientRect();\n    this.boundsGeneration = resizeGeneration;\n  }\n\n  draw() {\n    ++this.frameNumber;\n    this.updateStarted.dispatch();\n    let gl = this.gl;\n    this.ensureBoundsUpdated();\n    this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    const {orderedPanels, panels} = this;\n    if (orderedPanels.length !== panels.size) {\n      orderedPanels.push(...panels);\n      orderedPanels.sort((a, b) => a.drawOrder - b.drawOrder);\n    }\n    for (const panel of orderedPanels) {\n      if (!panel.shouldDraw) continue;\n      panel.ensureBoundsUpdated();\n      const {renderViewport} = panel;\n      if (renderViewport.width === 0 || renderViewport.height === 0) continue;\n      panel.draw();\n    }\n\n    // Ensure the alpha buffer is set to 1.\n    gl.disable(gl.SCISSOR_TEST);\n    this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n    this.gl.colorMask(false, false, false, true);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    this.gl.colorMask(true, true, true, true);\n    this.updateFinished.dispatch();\n  }\n\n  getDepthArray(): Float32Array {\n    const {width, height} = this.canvas;\n    const depthArray = new Float32Array(width * height);\n    for (const panel of this.panels) {\n      if (!panel.shouldDraw) continue;\n      const panelDepthArray = panel.getDepthArray();\n      if (panelDepthArray === undefined) continue;\n      const {canvasRelativeClippedTop, canvasRelativeClippedLeft, renderViewport: {width, height}} = panel;\n      for (let y = 0; y < height; ++y) {\n        const panelDepthArrayOffset = (height - 1 - y) * width;\n        depthArray.set(\n            panelDepthArray.subarray(panelDepthArrayOffset, panelDepthArrayOffset + width),\n            (canvasRelativeClippedTop + y) * width + canvasRelativeClippedLeft);\n      }\n    }\n    return depthArray;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArray} from 'neuroglancer/util/array';\n\nexport function equal<T extends TypedArray, U extends TypedArray>(a: T, b: U) {\n  const n = a.length;\n  for (let i = 0; i < n; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nexport function add<Out extends TypedArray, A extends TypedArray, B extends TypedArray>(\n    out: Out, a: A, b: B) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = a[i] + b[i];\n  }\n  return out;\n}\nexport function subtract<Out extends TypedArray, A extends TypedArray, B extends TypedArray>(\n    out: Out, a: A, b: B) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = a[i] - b[i];\n  }\n  return out;\n}\nexport function multiply<Out extends TypedArray, A extends TypedArray, B extends TypedArray>(\n    out: Out, a: A, b: B) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = a[i] * b[i];\n  }\n  return out;\n}\nexport function divide<Out extends TypedArray, A extends TypedArray, B extends TypedArray>(\n    out: Out, a: A, b: B) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = a[i] / b[i];\n  }\n  return out;\n}\nexport function scaleAndAdd<Out extends TypedArray, A extends TypedArray, B extends TypedArray>(\n    out: Out, a: A, b: B, scale: number) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = a[i] + b[i] * scale;\n  }\n  return out;\n}\nexport function scale<Out extends TypedArray, A extends TypedArray>(out: Out, a: A, scale: number) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = a[i] * scale;\n  }\n  return out;\n}\n\nexport function prod(array: ArrayLike<number>) {\n  let result = 1;\n  for (let i = 0, length = array.length; i < length; ++i) {\n    result *= array[i];\n  }\n  return result;\n}\n\nexport function min<Out extends TypedArray, A extends TypedArray, B extends TypedArray>(\n    out: Out, a: A, b: B) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = Math.min(a[i], b[i]);\n  }\n  return out;\n}\n\nexport function max<Out extends TypedArray, A extends TypedArray, B extends TypedArray>(\n    out: Out, a: A, b: B) {\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = Math.max(a[i], b[i]);\n  }\n  return out;\n}\n\nexport const kEmptyFloat32Vec = new Float32Array(0);\nexport const kEmptyFloat64Vec = new Float64Array(0);\nexport const kFloat64Vec3Of1 = Float64Array.of(1, 1, 1);\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RenderViewport, renderViewportsEqual} from 'neuroglancer/display_context';\nimport {DisplayDimensionRenderInfo} from 'neuroglancer/navigation_state';\nimport {arraysEqual} from 'neuroglancer/util/array';\nimport {mat4} from 'neuroglancer/util/geom';\nimport {kEmptyFloat32Vec} from 'neuroglancer/util/vector';\n\nexport class ProjectionParameters extends RenderViewport {\n  displayDimensionRenderInfo: DisplayDimensionRenderInfo;\n\n  /**\n   * Global position.\n   */\n  globalPosition: Float32Array = kEmptyFloat32Vec;\n\n  /**\n   * Transform from camera coordinates to OpenGL clip coordinates.\n   */\n  projectionMat: mat4 = mat4.create();\n\n  /**\n   * Transform from world coordinates to camera coordinates.\n   */\n  viewMatrix: mat4 = mat4.create();\n\n  /**\n   * Inverse of `viewMat`.\n   */\n  invViewMatrix: mat4 = mat4.create();\n\n  /**\n   * Transform from world coordinates to OpenGL clip coordinates.  Equal to:\n   * `projectionMat * viewMat`.\n   */\n  viewProjectionMat: mat4 = mat4.create();\n\n  /**\n   * Inverse of `viewProjectionMat`.\n   */\n  invViewProjectionMat: mat4 = mat4.create();\n}\n\nexport function projectionParametersEqual(a: ProjectionParameters, b: ProjectionParameters) {\n  return (\n      a.displayDimensionRenderInfo === b.displayDimensionRenderInfo && renderViewportsEqual(a, b) &&\n      arraysEqual(a.globalPosition, b.globalPosition) &&\n      arraysEqual(a.projectionMat, b.projectionMat) && arraysEqual(a.viewMatrix, b.viewMatrix));\n}\n\nexport function updateProjectionParametersFromInverseViewAndProjection(p: ProjectionParameters) {\n  const {viewMatrix, viewProjectionMat} = p;\n  mat4.invert(viewMatrix, p.invViewMatrix);\n  mat4.multiply(viewProjectionMat, p.projectionMat, viewMatrix);\n  mat4.invert(p.invViewProjectionMat, viewProjectionMat);\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArray} from 'neuroglancer/util/array';\n\n/**\n * Sets the `m * k` matrix `c` to the product of `m * n` matrix `a` and `n * k` matrix `b`.\n *\n * `a`, `b` and `c` are column-major with column strides of `lda`, `ldb`, and `ldc`, respectively.\n * `c` must not overlap `a` or `b`.\n */\nexport function multiply<T extends TypedArray>(\n    c: T, ldc: number, a: T, lda: number, b: T, ldb: number, m: number, n: number, k: number): T {\n  for (let mIndex = 0; mIndex < m; ++mIndex) {\n    for (let kIndex = 0; kIndex < k; ++kIndex) {\n      let sum = 0;\n      for (let nIndex = 0; nIndex < n; ++nIndex) {\n        sum += a[mIndex + lda * nIndex] * b[nIndex + ldb * kIndex];\n      }\n      c[mIndex + ldc * kIndex] = sum;\n    }\n  }\n  return c;\n}\n\nexport function identity<T extends TypedArray>(a: T, lda: number, n: number): T {\n  for (let i = 0; i < n; ++i) {\n    const start = lda * i;\n    a.fill(0, start, start + n);\n    a[start + i] = 1;\n  }\n  return a;\n}\n\nexport function createIdentity<T extends TypedArray>(\n    c: {new (n: number): T}, rows: number, cols: number = rows): T {\n  return identity(new c(rows * cols), rows, Math.min(rows, cols));\n}\n\n\nexport function createHomogeneousScaleMatrix<T extends TypedArray>(\n    c: {new (length: number): T}, scales: ArrayLike<number>, square = true): T {\n  const rank = scales.length;\n  const stride = square ? rank + 1 : rank;\n  const m = new c(stride * (rank + 1));\n  if (square) {\n    m[m.length - 1] = 1;\n  }\n  for (let i = 0; i < rank; ++i) {\n    m[(stride + 1) * i] = scales[i];\n  }\n  return m;\n}\n\nexport function createHomogeneousTranslationMatrix<T extends TypedArray>(\n    c: {new (length: number): T}, translation: ArrayLike<number>, square = true): T {\n  const rank = translation.length;\n  const stride = square ? rank + 1 : rank;\n  const m = createIdentity(c, stride, rank + 1);\n  for (let i = 0; i < rank; ++i) {\n    m[stride * rank + i] = translation[i];\n  }\n  return m;\n}\n\nexport function isIdentity<T extends TypedArray>(a: T, lda: number, n: number) {\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0; j < n; ++j) {\n      if (a[i * lda + j] != ((i === j) ? 1 : 0)) return false;\n    }\n  }\n  return true;\n}\n\nexport function copy<T extends TypedArray>(\n    b: T, ldb: number, a: T, lda: number, m: number, n: number): T {\n  for (let col = 0; col < n; ++col) {\n    const aOff = col * lda;\n    const bOff = col * ldb;\n    for (let row = 0; row < m; ++row) {\n      b[bOff + row] = a[aOff + row];\n    }\n  }\n  return b;\n}\n\nexport function extendHomogeneousTransform<T extends TypedArray>(\n    b: T, bRank: number, a: T, aRank: number) {\n  copy(b, bRank + 1, a, aRank + 1, aRank, aRank);\n  for (let i = 0; i < aRank; ++i) {\n    b[(bRank + 1) * bRank + i] = a[(aRank + 1) * aRank + i];\n  }\n  b[b.length - 1] = 1;\n  for (let i = aRank; i < bRank; ++i) {\n    b[(bRank + 1) * i + i] = 1;\n  }\n  return b;\n}\n\n\nlet pivots: Uint32Array|undefined;\n\n/**\n * Computes the inverse of a square matrix in place, and returns the determinant.\n */\nexport function inverseInplace<T extends TypedArray>(a: T, lda: number, n: number): number {\n  let determinant = 1;\n  // Use Gauss-Jordan elimination with partial pivoting to compute inverse.\n  if (pivots === undefined || pivots.length < n) {\n    pivots = new Uint32Array(n);\n  }\n  for (let i = 0; i < n; ++i) {\n    pivots[i] = i;\n  }\n  for (let k = 0; k < n; ++k) {\n    const kColOff = lda * k;\n    // Find best pivot (row >= `k` with maximum-magnitude element in column `k`).\n    let pivotRow = k;\n    {\n      let bestPivot = Math.abs(a[kColOff + k]);\n      for (let row = k + 1; row < n; ++row) {\n        const mag = Math.abs(a[kColOff + row]);\n        if (mag > bestPivot) {\n          bestPivot = mag;\n          pivotRow = row;\n        }\n      }\n    }\n    // Swap rows `k` and `pivotRow`.\n    if (k !== pivotRow) {\n      determinant *= -1;\n      for (let col = 0; col < n; ++col) {\n        const off = lda * col;\n        const temp = a[off + k];\n        a[off + k] = a[off + pivotRow];\n        a[off + pivotRow] = temp;\n      }\n\n      // Swap `pivots[k]` with `pivots[pivotRow]`.\n      {\n        const tempPivot = pivots[k];\n        pivots[k] = pivots[pivotRow];\n        pivots[pivotRow] = tempPivot;\n      }\n    }\n    // Eliminate.\n    const pivotValue = a[kColOff + k];\n    const pivotInv = 1.0 / pivotValue;\n\n    // Divide row `k` by the pivot element.\n    determinant *= pivotValue;\n    for (let j = 0; j < n; ++j) {\n      a[lda * j + k] *= pivotInv;\n    }\n    // Convert `a(k, k)` to contain the inverse element.\n    a[kColOff + k] = pivotInv;\n\n    // Subtract a suitable multiple of row `k` from all other rows to ensure column `k` becomes `0`.\n    for (let row = 0; row < n; ++row) {\n      if (row === k) continue;\n      const factor = -a[lda * k + row];\n      for (let j = 0; j < n; ++j) {\n        const jColOff = lda * j;\n        a[jColOff + row] += factor * a[jColOff + k];\n      }\n      // Convert element in column `k` to contain the inverse element.\n      a[lda * k + row] = factor * pivotInv;\n    }\n  }\n  // Permute columns back to correct order.\n  for (let col = 0; col < n; ++col) {\n    let targetCol = pivots[col];\n    while (targetCol !== col) {\n      const colOff = lda * col;\n      const targetColOff = lda * targetCol;\n      for (let i = 0; i < n; ++i) {\n        const off1 = colOff + i;\n        const off2 = targetColOff + i;\n        const temp = a[off1];\n        a[off1] = a[off2];\n        a[off2] = temp;\n      }\n      const temp = pivots[col] = pivots[targetCol];\n      pivots[targetCol] = targetCol;\n      targetCol = temp;\n    }\n  }\n  return determinant;\n}\n\n/**\n * Computes the inverse and returns the determinant.\n */\nexport function inverse<T extends TypedArray>(\n    b: T, ldb: number, a: T, lda: number, n: number): number {\n  copy(b, ldb, a, lda, n, n);\n  return inverseInplace(b, ldb, n);\n}\n\n\nexport function equal<T extends TypedArray>(\n    a: T, lda: number, b: T, ldb: number, m: number, n: number) {\n  for (let j = 0; j < n; ++j) {\n    const offA = lda * j;\n    const offB = ldb * j;\n    for (let i = 0; i < m; ++i) {\n      if (a[offA + i] !== b[offB + i]) return false;\n    }\n  }\n  return true;\n}\n\nexport function transpose<T extends TypedArray>(\n    b: T, ldb: number, a: T, lda: number, m: number, n: number) {\n  for (let i = 0; i < m; ++i) {\n    for (let j = 0; j < n; ++j) {\n      b[j + i * ldb] = a[i + j * lda];\n    }\n  }\n  return b;\n}\n\nexport function\ntransformPoint<Out extends TypedArray, Matrix extends TypedArray, Vector extends TypedArray>(\n    out: Out, mat: Matrix, matrixStride: number, vec: Vector, rank: number): Out {\n  for (let i = 0; i < rank; ++i) {\n    let sum = mat[matrixStride * rank + i];\n    for (let j = 0; j < rank; ++j) {\n      sum += mat[matrixStride * j + i] * vec[j];\n    }\n    out[i] = sum;\n  }\n  return out;\n}\n\nexport function\ntransformVector<Out extends TypedArray, Matrix extends TypedArray, Vector extends TypedArray>(\n    out: Out, mat: Matrix, matrixStride: number, vec: Vector, rank: number): Out {\n  for (let i = 0; i < rank; ++i) {\n    let sum = 0;\n    for (let j = 0; j < rank; ++j) {\n      sum += mat[matrixStride * j + i] * vec[j];\n    }\n    out[i] = sum;\n  }\n  return out;\n}\n\nexport function permuteRows<Output extends TypedArray, Input extends TypedArray>(\n    output: Output, outputStride: number, input: Input, inputStride: number,\n    outputToInputRow: ReadonlyArray<number>, cols: number) {\n  const rows = outputToInputRow.length;\n  for (let outRow = 0; outRow < rows; ++outRow) {\n    const inRow = outputToInputRow[outRow];\n    for (let col = 0; col < cols; ++col) {\n      output[col * outputStride + outRow] = input[col * inputStride + inRow];\n    }\n  }\n  return output;\n}\n\nexport function permuteCols<Output extends TypedArray, Input extends TypedArray>(\n    output: Output, outputStride: number, input: Input, inputStride: number,\n    outputToInputCol: ReadonlyArray<number>, rows: number) {\n  const cols = outputToInputCol.length;\n  for (let outCol = 0; outCol < cols; ++outCol) {\n    const inCol = outputToInputCol[outCol];\n    for (let row = 0; row < rows; ++row) {\n      output[outCol * outputStride + row] = input[inCol * inputStride + row];\n    }\n  }\n  return output;\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {binarySearchLowerBound} from 'neuroglancer/util/array';\n\nexport interface SiPrefix {\n  readonly prefix: string;\n  readonly exponent: number;\n  readonly longPrefix?: string;\n}\n\nexport const preferredSiPrefixes: readonly SiPrefix[] = [\n  {prefix: 'Y', exponent: 24, longPrefix: 'yotta'},\n  {prefix: 'Z', exponent: 21, longPrefix: 'zetta'},\n  {prefix: 'E', exponent: 18, longPrefix: 'exa'},\n  {prefix: 'P', exponent: 15, longPrefix: 'peta'},\n  {prefix: 'T', exponent: 12, longPrefix: 'tera'},\n  {prefix: 'G', exponent: 9, longPrefix: 'giga'},\n  {prefix: 'M', exponent: 6, longPrefix: 'mega'},\n  {prefix: 'k', exponent: 3, longPrefix: 'kilo'},\n  {prefix: '', exponent: 0, longPrefix: ''},\n  {prefix: 'm', exponent: -3, longPrefix: 'milli'},\n  {prefix: '\u00B5', exponent: -6, longPrefix: 'micro'},\n  {prefix: 'n', exponent: -9, longPrefix: 'nano'},\n  {prefix: 'p', exponent: -12, longPrefix: 'pico'},\n  {prefix: 'f', exponent: -15, longPrefix: 'femto'},\n  {prefix: 'a', exponent: -18, longPrefix: 'atto'},\n  {prefix: 'z', exponent: -21, longPrefix: 'zepto'},\n  {prefix: 'y', exponent: -24, longPrefix: 'yocto'},\n];\n\nexport const allSiPrefixes: readonly SiPrefix[] = [\n  ...preferredSiPrefixes,\n  {prefix: 'h', exponent: 2, longPrefix: 'hecto'},\n  {prefix: 'da', exponent: 1, longPrefix: 'deca'},\n  {prefix: 'd', exponent: -1, longPrefix: 'deci'},\n  {prefix: 'c', exponent: -2, longPrefix: 'centi'},\n];\n\nconst siPrefixesWithAlternatives: readonly SiPrefix[] = [\n  {prefix: 'u', exponent: -6},  // Also allow \"u\" for micro\n  ...allSiPrefixes,\n];\n\nexport const supportedUnits = new Map<string, {unit: string, exponent: number}>();\nsupportedUnits.set('', {unit: '', exponent: 0});\nexport const exponentToPrefix = new Map<number, string>();\nfor (const {prefix, exponent} of siPrefixesWithAlternatives) {\n  exponentToPrefix.set(exponent, prefix);\n  for (const unit of ['m', 's', 'Hz', 'rad/s']) {\n    supportedUnits.set(`${prefix}${unit}`, {unit, exponent});\n  }\n}\n\nexport function pickSiPrefix(x: number): SiPrefix {\n  const exponent = Math.log10(x);\n  const numPrefixes = preferredSiPrefixes.length;\n  const i =\n      binarySearchLowerBound(0, numPrefixes, i => preferredSiPrefixes[i].exponent <= exponent);\n  return preferredSiPrefixes[Math.min(i, numPrefixes - 1)];\n}\n\ninterface FormatScaleWithUnitOptions {\n  precision?: number;\n  elide1?: boolean;\n}\n\nexport function formatScaleWithUnit(\n    scale: number, unit: string,\n    options: FormatScaleWithUnitOptions = {}): {scale: string, prefix: string, unit: string} {\n  const {precision = 6, elide1 = true} = options;\n  let adjustedScale = scale;\n  let prefix = '';\n  if (unit !== '') {\n    const result = pickSiPrefix(scale);\n    prefix = result.prefix;\n    adjustedScale = scaleByExp10(scale, -result.exponent);\n  }\n  if (elide1 && adjustedScale === 1) {\n    return {scale: '', unit, prefix};\n  }\n  let scaleString: string;\n  if (precision != 0) {\n    if (adjustedScale < 1 || adjustedScale >= 1000) {\n      scaleString = adjustedScale.toPrecision(precision);\n    } else {\n      scaleString = adjustedScale.toFixed(precision);\n    }\n    const eIndex = scaleString.indexOf('e');\n    let numString: string;\n    let exponentString: string;\n    if (eIndex !== -1) {\n      numString = scaleString.substring(0, eIndex);\n      exponentString = scaleString.substring(eIndex);\n    } else {\n      numString = scaleString;\n      exponentString = '';\n    }\n    const m = numString.match(/.*\\.(?:[0-9]*[1-9])?(0+)$/);\n    if (m !== null) {\n      numString = numString.substring(0, numString.length - m[1].length);\n      if (numString.endsWith('.')) {\n        numString = numString.substring(0, numString.length - 1);\n      }\n      scaleString = numString + exponentString;\n    }\n  } else {\n    scaleString = adjustedScale.toString();\n  }\n  return {\n    scale: scaleString,\n    unit,\n    prefix,\n  };\n}\n\nexport function formatScaleWithUnitAsString(\n    scale: number, unit: string, options?: FormatScaleWithUnitOptions): string {\n  const {scale: formattedScale, unit: formattedUnit, prefix} =\n      formatScaleWithUnit(scale, unit, options);\n  return `${formattedScale}${prefix}${formattedUnit}`;\n}\n\nexport function parseScale(s: string) {\n  if (s === '') {\n    return {scale: 1, unit: ''};\n  }\n  const match = s.match(/^((?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?([\u00B5a-zA-Z]+)?$/);\n  if (match === null) return undefined;\n  const scaleString = match[1];\n  let scale = (scaleString === undefined) ? 1 : Number(scaleString);\n  if (Number.isNaN(scale)) return undefined;\n  let unit = '';\n  if (match[2] !== undefined) {\n    const result = supportedUnits.get(match[2]);\n    if (result === undefined) {\n      return undefined;\n    }\n    unit = result.unit;\n    if (result.exponent > 0) {\n      scale *= 10 ** result.exponent;\n    } else {\n      scale /= 10 ** (-result.exponent);\n    }\n  }\n  if (scale <= 0 || !Number.isFinite(scale)) return undefined;\n  return {scale, unit};\n}\n\nexport function unitFromJson(x: unknown) {\n  const result = supportedUnits.get(x as string);\n  if (result === undefined) {\n    throw new Error(`Invalid unit: ${JSON.stringify(x)}`);\n  }\n  return result;\n}\n\n/**\n * Returns `scale * 10**exponent`, but uses division for negative exponents to reduce loss of\n * precision.\n */\nexport function scaleByExp10(scale: number, exponent: number) {\n  if (exponent >= 0) return scale * (10 ** exponent);\n  return scale / (10 ** (-exponent));\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WatchableValue, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {arraysEqual, arraysEqualWithPredicate, getInsertPermutation, TypedArray} from 'neuroglancer/util/array';\nimport {getDependentTransformInputDimensions, mat4, quat, vec3} from 'neuroglancer/util/geom';\nimport {expectArray, parseArray, parseFiniteVec, parseFixedLengthArray, verifyFiniteFloat, verifyFinitePositiveFloat, verifyIntegerArray, verifyObject, verifyObjectProperty, verifyOptionalObjectProperty, verifyString, verifyStringArray} from 'neuroglancer/util/json';\nimport * as matrix from 'neuroglancer/util/matrix';\nimport {scaleByExp10, supportedUnits, unitFromJson} from 'neuroglancer/util/si_units';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {Trackable} from 'neuroglancer/util/trackable';\nimport * as vector from 'neuroglancer/util/vector';\n\nexport type DimensionId = number;\n\nlet nextDimensionId = 0;\n\nexport function newDimensionId(): DimensionId {\n  return ++nextDimensionId;\n}\n\nexport interface CoordinateArray {\n  // Indicates whether this coordinate array was specified explicitly, in which case it will be\n  // encoded in the JSON representation.\n  explicit: boolean;\n  // Specifies the coordinates.  Must be montonically increasing integers.\n  coordinates: number[];\n  // Specifies the label for each coordinate in `coordinates`.\n  labels: string[];\n}\n\nexport interface CoordinateSpace {\n  /**\n   * If `true`, has been fully initialized (i.e. based on at least one data source).  If `false`,\n   * may be partially initialized.\n   */\n  readonly valid: boolean;\n\n  readonly rank: number;\n\n  /**\n   * Specifies the name of each dimension.\n   */\n  readonly names: readonly string[];\n\n  readonly ids: readonly DimensionId[];\n\n  /**\n   * Timestamp of last user action that changed the name, scale, or unit of each dimension, or\n   * `undefined` if there was no user action.\n   */\n  readonly timestamps: readonly number[];\n\n  /**\n   * Specifies the physical units corresponding to this dimension.  May be empty to indicate\n   * unitless.\n   */\n  readonly units: readonly string[];\n\n  /**\n   * Specifies a scale for this dimension.\n   */\n  readonly scales: Float64Array;\n\n  readonly bounds: BoundingBox;\n  readonly boundingBoxes: readonly TransformedBoundingBox[];\n\n  readonly coordinateArrays: (CoordinateArray|undefined)[];\n}\n\nexport function boundingBoxesEqual(a: BoundingBox, b: BoundingBox) {\n  return arraysEqual(a.lowerBounds, b.lowerBounds) && arraysEqual(a.upperBounds, b.upperBounds);\n}\n\nexport function coordinateArraysEqual(a: CoordinateArray|undefined, b: CoordinateArray|undefined) {\n  if (a === undefined) return b === undefined;\n  if (b === undefined) return false;\n  return a.explicit === b.explicit && arraysEqual(a.coordinates, b.coordinates) &&\n      arraysEqual(a.labels, b.labels);\n}\n\nexport function normalizeCoordinateArray(coordinates: number[], labels: string[]) {\n  const map = new Map<number, string>();\n  for (let i = 0, length = coordinates.length; i < length; ++i) {\n    map.set(coordinates[i], labels[i]);\n  }\n  coordinates = Array.from(map.keys());\n  coordinates.sort((a, b) => a - b);\n  labels = Array.from(coordinates, x => map.get(x)!);\n  return {coordinates, labels};\n}\n\nexport function mergeCoordinateArrays(coordinateArrays: ReadonlyArray<CoordinateArray>):\n    CoordinateArray {\n  if (coordinateArrays.length === 1) return coordinateArrays[0];\n  const map = new Map<number, string>();\n  let explicit = false;\n  for (const x of coordinateArrays) {\n    if (x.explicit) explicit = true;\n    const {coordinates, labels} = x;\n    for (let i = 0, length = coordinates.length; i < length; ++i) {\n      map.set(coordinates[i], labels[i]);\n    }\n  }\n  const coordinates = Array.from(map.keys());\n  coordinates.sort((a, b) => a - b);\n  const labels = Array.from(coordinates, x => map.get(x)!);\n  return {explicit, coordinates, labels};\n}\n\nexport function mergeOptionalCoordinateArrays(\n    coordinateArrays: ReadonlyArray<CoordinateArray|undefined>): CoordinateArray|undefined {\n  coordinateArrays = coordinateArrays.filter(x => x !== undefined);\n  if (coordinateArrays.length === 0) return undefined;\n  return mergeCoordinateArrays(coordinateArrays as ReadonlyArray<CoordinateArray>);\n}\n\nexport function transformedBoundingBoxesEqual(\n    a: TransformedBoundingBox, b: TransformedBoundingBox) {\n  return arraysEqual(a.transform, b.transform) && boundingBoxesEqual(a.box, b.box);\n}\n\nexport function coordinateSpacesEqual(a: CoordinateSpace, b: CoordinateSpace) {\n  return (\n      a.valid === b.valid && a.rank === b.rank && arraysEqual(a.names, b.names) &&\n      arraysEqual(a.ids, b.ids) && arraysEqual(a.timestamps, b.timestamps) &&\n      arraysEqual(a.units, b.units) && arraysEqual(a.scales, b.scales) &&\n      arraysEqualWithPredicate(a.boundingBoxes, b.boundingBoxes, transformedBoundingBoxesEqual) &&\n      arraysEqualWithPredicate(a.coordinateArrays, b.coordinateArrays, coordinateArraysEqual));\n}\n\nexport function unitsFromJson(units: string[], scaleExponents: Float64Array, obj: any) {\n  parseFixedLengthArray(units, obj, (x: any, index: number) => {\n    const result = unitFromJson(x);\n    scaleExponents[index] = result.exponent;\n    return result.unit;\n  });\n}\n\nexport function makeCoordinateSpace(space: {\n  readonly valid?: boolean,\n  readonly names: readonly string[],\n  readonly units: readonly string[],\n  readonly scales: Float64Array,\n  readonly rank?: number,\n  readonly timestamps?: readonly number[],\n  readonly ids?: readonly DimensionId[],\n  readonly boundingBoxes?: readonly TransformedBoundingBox[],\n  readonly bounds?: BoundingBox,\n  readonly coordinateArrays?: (CoordinateArray|undefined)[],\n}): CoordinateSpace {\n  const {names, units, scales} = space;\n  const {\n    valid = true,\n    rank = names.length,\n    timestamps = names.map(() => Number.NEGATIVE_INFINITY),\n    ids = names.map((_, i) => -i),\n    boundingBoxes = [],\n  } = space;\n  const {coordinateArrays = new Array<CoordinateArray|undefined>(rank)} = space;\n  const {bounds = computeCombinedBounds(boundingBoxes, rank)} = space;\n  return {\n    valid,\n    rank,\n    names,\n    timestamps,\n    ids,\n    units,\n    scales,\n    boundingBoxes,\n    bounds,\n    coordinateArrays\n  };\n}\n\nexport const emptyInvalidCoordinateSpace = makeCoordinateSpace({\n  valid: false,\n  names: [],\n  units: [],\n  scales: vector.kEmptyFloat64Vec,\n  boundingBoxes: [],\n});\n\nexport const emptyValidCoordinateSpace = makeCoordinateSpace({\n  valid: true,\n  names: [],\n  units: [],\n  scales: vector.kEmptyFloat64Vec,\n  boundingBoxes: [],\n});\n\nfunction unitAndScaleFromJson(obj: unknown) {\n  const [scaleObj, unitObj] = expectArray(obj, 2);\n  const scale = verifyFinitePositiveFloat(scaleObj);\n  const unitString = verifyString(unitObj);\n  const result = supportedUnits.get(unitString);\n  if (result === undefined) throw new Error(`Invalid unit: ${JSON.stringify(unitString)}`);\n  return {unit: result.unit, scale: scaleByExp10(scale, result.exponent)};\n}\n\nexport function coordinateSpaceFromJson(\n    obj: any, allowNumericalDimensions = false): CoordinateSpace {\n  if (obj === undefined) return emptyInvalidCoordinateSpace;\n  verifyObject(obj);\n  const names = dimensionNamesFromJson(Object.keys(obj), allowNumericalDimensions);\n  const rank = names.length;\n  const units = new Array<string>(rank);\n  const scales = new Float64Array(rank);\n  const coordinateArrays = new Array<CoordinateArray|undefined>(rank);\n  for (let i = 0; i < rank; ++i) {\n    verifyObjectProperty(obj, names[i], mem => {\n      if (Array.isArray(mem)) {\n        // Normal unit-scale dimension.\n        const {unit, scale} = unitAndScaleFromJson(mem);\n        units[i] = unit;\n        scales[i] = scale;\n      } else {\n        // Coordinate array dimension.\n        verifyObject(mem);\n        let coordinates = verifyObjectProperty(mem, 'coordinates', verifyIntegerArray);\n        let labels = verifyObjectProperty(mem, 'labels', verifyStringArray);\n        let length = coordinates.length;\n        if (length !== labels.length) {\n          throw new Error(\n              `Length of coordinates array (${length}) ` +\n              `does not match length of labels array (${labels.length})`);\n        }\n        units[i] = '';\n        scales[i] = 1;\n        coordinateArrays[i] = {explicit: true, ...normalizeCoordinateArray(coordinates, labels)};\n      }\n    });\n  }\n  return makeCoordinateSpace({valid: false, names, units, scales, coordinateArrays});\n}\n\nexport function coordinateSpaceToJson(coordinateSpace: CoordinateSpace): any {\n  const {rank} = coordinateSpace;\n  if (rank === 0) return undefined;\n  const {names, units, scales, coordinateArrays} = coordinateSpace;\n  const json: any = {};\n  for (let i = 0; i < rank; ++i) {\n    const name = names[i];\n    const coordinateArray = coordinateArrays[i];\n    if (coordinateArray?.explicit) {\n      json[name] = {\n        coordinates: Array.from(coordinateArray.coordinates),\n        labels: coordinateArray.labels\n      };\n    } else {\n      json[name] = [scales[i], units[i]];\n    }\n  }\n  return json;\n}\n\nexport class TrackableCoordinateSpace extends WatchableValue<CoordinateSpace> {\n  constructor() {\n    super(emptyInvalidCoordinateSpace);\n  }\n\n  toJSON() {\n    return coordinateSpaceToJson(this.value);\n  }\n  reset() {\n    this.value = emptyInvalidCoordinateSpace;\n  }\n  restoreState(obj: any) {\n    this.value = coordinateSpaceFromJson(obj);\n  }\n}\n\nexport interface BoundingBox {\n  lowerBounds: Float64Array;\n  upperBounds: Float64Array;\n}\n\nexport function getCenterBound(lower: number, upper: number) {\n  let x = (lower + upper) / 2;\n  if (!Number.isFinite(x)) x = Math.min(Math.max(0, lower), upper);\n  return x;\n}\n\nexport function getBoundingBoxCenter(out: Float32Array, bounds: BoundingBox): Float32Array {\n  const {lowerBounds, upperBounds} = bounds;\n  const rank = out.length;\n  for (let i = 0; i < rank; ++i) {\n    out[i] = getCenterBound(lowerBounds[i], upperBounds[i]);\n  }\n  return out;\n}\n\nexport interface TransformedBoundingBox {\n  box: BoundingBox;\n\n  /**\n   * Transform from \"box\" coordinate space to target coordinate space.\n   */\n  transform: Float64Array;\n}\n\nexport function makeIdentityTransformedBoundingBox(box: BoundingBox) {\n  const rank = box.lowerBounds.length;\n  return {box, transform: matrix.createIdentity(Float64Array, rank, rank + 1)};\n}\n\nexport function computeCombinedLowerUpperBound(\n    boundingBox: TransformedBoundingBox, outputDimension: number,\n    outputRank: number): {lower: number, upper: number}|undefined {\n  const {\n    box: {lowerBounds: baseLowerBounds, upperBounds: baseUpperBounds},\n    transform,\n  } = boundingBox;\n  const inputRank = baseLowerBounds.length;\n  const stride = outputRank;\n  const offset = transform[stride * inputRank + outputDimension];\n  let targetLower = offset, targetUpper = offset;\n  let hasCoefficient = false;\n  for (let inputDim = 0; inputDim < inputRank; ++inputDim) {\n    let c = transform[stride * inputDim + outputDimension];\n    if (c === 0) continue;\n    const lower = c * baseLowerBounds[inputDim];\n    const upper = c * baseUpperBounds[inputDim];\n    targetLower += Math.min(lower, upper);\n    targetUpper += Math.max(lower, upper);\n    hasCoefficient = true;\n  }\n  if (!hasCoefficient) return undefined;\n  return {lower: targetLower, upper: targetUpper};\n}\n\nexport function computeCombinedBounds(\n    boundingBoxes: readonly TransformedBoundingBox[], outputRank: number): BoundingBox {\n  const lowerBounds = new Float64Array(outputRank);\n  const upperBounds = new Float64Array(outputRank);\n  lowerBounds.fill(Number.NEGATIVE_INFINITY);\n  upperBounds.fill(Number.POSITIVE_INFINITY);\n  for (const boundingBox of boundingBoxes) {\n    for (let outputDim = 0; outputDim < outputRank; ++outputDim) {\n      const result = computeCombinedLowerUpperBound(boundingBox, outputDim, outputRank);\n      if (result === undefined) continue;\n      const {lower: targetLower, upper: targetUpper} = result;\n      lowerBounds[outputDim] = lowerBounds[outputDim] === Number.NEGATIVE_INFINITY ?\n          targetLower :\n          Math.min(lowerBounds[outputDim], targetLower);\n      upperBounds[outputDim] = upperBounds[outputDim] === Number.POSITIVE_INFINITY ?\n          targetUpper :\n          Math.max(upperBounds[outputDim], targetUpper);\n    }\n  }\n  return {lowerBounds, upperBounds};\n}\n\nexport function extendTransformedBoundingBox(\n    boundingBox: TransformedBoundingBox, newOutputRank: number,\n    newOutputDims: readonly number[]): TransformedBoundingBox {\n  const {transform: oldTransform, box} = boundingBox;\n  const oldOutputRank = newOutputDims.length;\n  const inputRank = box.lowerBounds.length;\n  const newTransform = new Float64Array((inputRank + 1) * newOutputRank);\n  for (let oldOutputDim = 0; oldOutputDim < oldOutputRank; ++oldOutputDim) {\n    const newOutputDim = newOutputDims[oldOutputDim];\n    if (newOutputDim === -1) continue;\n    for (let inputDim = 0; inputDim <= inputRank; ++inputDim) {\n      newTransform[inputDim * newOutputRank + newOutputDim] =\n          oldTransform[inputDim * oldOutputRank + oldOutputDim];\n    }\n  }\n  return {\n    transform: newTransform,\n    box,\n  };\n}\n\nexport function makeSingletonDimTransformedBoundingBox(outputRank: number, outputDim: number) {\n  const box = {lowerBounds: Float64Array.of(0), upperBounds: Float64Array.of(1)};\n  const transform = new Float64Array(2 * outputRank);\n  transform[outputDim] = 1;\n  return {transform, box};\n}\n\nexport function extendTransformedBoundingBoxUpToRank(\n    boundingBox: TransformedBoundingBox, oldOutputRank: number,\n    newOutputRank: number): TransformedBoundingBox {\n  if (oldOutputRank === newOutputRank) return boundingBox;\n  const {box} = boundingBox;\n  const inputRank = box.lowerBounds.length;\n  const transform = new Float64Array((inputRank + 1) * newOutputRank);\n  matrix.copy(\n      transform, newOutputRank, boundingBox.transform, oldOutputRank, oldOutputRank, inputRank + 1);\n  return {box, transform};\n}\n\nexport interface CoordinateSpaceTransform {\n  /**\n   * Equal to `outputSpace.rank`.\n   */\n  readonly rank: number;\n\n  /**\n   * The source rank, which is <= rank.  Input dimensions >= sourceRank are synthetic and serve only\n   * to embed the source data in a larger view space.\n   */\n  readonly sourceRank: number;\n\n  /**\n   * May have rank less than `outputSpace.rank`, in which case additional unnamed dimensions with\n   * range `[0, 1)` are implicitly added.\n   */\n  readonly inputSpace: CoordinateSpace;\n\n  readonly outputSpace: CoordinateSpace;\n\n  /**\n   * `(rank + 1) * (rank + 1)` homogeneous column-major transformation matrix, where columns\n   * correspond to input dimensions and rows correspond to output dimensions.\n   */\n  readonly transform: Float64Array;\n}\n\nexport function coordinateSpaceTransformsEquivalent(\n    defaultTransform: CoordinateSpaceTransform, transform: CoordinateSpaceTransform) {\n  const {rank, sourceRank} = defaultTransform;\n  if (rank !== transform.rank || sourceRank !== transform.sourceRank) return false;\n  const {inputSpace: defaultInputSpace} = defaultTransform;\n  const {inputSpace} = transform;\n  if (!arraysEqual(inputSpace.scales, defaultInputSpace.scales) ||\n      !arraysEqual(inputSpace.units, defaultInputSpace.units) ||\n      !arraysEqual(transform.outputSpace.names, defaultTransform.outputSpace.names)) {\n    return false;\n  }\n  return isTransformDerivableFromDefault(\n      defaultTransform.transform, rank, defaultTransform.outputSpace.scales, transform.transform,\n      rank, transform.outputSpace.scales);\n}\n\nexport function makeIdentityTransform(inputSpace: CoordinateSpace): CoordinateSpaceTransform {\n  return {\n    rank: inputSpace.rank,\n    sourceRank: inputSpace.rank,\n    inputSpace,\n    outputSpace: inputSpace,\n    transform: matrix.createIdentity(Float64Array, inputSpace.rank + 1),\n  };\n}\n\nfunction transformBoundingBox(\n    boundingBox: TransformedBoundingBox, transform: Float64Array, sourceScales: Float64Array,\n    targetScales: Float64Array): TransformedBoundingBox {\n  let {transform: oldBoxTransform, box} = boundingBox;\n  const inputRank = boundingBox.box.lowerBounds.length;\n  const targetRank = targetScales.length;\n  // transform is a column-major homogeneous `(rows=targetRank+1, cols=targetRank+1)` matrix.\n  // oldBoxTransform is a column-major `(rows=targetRank, cols=inputRank+1)` matrix.\n  // newBoxTransform is a column-major `(rows=targetRank, cols=inputRank+1)` matrix.\n  const newBoxTransform = new Float64Array((inputRank + 1) * targetRank);\n  for (let targetDim = 0; targetDim < targetRank; ++targetDim) {\n    const targetScale = targetScales[targetDim];\n    // Compute the rotation/scaling components\n    for (let inputDim = 0; inputDim < inputRank; ++inputDim) {\n      let sum = 0;\n      for (let sourceDim = 0; sourceDim < targetRank; ++sourceDim) {\n        const sourceScale = sourceScales[sourceDim];\n        sum += transform[(targetRank + 1) * sourceDim + targetDim] *\n            oldBoxTransform[targetRank * inputDim + sourceDim] * (sourceScale / targetScale);\n      }\n      newBoxTransform[targetRank * inputDim + targetDim] = sum;\n    }\n    // Compute the translation component\n    let sum = transform[(targetRank + 1) * targetRank + targetDim];\n    for (let sourceDim = 0; sourceDim < targetRank; ++sourceDim) {\n      const sourceScale = sourceScales[sourceDim];\n      sum += transform[(targetRank + 1) * sourceDim + targetDim] *\n          oldBoxTransform[targetRank * inputRank + sourceDim] * (sourceScale / targetScale);\n    }\n    newBoxTransform[inputRank * targetRank + targetDim] = sum;\n  }\n  return {\n    transform: newBoxTransform,\n    box,\n  };\n}\n\nfunction getTransformedBoundingBoxes(\n    inputSpace: CoordinateSpace, transform: Float64Array, outputScales: Float64Array) {\n  return inputSpace.boundingBoxes.map(\n      boundingBox => transformBoundingBox(boundingBox, transform, inputSpace.scales, outputScales));\n}\n\nexport function getOutputSpaceWithTransformedBoundingBoxes(\n    inputSpace: CoordinateSpace, transform: Float64Array, oldOutputSpace: CoordinateSpace) {\n  const newSpace = makeCoordinateSpace({\n    valid: inputSpace.valid,\n    rank: oldOutputSpace.rank,\n    ids: oldOutputSpace.ids,\n    names: oldOutputSpace.names,\n    timestamps: oldOutputSpace.timestamps,\n    scales: oldOutputSpace.scales,\n    units: oldOutputSpace.units,\n    boundingBoxes: getTransformedBoundingBoxes(inputSpace, transform, oldOutputSpace.scales),\n    coordinateArrays: oldOutputSpace.coordinateArrays,\n  });\n  if (coordinateSpacesEqual(newSpace, oldOutputSpace)) return oldOutputSpace;\n  return newSpace;\n}\n\nexport function isValidDimensionName(name: string, allowNumericalNames = false) {\n  if (allowNumericalNames) {\n    const n = Number(name);\n    if (Number.isInteger(n) && n >= 0) return true;\n  }\n  return name.match(/^[a-zA-Z][a-zA-Z_0-9]*['^]?$/) !== null;\n}\n\nexport function validateDimensionNames(names: string[], allowNumericalNames = false) {\n  const seenNames = new Set<string>();\n  for (const name of names) {\n    if (!isValidDimensionName(name, allowNumericalNames)) return false;\n    if (seenNames.has(name)) return false;\n    seenNames.add(name);\n  }\n  return true;\n}\n\nexport function getDimensionNameValidity(names: readonly string[]): boolean[] {\n  const rank = names.length;\n  const isValid = new Array<boolean>(rank);\n  isValid.fill(true);\n  for (let i = 0; i < rank; ++i) {\n    const name = names[i];\n    if (!isValidDimensionName(name)) {\n      isValid[i] = false;\n      continue;\n    }\n    const otherIndex = names.indexOf(name, i + 1);\n    if (otherIndex !== -1) {\n      isValid[i] = false;\n      isValid[otherIndex] = false;\n    }\n  }\n  return isValid;\n}\n\nexport function isLocalDimension(name: string) {\n  return name.endsWith('\\'');\n}\n\nexport function isLocalOrChannelDimension(name: string) {\n  return name.endsWith('\\'') || name.endsWith('^');\n}\n\nexport function isChannelDimension(name: string) {\n  return name.endsWith('^');\n}\n\nexport function isGlobalDimension(name: string) {\n  return !isLocalOrChannelDimension(name);\n}\n\nexport function convertTransformOutputScales(\n    existingTransform: Float64Array, existingOutputScales: Float64Array,\n    newOutputScales: Float64Array) {\n  const newTransform = new Float64Array(existingTransform);\n  const rank = existingOutputScales.length;\n  const baseIndex = (rank + 1) * rank;\n  for (let i = 0; i < rank; ++i) {\n    newTransform[baseIndex + i] *= (existingOutputScales[i] / newOutputScales[i]);\n  }\n  return newTransform;\n}\n\nfunction isTransformDerivableFromDefault(\n    defaultTransform: Float64Array, defaultRank: number, defaultOutputScales: Float64Array,\n    newTransform: Float64Array, newRank: number, newOutputScales: Float64Array) {\n  // Verify that matched linear portion is equal.\n  if (!matrix.equal(\n          defaultTransform, defaultRank + 1, newTransform, newRank + 1, defaultRank, defaultRank))\n    return false;\n\n  // Verify that common translation is equivalent.\n  for (let i = 0; i < defaultRank; ++i) {\n    const aValue = defaultTransform[(defaultRank + 1) * defaultRank + i];\n    const bValue = newTransform[(newRank + 1) * newRank + i];\n    if (aValue * (defaultOutputScales[i] / newOutputScales[i]) !== bValue) return false;\n  }\n\n  // Verify that extended translation is 0.\n  for (let i = defaultRank; i < newRank; ++i) {\n    if (newTransform[(newRank + 1) * newRank + i] !== 0) return false;\n  }\n\n  // Verify that extended linear portion is identity.\n  for (let i = defaultRank; i < newRank; ++i) {\n    for (let j = 0; j < defaultRank; ++j) {\n      if (newTransform[(newRank + 1) * j + i] !== 0) return false;\n    }\n    for (let j = 0; j < newRank; ++j) {\n      const coeff = newTransform[(newRank + 1) * i + j];\n      if (i === j) {\n        if (coeff !== 1) return false;\n      } else {\n        if (coeff !== 0) return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport function makeDimensionNameUnique(name: string, existingNames: readonly string[]) {\n  if (!existingNames.includes(name)) return name;\n  const [, prefix, suffix] = name.match(/^([^']*)('?)$/)!;\n  for (let i = 0;; ++i) {\n    const newName = `${prefix}${i}${suffix}`;\n    if (!existingNames.includes(newName)) return newName;\n  }\n}\n\nexport function remapTransformInputSpace(\n    old: CoordinateSpaceTransform, inputSpace: CoordinateSpace): CoordinateSpaceTransform {\n  const {inputSpace: oldInputSpace, transform: oldTransform} = old;\n  const {ids: oldInputDimensionIds, rank: oldRank} = oldInputSpace;\n  const {\n    rank: newRank,\n    names: newInputDimensionNames,\n    units: newInputUnits,\n    scales: newInputScales\n  } = inputSpace;\n  const removedOldInputIndices = new Array(oldRank);\n  removedOldInputIndices.fill(true);\n  const addedInputDimensionIndices: number[] = [];\n  const newToOldInputDimensionIndices: number[] = inputSpace.ids.map((id, i) => {\n    const oldIndex = oldInputDimensionIds.indexOf(id);\n    if (oldIndex !== -1) {\n      removedOldInputIndices[oldIndex] = false;\n    } else {\n      addedInputDimensionIndices.push(i);\n    }\n    return oldIndex;\n  });\n  const {outputSpace: oldOutputSpace} = old;\n  const {\n    names: oldOutputDimensionNames,\n    units: oldOutputUnits,\n    scales: oldOutputScales,\n    ids: oldOutputDimensionIds,\n    timestamps: oldOutputTimestamps,\n    coordinateArrays: oldOutputCoordinateArrays,\n  } = oldOutputSpace;\n  // For now just use a simple mapping.\n  const removedOldOutputIndices = removedOldInputIndices;\n  const outputDimensionNames: string[] = [];\n  const outputUnits: string[] = [];\n  const outputScales = new Float64Array(newRank);\n  const outputDimensionIds: DimensionId[] = [];\n  const outputDimensionTimestamps: number[] = [];\n  const outputCoordinateArrays = new Array<CoordinateArray|undefined>(newRank);\n  let newOutputDim = 0;\n  const newTransform = new Float64Array((newRank + 1) ** 2);\n  newTransform[newTransform.length - 1] = 1;\n  for (let oldOutputDim = 0; oldOutputDim < oldRank; ++oldOutputDim) {\n    if (removedOldOutputIndices[oldOutputDim]) continue;\n    outputDimensionNames[newOutputDim] = oldOutputDimensionNames[oldOutputDim];\n    outputDimensionIds[newOutputDim] = oldOutputDimensionIds[oldOutputDim];\n    outputUnits[newOutputDim] = oldOutputUnits[oldOutputDim];\n    outputScales[newOutputDim] = oldOutputScales[oldOutputDim];\n    outputDimensionTimestamps[newOutputDim] = oldOutputTimestamps[oldOutputDim];\n    outputCoordinateArrays[newOutputDim] = oldOutputCoordinateArrays[oldOutputDim];\n    for (let newInputDim = 0; newInputDim < newRank; ++newInputDim) {\n      const oldInputDim = newToOldInputDimensionIndices[newInputDim];\n      if (oldInputDim === -1) continue;\n      newTransform[newInputDim * (newRank + 1) + newOutputDim] =\n          oldTransform[oldInputDim * (oldRank + 1) + oldOutputDim];\n    }\n    newTransform[newRank * (newRank + 1) + newOutputDim] =\n        oldTransform[oldRank * (oldRank + 1) + oldOutputDim];\n    ++newOutputDim;\n  }\n  for (const newInputDim of addedInputDimensionIndices) {\n    outputDimensionIds[newOutputDim] = newDimensionId();\n    outputDimensionNames[newOutputDim] =\n        makeDimensionNameUnique(newInputDimensionNames[newInputDim], outputDimensionNames);\n    outputScales[newOutputDim] = newInputScales[newInputDim];\n    outputUnits[newOutputDim] = newInputUnits[newInputDim];\n    newTransform[newInputDim * (newRank + 1) + newOutputDim] = 1;\n    ++newOutputDim;\n  }\n  const outputSpace = makeCoordinateSpace({\n    valid: inputSpace.valid,\n    rank: newRank,\n    names: outputDimensionNames,\n    ids: outputDimensionIds,\n    timestamps: outputDimensionTimestamps,\n    units: outputUnits,\n    scales: outputScales,\n    boundingBoxes: getTransformedBoundingBoxes(inputSpace, newTransform, outputScales),\n    coordinateArrays: outputCoordinateArrays,\n  });\n  return {\n    rank: newRank,\n    sourceRank: old.sourceRank,\n    inputSpace,\n    outputSpace,\n    transform: newTransform\n  };\n}\n\nfunction normalizeCoordinateSpaceTransform(value: CoordinateSpaceTransform) {\n  const outputSpace = getOutputSpaceWithTransformedBoundingBoxes(\n      value.inputSpace, value.transform, value.outputSpace);\n  if (outputSpace === value.outputSpace) return value;\n  return {\n    rank: value.rank,\n    sourceRank: value.sourceRank,\n    inputSpace: value.inputSpace,\n    transform: value.transform,\n    outputSpace,\n  };\n}\n\nexport class WatchableCoordinateSpaceTransform implements\n    Trackable, WatchableValueInterface<CoordinateSpaceTransform> {\n  private value_: CoordinateSpaceTransform|undefined = undefined;\n  readonly outputSpace: WatchableValueInterface<CoordinateSpace>;\n  readonly inputSpace: WatchableValueInterface<CoordinateSpace>;\n  changed = new NullarySignal();\n  private inputSpaceChanged = new NullarySignal();\n  readonly defaultTransform: CoordinateSpaceTransform;\n\n  constructor(\n      defaultTransform: CoordinateSpaceTransform,\n      public readonly mutableSourceRank: boolean = false) {\n    this.defaultTransform = normalizeCoordinateSpaceTransform(defaultTransform);\n    const self = this;\n    this.outputSpace = {\n      changed: self.changed,\n      get value() {\n        return self.value.outputSpace;\n      },\n      set value(newOutputSpace: CoordinateSpace) {\n        const {value} = self;\n        if (coordinateSpacesEqual(value.outputSpace, newOutputSpace)) return;\n        if (value.rank !== newOutputSpace.rank) return;\n        const transform = convertTransformOutputScales(\n            value.transform, value.outputSpace.scales, newOutputSpace.scales);\n        self.value_ = {\n          sourceRank: value.sourceRank,\n          rank: value.rank,\n          inputSpace: value.inputSpace,\n          outputSpace: getOutputSpaceWithTransformedBoundingBoxes(\n              value.inputSpace, transform, newOutputSpace),\n          transform,\n        };\n        self.changed.dispatch();\n      },\n    };\n    this.inputSpace = {\n      changed: self.inputSpaceChanged,\n      get value() {\n        return self.value.inputSpace;\n      },\n      set value(newInputSpace: CoordinateSpace) {\n        const {value} = self;\n        if (coordinateSpacesEqual(value.inputSpace, newInputSpace)) return;\n        self.value_ = remapTransformInputSpace(value, newInputSpace);\n        self.inputSpaceChanged.dispatch();\n        self.changed.dispatch();\n      },\n    };\n  }\n\n  set value(value: CoordinateSpaceTransform) {\n    const existingValue = this.value;\n    if (value === existingValue) return;\n    this.value_ = normalizeCoordinateSpaceTransform(value);\n    if (value.inputSpace !== existingValue.inputSpace) {\n      this.inputSpaceChanged.dispatch();\n    }\n    this.changed.dispatch();\n  }\n\n  get value(): CoordinateSpaceTransform {\n    let {value_: value} = this;\n    if (value === undefined) {\n      value = this.value_ = this.defaultTransform;\n    }\n    return value;\n  }\n\n  reset() {\n    if (this.value_ === this.defaultTransform) return;\n    this.value_ = this.defaultTransform;\n    this.inputSpaceChanged.dispatch();\n    this.changed.dispatch();\n  }\n\n  get defaultInputSpace() {\n    return this.defaultTransform.inputSpace;\n  }\n\n  get spec(): Readonly<CoordinateTransformSpecification>|undefined {\n    const {value} = this;\n    const {rank, transform, inputSpace, outputSpace, sourceRank} = value;\n    const {defaultTransform, mutableSourceRank} = this;\n    const {\n      inputSpace: defaultInputSpace,\n      rank: defaultRank,\n      transform: defaultTransformMatrix,\n      outputSpace: defaultOutputSpace\n    } = defaultTransform;\n    const {units, scales} = inputSpace;\n    const inputSpaceSame = sourceRank === rank &&\n        arraysEqual(scales, mutableSourceRank ? outputSpace.scales : defaultInputSpace.scales) &&\n        arraysEqual(units, mutableSourceRank ? outputSpace.units : defaultInputSpace.units);\n    const transformSame = isTransformDerivableFromDefault(\n        defaultTransformMatrix, defaultRank, defaultOutputSpace.scales, transform, rank,\n        outputSpace.scales);\n    const outputNamesSame = arraysEqual(defaultOutputSpace.names, outputSpace.names);\n    if (transformSame && outputNamesSame && inputSpaceSame) {\n      return undefined;\n    }\n    return {\n      sourceRank,\n      transform: transformSame ? undefined : transform,\n      outputSpace: value.outputSpace,\n      inputSpace: inputSpaceSame ? undefined : inputSpace,\n    };\n  }\n\n  set transform(transform: Float64Array) {\n    const {value} = this;\n    const {inputSpace} = value;\n    this.value_ = {\n      rank: value.rank,\n      sourceRank: value.sourceRank,\n      inputSpace,\n      transform,\n      outputSpace:\n          getOutputSpaceWithTransformedBoundingBoxes(inputSpace, transform, value.outputSpace),\n    };\n    this.changed.dispatch();\n  }\n\n  set spec(spec: Readonly<CoordinateTransformSpecification>|undefined) {\n    if (spec === undefined) {\n      this.reset();\n      return;\n    }\n    if (this.mutableSourceRank) {\n      const origInputSpace = spec.inputSpace || spec.outputSpace;\n      const rank = origInputSpace.rank;\n      const inputSpace = makeCoordinateSpace({\n        rank,\n        names: origInputSpace.names.map((_, i) => `${i}`),\n        units: origInputSpace.units,\n        scales: origInputSpace.scales,\n        coordinateArrays: origInputSpace.coordinateArrays,\n      });\n      this.value = {\n        rank,\n        transform: spec.transform || matrix.createIdentity(Float64Array, rank + 1),\n        sourceRank: spec.sourceRank,\n        outputSpace: spec.outputSpace,\n        inputSpace\n      };\n      return;\n    }\n    const {\n      inputSpace: defaultInputSpace,\n      sourceRank: defaultSourceRank,\n      outputSpace: defaultOutputSpace,\n      transform: defaultTransformMatrix,\n      rank: defaultRank\n    } = this.defaultTransform;\n    const {\n      inputSpace: specInputSpace,\n      sourceRank: specSourceRank,\n      outputSpace: specOutputSpace,\n      transform: specTransformMatrix\n    } = spec;\n    const specRank = spec.outputSpace.rank;\n    const defaultInputNames = defaultInputSpace.names;\n    const specInputNames = specInputSpace !== undefined ? specInputSpace.names : defaultInputNames;\n    const newToSpecDimensionIndices = new Array<number>(defaultSourceRank);\n    for (let defaultDim = 0; defaultDim < defaultSourceRank; ++defaultDim) {\n      let specDim = specInputNames.indexOf(defaultInputNames[defaultDim]);\n      if (specDim >= specSourceRank) specDim = -1;\n      newToSpecDimensionIndices[defaultDim] = specDim;\n    }\n    const newRank = (specRank - specSourceRank) + defaultSourceRank;\n    for (let i = specSourceRank; i < specRank; ++i) {\n      newToSpecDimensionIndices[defaultSourceRank + i - specSourceRank] = i;\n    }\n    const newInputScales = new Float64Array(newRank);\n    const newInputCoordinateArrays = new Array<CoordinateArray|undefined>(newRank);\n    const newInputUnits: string[] = [];\n    for (let newDim = 0; newDim < defaultSourceRank; ++newDim) {\n      const specDim = newToSpecDimensionIndices[newDim];\n      if (specDim === -1 || specInputSpace === undefined) {\n        newInputScales[newDim] = defaultInputSpace.scales[newDim];\n        newInputUnits[newDim] = defaultInputSpace.units[newDim];\n        newInputCoordinateArrays[newDim] = defaultInputSpace.coordinateArrays[newDim];\n      } else {\n        newInputScales[newDim] = specInputSpace.scales[specDim];\n        newInputUnits[newDim] = specInputSpace.units[specDim];\n        newInputCoordinateArrays[newDim] = mergeOptionalCoordinateArrays(\n            [defaultInputSpace.coordinateArrays[newDim], specInputSpace.coordinateArrays[specDim]]);\n      }\n    }\n    const specInputOrOutputSpace = specInputSpace || specOutputSpace;\n    const newInputNames = defaultInputNames.slice(0, defaultSourceRank);\n    const newOutputNames = defaultOutputSpace.names.slice(0, defaultSourceRank);\n    const newOutputCoordinateArrays =\n        defaultOutputSpace.coordinateArrays.slice(0, defaultSourceRank);\n    const newOutputScales = new Float64Array(newRank);\n    const newOutputUnits: string[] = [];\n    for (let newDim = 0; newDim < newRank; ++newDim) {\n      const specDim = newToSpecDimensionIndices[newDim];\n      if (specDim === -1) {\n        newOutputScales[newDim] = defaultOutputSpace.scales[newDim];\n        newOutputUnits[newDim] = defaultOutputSpace.units[newDim];\n        newOutputCoordinateArrays[newDim] = defaultOutputSpace.coordinateArrays[newDim];\n      } else {\n        newOutputNames[newDim] = specOutputSpace.names[specDim];\n        newOutputUnits[newDim] = specOutputSpace.units[specDim];\n        newOutputScales[newDim] = specOutputSpace.scales[specDim];\n        newOutputCoordinateArrays[newDim] = specOutputSpace.coordinateArrays[specDim];\n      }\n    }\n    if (!validateDimensionNames(newOutputNames)) {\n      // Spec is incompatible, ignore it.\n      this.reset();\n      return;\n    }\n    // Handle singleton dimensions.\n    for (let newDim = defaultSourceRank; newDim < newRank; ++newDim) {\n      const specDim = (newDim - defaultSourceRank) + specSourceRank;\n      newInputScales[newDim] = specInputOrOutputSpace.scales[specDim];\n      newInputUnits[newDim] = specInputOrOutputSpace.units[specDim];\n      newInputNames[newDim] = `${newDim}`;\n    }\n\n    const newTransform = new Float64Array((newRank + 1) ** 2);\n    newTransform[newTransform.length - 1] = 1;\n    for (let newRow = 0; newRow < newRank; ++newRow) {\n      const specRow = newToSpecDimensionIndices[newRow];\n      let value: number;\n      if (specRow === -1 || specTransformMatrix === undefined) {\n        if (newRow >= defaultSourceRank) {\n          value = 0;\n        } else {\n          value = defaultTransformMatrix[defaultRank * (defaultRank + 1) + newRow] *\n              (defaultOutputSpace.scales[newRow] / newOutputScales[newRow]);\n        }\n      } else {\n        value = specTransformMatrix[specRank * (specRank + 1) + specRow];\n      }\n      newTransform[newRank * (newRank + 1) + newRow] = value;\n      for (let newCol = 0; newCol < newRank; ++newCol) {\n        const specCol = newToSpecDimensionIndices[newCol];\n        let value: number;\n        if ((specRow === -1) != (specCol === -1)) {\n          value = 0;\n        } else if (specRow === -1 || specTransformMatrix === undefined) {\n          if (specRow >= defaultSourceRank || specCol >= defaultSourceRank) {\n            value = specRow === specCol ? 1 : 0;\n          } else {\n            value = defaultTransformMatrix[newCol * (defaultRank + 1) + newRow];\n          }\n        } else {\n          value = specTransformMatrix[specCol * (specRank + 1) + specRow];\n        }\n        newTransform[newCol * (newRank + 1) + newRow] = value;\n      }\n    }\n    const boundingBoxes = defaultInputSpace.boundingBoxes.map(\n        boundingBox => extendTransformedBoundingBoxUpToRank(boundingBox, defaultRank, newRank));\n    for (let i = defaultSourceRank; i < newRank; ++i) {\n      boundingBoxes.push(makeSingletonDimTransformedBoundingBox(newRank, i));\n    }\n    // Propagate coordinate arrays from input dimensions to output dimensions.\n    for (let outputDim = 0; outputDim < newRank; ++outputDim) {\n      // Check if this output dimension is identity mapped from a single input dimension.\n      const translation = newTransform[newRank * (newRank + 1) + outputDim];\n      if (translation !== 0) continue;\n      let singleInputDim: number|undefined|null = undefined;\n      for (let inputDim = 0; inputDim < newRank; ++inputDim) {\n        const factor = newTransform[inputDim * (newRank + 1) + outputDim];\n        if (factor === 0) continue;\n        if (factor === 1) {\n          if (singleInputDim === undefined) {\n            // First input dimension that maps to this output dimension.\n            singleInputDim = inputDim;\n          } else {\n            // Multiple input dimensions map to this output dimension.\n            singleInputDim = null;\n            break;\n          }\n        } else {\n          // Non-identity mapping.\n          singleInputDim = null;\n          break;\n        }\n      }\n      if (singleInputDim == null) continue;\n      let coordinateArray = newInputCoordinateArrays[singleInputDim];\n      if (coordinateArray === undefined) continue;\n      if (coordinateArray.explicit) {\n        coordinateArray = {...coordinateArray, explicit: false};\n      }\n      newOutputCoordinateArrays[outputDim] =\n          mergeOptionalCoordinateArrays([coordinateArray, newOutputCoordinateArrays[outputDim]]);\n    }\n    this.value = {\n      rank: newRank,\n      transform: newTransform,\n      sourceRank: defaultSourceRank,\n      outputSpace: makeCoordinateSpace({\n        rank: newRank,\n        names: newOutputNames,\n        scales: newOutputScales,\n        units: newOutputUnits,\n        coordinateArrays: newOutputCoordinateArrays,\n      }),\n      inputSpace: makeCoordinateSpace({\n        rank: newRank,\n        names: newInputNames,\n        scales: newInputScales,\n        units: newInputUnits,\n        coordinateArrays: newInputCoordinateArrays,\n        boundingBoxes,\n      }),\n    };\n  }\n\n  toJSON() {\n    return coordinateTransformSpecificationToJson(this.spec);\n  }\n\n  restoreState(obj: unknown) {\n    this.spec = coordinateTransformSpecificationFromJson(obj);\n  }\n}\n\nexport function expectDimensionName(obj: unknown, allowNumericalNames = false): string {\n  const name = verifyString(obj);\n  if (!isValidDimensionName(name, allowNumericalNames)) {\n    throw new Error(`Invalid dimension name: ${JSON.stringify(name)}`);\n  }\n  return name;\n}\n\nexport function dimensionNamesFromJson(obj: any, allowNumericalNames = false) {\n  const dimensions = parseArray(obj, x => expectDimensionName(x, allowNumericalNames));\n  if (!validateDimensionNames(dimensions, allowNumericalNames)) {\n    throw new Error(`Invalid dimensions: ${JSON.stringify(dimensions)}`);\n  }\n  return dimensions;\n}\n\ninterface BoundCoordinateSpace {\n  space: WatchableValueInterface<CoordinateSpace>;\n  prevValue: CoordinateSpace|undefined;\n  mappedDimensionIds: (DimensionId|undefined)[];\n}\n\nexport class CoordinateSpaceCombiner {\n  private bindings = new Set<BoundCoordinateSpace>();\n\n  private retainCount = 0;\n\n  private prevCombined: CoordinateSpace|undefined = this.combined.value;\n\n  dimensionRefCounts = new Map<string, number>();\n\n  getRenameValidity(newNames: readonly string[]): boolean[] {\n    const existingNames = this.combined.value.names;\n    const validity = getDimensionNameValidity(newNames);\n    const rank = newNames.length;\n    for (let i = 0; i < rank; ++i) {\n      if (!validity[i]) continue;\n      const newName = newNames[i];\n      if (existingNames.includes(newName)) continue;\n      let valid = true;\n      for (const binding of this.bindings) {\n        const otherNames = binding.space.value.names;\n        if (otherNames.includes(newName)) {\n          valid = false;\n          break;\n        }\n      }\n      validity[i] = valid;\n    }\n    return validity;\n  }\n\n  private includeDimensionPredicate_: (name: string) => boolean;\n\n  get includeDimensionPredicate() {\n    return this.includeDimensionPredicate_;\n  }\n  set includeDimensionPredicate(value: (name: string) => boolean) {\n    this.includeDimensionPredicate_ = value;\n    this.update();\n  }\n\n  constructor(\n      public combined: WatchableValueInterface<CoordinateSpace>,\n      includeDimensionPredicate: (name: string) => boolean) {\n    this.includeDimensionPredicate_ = includeDimensionPredicate;\n  }\n\n  private update() {\n    const {combined, bindings} = this;\n    const retainExisting = this.retainCount > 0 ? 1 : 0;\n    if (bindings.size === 0 && !retainExisting) {\n      combined.value = emptyInvalidCoordinateSpace;\n      return;\n    }\n    const include = this.includeDimensionPredicate_;\n    const existing = combined.value;\n    let mergedNames = Array.from(existing.names);\n    let mergedUnits = Array.from(existing.units);\n    let mergedScales = Array.from(existing.scales);\n    let mergedIds = Array.from(existing.ids);\n    let mergedTimestamps = Array.from(existing.timestamps);\n    let dimensionRefs: number[] = existing.names.map(() => retainExisting ? 1 : 0);\n    const bindingCombinedIndices: (number|undefined)[][] = [];\n    let valid = false;\n    for (const binding of bindings) {\n      const {space: {value: space}, prevValue, mappedDimensionIds} = binding;\n      valid = valid || space.valid;\n      const {names, units, scales, ids, timestamps} = space;\n      const newMappedDimensionIds: (DimensionId|undefined)[] = [];\n      const combinedIndices: (number|undefined)[] = [];\n      bindingCombinedIndices.push(combinedIndices);\n      binding.mappedDimensionIds = newMappedDimensionIds;\n      binding.prevValue = space;\n      const rank = names.length;\n      for (let i = 0; i < rank; ++i) {\n        const name = names[i];\n        if (!include(name)) continue;\n        if (prevValue !== undefined) {\n          const id = ids[i];\n          const prevIndex = prevValue.ids.indexOf(id);\n          if (prevIndex !== -1) {\n            const combinedId = mappedDimensionIds[prevIndex];\n            if (combinedId !== undefined) {\n              const combinedIndex = mergedIds.indexOf(combinedId);\n              if (combinedIndex !== -1) {\n                newMappedDimensionIds[i] = combinedId;\n                ++dimensionRefs[combinedIndex];\n                combinedIndices[i] = combinedIndex;\n                const timestamp = timestamps[i];\n                if (timestamp !== undefined && !(timestamp <= mergedTimestamps[combinedIndex])) {\n                  mergedNames[combinedIndex] = name;\n                  mergedScales[combinedIndex] = scales[i];\n                  mergedUnits[combinedIndex] = units[i];\n                  mergedTimestamps[combinedIndex] = timestamp;\n                }\n                continue;\n              }\n            }\n          }\n        }\n        let combinedIndex = mergedNames.indexOf(name);\n        if (combinedIndex !== -1) {\n          newMappedDimensionIds[i] = mergedIds[combinedIndex];\n          ++dimensionRefs[combinedIndex];\n          combinedIndices[i] = combinedIndex;\n          continue;\n        }\n        combinedIndex = mergedNames.length;\n        combinedIndices[i] = combinedIndex;\n        dimensionRefs[combinedIndex] = 1 + retainExisting;\n        mergedNames[combinedIndex] = name;\n        mergedUnits[combinedIndex] = units[i];\n        mergedScales[combinedIndex] = scales[i];\n        mergedTimestamps[combinedIndex] = timestamps[i];\n        const combinedId = newDimensionId();\n        mergedIds[combinedIndex] = combinedId;\n        newMappedDimensionIds[i] = combinedId;\n      }\n    }\n    // Propagate names, units, and scales back\n    const {dimensionRefCounts} = this;\n    dimensionRefCounts.clear();\n    let bindingIndex = 0;\n    let newRank = mergedNames.length;\n    for (const binding of bindings) {\n      const {space: {value: space}} = binding;\n      const combinedIndices = bindingCombinedIndices[bindingIndex++];\n      const {rank} = space;\n      const names = Array.from(space.names);\n      const timestamps = Array.from(space.timestamps);\n      const scales = Float64Array.from(space.scales);\n      const units = Array.from(space.units);\n      for (let i = 0; i < rank; ++i) {\n        const combinedIndex = combinedIndices[i];\n        if (combinedIndex === undefined) continue;\n        units[i] = mergedUnits[combinedIndex];\n        scales[i] = mergedScales[combinedIndex];\n        timestamps[i] = mergedTimestamps[combinedIndex];\n        names[i] = mergedNames[combinedIndex];\n      }\n      for (const name of names) {\n        let count = dimensionRefCounts.get(name);\n        if (count === undefined) {\n          count = 1;\n        } else {\n          ++count;\n        }\n        dimensionRefCounts.set(name, count);\n      }\n      if (!arraysEqual(units, space.units) || !arraysEqual(scales, space.scales) ||\n          !arraysEqual(names, space.names) || !arraysEqual(timestamps, space.timestamps)) {\n        const newSpace = makeCoordinateSpace({\n          valid: space.valid,\n          ids: space.ids,\n          scales,\n          units,\n          names,\n          timestamps,\n          boundingBoxes: space.boundingBoxes,\n          coordinateArrays: space.coordinateArrays,\n        });\n        binding.prevValue = newSpace;\n        binding.space.value = newSpace;\n      }\n    }\n\n    {\n      for (let i = 0; i < newRank; ++i) {\n        if (!include(mergedNames[i])) {\n          dimensionRefs[i] = 0;\n        }\n      }\n      const hasRefs = (_: any, i: number) => dimensionRefs[i] !== 0;\n      mergedNames = mergedNames.filter(hasRefs);\n      mergedUnits = mergedUnits.filter(hasRefs);\n      mergedScales = mergedScales.filter(hasRefs);\n      mergedIds = mergedIds.filter(hasRefs);\n      mergedTimestamps = mergedTimestamps.filter(hasRefs);\n      dimensionRefs = dimensionRefs.filter(hasRefs);\n      newRank = mergedNames.length;\n    }\n\n    const mergedBoundingBoxes: TransformedBoundingBox[] = [];\n    const allCoordinateArrays = new Array<CoordinateArray[]|undefined>(newRank);\n    // Include any explicit coordinate arrays from `existing`.\n    for (let i = 0, existingRank = existing.rank; i < existingRank; ++i) {\n      const coordinateArray = existing.coordinateArrays[i];\n      if (!coordinateArray?.explicit) continue;\n      const newDim = mergedIds.indexOf(existing.ids[i]);\n      if (newDim === -1) continue;\n      allCoordinateArrays[newDim] = [coordinateArray];\n    }\n    for (const binding of bindings) {\n      const {space: {value: space}} = binding;\n      const {rank, boundingBoxes, coordinateArrays} = space;\n      const newDims = space.names.map(x => mergedNames.indexOf(x));\n      for (const oldBoundingBox of boundingBoxes) {\n        mergedBoundingBoxes.push(extendTransformedBoundingBox(oldBoundingBox, newRank, newDims));\n      }\n      for (let i = 0; i < rank; ++i) {\n        const coordinateArray = coordinateArrays[i];\n        if (coordinateArray === undefined) continue;\n        const newDim = newDims[i];\n        const mergedList = allCoordinateArrays[newDim];\n        if (mergedList === undefined) {\n          allCoordinateArrays[newDim] = [coordinateArray];\n        } else {\n          mergedList.push(coordinateArray);\n        }\n      }\n    }\n    const mergedCoordinateArrays = new Array<CoordinateArray|undefined>(newRank);\n    for (let i = 0; i < newRank; ++i) {\n      const mergedList = allCoordinateArrays[i];\n      if (mergedList === undefined) continue;\n      mergedCoordinateArrays[i] = mergeCoordinateArrays(mergedList);\n    }\n    const newCombined = makeCoordinateSpace({\n      valid,\n      ids: mergedIds,\n      names: mergedNames,\n      units: mergedUnits,\n      scales: new Float64Array(mergedScales),\n      boundingBoxes: mergedBoundingBoxes,\n      coordinateArrays: mergedCoordinateArrays,\n    });\n    if (retainExisting) {\n      for (let i = 0; i < newRank; ++i) {\n        --dimensionRefs[i];\n      }\n    }\n    if (!coordinateSpacesEqual(existing, newCombined)) {\n      this.prevCombined = newCombined;\n      combined.value = newCombined;\n    }\n  }\n\n  private handleCombinedChanged = () => {\n    if (this.combined.value === this.prevCombined) return;\n    this.update();\n  };\n\n  retain() {\n    ++this.retainCount;\n    return () => {\n      if (--this.retainCount === 0) {\n        this.update();\n      }\n    };\n  }\n\n  bind(space: WatchableValueInterface<CoordinateSpace>) {\n    const binding = {space, mappedDimensionIds: [], prevValue: undefined};\n    const {bindings} = this;\n    if (bindings.size === 0) {\n      this.combined.changed.add(this.handleCombinedChanged);\n    }\n    bindings.add(binding);\n\n    const changedDisposer = space.changed.add(() => {\n      if (space.value === binding.prevValue) return;\n      this.update();\n    });\n    const disposer = () => {\n      changedDisposer();\n      const {bindings} = this;\n      bindings.delete(binding);\n      if (bindings.size === 0) {\n        this.combined.changed.remove(this.handleCombinedChanged);\n      }\n      this.update();\n    };\n    this.update();\n    return disposer;\n  }\n}\n\nexport function homogeneousTransformSubmatrix<T extends TypedArray>(\n    constructor: {new (n: number): T}, oldTransform: TypedArray, oldRank: number,\n    oldRows: readonly number[], oldCols: readonly number[]): T {\n  const newRank = oldCols.length;\n  const newTransform = new constructor((newRank + 1) ** 2);\n  newTransform[newTransform.length - 1] = 1;\n  for (let newRow = 0; newRow < newRank; ++newRow) {\n    const oldRow = oldRows[newRow];\n    newTransform[(newRank + 1) * newRank + newRow] = oldTransform[(oldRank + 1) * oldRank + oldRow];\n    for (let newCol = 0; newCol < newRank; ++newCol) {\n      const oldCol = oldCols[newCol];\n      newTransform[(newRank + 1) * newCol + newRow] = oldTransform[(oldRank + 1) * oldCol + oldRow];\n    }\n  }\n  return newTransform;\n}\n\nexport interface CoordinateTransformSpecification {\n  sourceRank: number;\n  transform: Float64Array|undefined;\n  inputSpace: CoordinateSpace|undefined;\n  outputSpace: CoordinateSpace;\n}\n\nexport function coordinateTransformSpecificationFromLegacyJson(obj: unknown):\n    CoordinateTransformSpecification|undefined {\n  if (obj === undefined) return undefined;\n  const transform = new Float64Array(16);\n  if (Array.isArray(obj)) {\n    if (obj.length === 16) {\n      for (let i = 0; i < 4; ++i) {\n        for (let j = 0; j < 4; ++j) {\n          transform[i * 4 + j] = verifyFiniteFloat(obj[j * 4 + i]);\n        }\n      }\n    } else {\n      expectArray(obj, 4);\n      for (let i = 0; i < 4; ++i) {\n        const row = expectArray(obj[i], 4);\n        for (let j = 0; j < 4; ++j) {\n          transform[j * 4 + i] = verifyFiniteFloat(row[j]);\n        }\n      }\n    }\n  } else {\n    verifyObject(obj);\n    const rotation = quat.create();\n    const translation = vec3.create();\n    const scale = vec3.fromValues(1, 1, 1);\n    verifyOptionalObjectProperty(obj, 'rotation', x => {\n      parseFiniteVec(rotation, x);\n      quat.normalize(rotation, rotation);\n    });\n    verifyOptionalObjectProperty(obj, 'translation', x => {\n      parseFiniteVec(translation, x);\n    });\n    verifyOptionalObjectProperty(obj, 'scale', x => {\n      parseFiniteVec(scale, x);\n    });\n    const tempMat4 = mat4.create();\n    mat4.fromRotationTranslationScale(tempMat4, rotation, translation, scale);\n    transform.set(tempMat4);\n  }\n  return {\n    sourceRank: 3,\n    transform,\n    outputSpace: makeCoordinateSpace({\n      valid: true,\n      names: ['x', 'y', 'z'],\n      units: ['m', 'm', 'm'],\n      scales: Float64Array.of(1e-9, 1e-9, 1e-9)\n    }),\n    inputSpace: undefined,\n  };\n}\n\nexport function coordinateTransformSpecificationFromJson(j: unknown):\n    CoordinateTransformSpecification|undefined {\n  if (j === undefined) return undefined;\n  const obj = verifyObject(j);\n  const outputSpace = verifyObjectProperty(obj, 'outputDimensions', coordinateSpaceFromJson);\n  const rank = outputSpace.rank;\n  const sourceRank = verifyObjectProperty(obj, 'sourceRank', rankObj => {\n    if (rankObj === undefined) return rank;\n    if (!Number.isInteger(rankObj) || rankObj < 0 || rankObj > rank) {\n      throw new Error(\n          `Expected integer in range [0, ${rank}] but received: ${JSON.stringify(rankObj)}`);\n    }\n    return rankObj as number;\n  });\n  const inputSpace = verifyOptionalObjectProperty(obj, 'inputDimensions', inputSpaceObj => {\n    const space = coordinateSpaceFromJson(inputSpaceObj, true);\n    if (space.rank !== rank) {\n      throw new Error(`Expected rank of ${rank}, but received rank of: ${space.rank}`);\n    }\n    return space;\n  });\n  const transform = verifyOptionalObjectProperty(obj, 'matrix', x => {\n    const transform = new Float64Array((rank + 1) ** 2);\n    const a = expectArray(x, rank);\n    transform[transform.length - 1] = 1;\n    for (let i = 0; i < rank; ++i) {\n      try {\n        const row = expectArray(a[i], rank + 1);\n        for (let j = 0; j <= rank; ++j) {\n          transform[(rank + 1) * j + i] = verifyFiniteFloat(row[j]);\n        }\n      } catch (e) {\n        throw new Error(`Error in row ${i}: ${e.message}`);\n      }\n    }\n    return transform;\n  });\n  return {transform, outputSpace, inputSpace, sourceRank};\n}\n\nexport function coordinateTransformSpecificationToJson(spec: CoordinateTransformSpecification|\n                                                       undefined) {\n  if (spec === undefined) return undefined;\n  const {transform, outputSpace, inputSpace, sourceRank} = spec;\n  let m: number[][]|undefined;\n  const rank = outputSpace.rank;\n  if (transform !== undefined) {\n    m = [];\n    for (let i = 0; i < rank; ++i) {\n      const row: number[] = [];\n      m[i] = row;\n      for (let j = 0; j <= rank; ++j) {\n        row[j] = transform[(rank + 1) * j + i];\n      }\n    }\n  }\n  return {\n    sourceRank: sourceRank === rank ? undefined : sourceRank,\n    matrix: m,\n    outputDimensions: coordinateSpaceToJson(outputSpace),\n    inputDimensions: inputSpace === undefined ? undefined : coordinateSpaceToJson(inputSpace),\n  };\n}\n\nexport function permuteTransformedBoundingBox(\n    boundingBox: TransformedBoundingBox, newToOld: readonly number[],\n    oldOutputRank: number): TransformedBoundingBox|undefined {\n  const {box, transform} = boundingBox;\n  const inputRank = boundingBox.box.lowerBounds.length;\n  const outputRank = newToOld.length;\n  const newTransform = new Float64Array((inputRank + 1) * outputRank);\n  matrix.permuteRows(newTransform, outputRank, transform, oldOutputRank, newToOld, inputRank + 1);\n  if (newTransform.every(x => x === 0)) return undefined;\n  return {\n    transform: newTransform,\n    box,\n  };\n}\n\nexport function permuteCoordinateSpace(existing: CoordinateSpace, newToOld: readonly number[]) {\n  const {ids, names, scales, units, timestamps, coordinateArrays} = existing;\n  return makeCoordinateSpace({\n    rank: newToOld.length,\n    valid: existing.valid,\n    ids: newToOld.map(i => ids[i]),\n    names: newToOld.map(i => names[i]),\n    timestamps: newToOld.map(i => timestamps[i]),\n    scales: Float64Array.from(newToOld, i => scales[i]),\n    units: newToOld.map(i => units[i]),\n    coordinateArrays: newToOld.map(i => coordinateArrays[i]),\n    boundingBoxes:\n        existing.boundingBoxes.map(b => permuteTransformedBoundingBox(b, newToOld, existing.rank))\n            .filter(b => b !== undefined) as TransformedBoundingBox[],\n  });\n}\n\nexport function insertDimensionAt(\n    existing: CoordinateSpace, targetIndex: number, sourceIndex: number) {\n  if (targetIndex === sourceIndex) return existing;\n  return permuteCoordinateSpace(\n      existing, getInsertPermutation(existing.rank, sourceIndex, targetIndex));\n}\n\nexport function getInferredOutputScale(transform: CoordinateSpaceTransform, outputDim: number):\n    {scale: number, unit: string}|undefined {\n  const {transform: transformMatrix, rank} = transform;\n  const inputDims = getDependentTransformInputDimensions(transformMatrix, rank, [outputDim]);\n  if (inputDims.length !== 1) return undefined;\n  const [inputDim] = inputDims;\n  const coeff = Math.abs(transformMatrix[(rank + 1) * inputDim + outputDim]);\n  const {inputSpace} = transform;\n  return {scale: inputSpace.scales[inputDim] * coeff, unit: inputSpace.units[inputDim]};\n}\n\n\nexport function getDefaultInputScale(\n    transform: WatchableCoordinateSpaceTransform, inputDim: number): {scale: number, unit: string}|\n    undefined {\n  const {scales: defaultScales, units: defaultUnits} = transform.defaultInputSpace;\n  return (inputDim < defaultScales.length) ?\n      {scale: defaultScales[inputDim], unit: defaultUnits[inputDim]} :\n      undefined;\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CoordinateSpace, CoordinateSpaceTransform, emptyValidCoordinateSpace, homogeneousTransformSubmatrix} from 'neuroglancer/coordinate_transform';\nimport {DisplayDimensionRenderInfo} from 'neuroglancer/navigation_state';\nimport {CachedWatchableValue, constantWatchableValue, makeCachedDerivedWatchableValue, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {arraysEqual, scatterUpdate} from 'neuroglancer/util/array';\nimport {ValueOrError} from 'neuroglancer/util/error';\nimport {mat4, vec3} from 'neuroglancer/util/geom';\nimport {getDependentTransformInputDimensions} from 'neuroglancer/util/geom';\nimport * as matrix from 'neuroglancer/util/matrix';\nimport * as vector from 'neuroglancer/util/vector';\nimport {prod} from 'neuroglancer/util/vector';\n\n/**\n * Specifies coordinate transform information for a RenderLayer.\n */\nexport interface RenderLayerTransform {\n  /**\n   * Rank of chunk/model/layer subspace used by this RenderLayer, including any additional `[0,1)`\n   * padding dimensions.\n   */\n  rank: number;\n\n  /**\n   * Rank of chunk/model/layer space, excluding any padding dimensions.\n   */\n  unpaddedRank: number;\n\n  /**\n   * Specifies for each local user layer dimension the corresponding \"render layer\" dimension.  A\n   * value of `-1` indicates there is no corresponding \"render layer\" dimension.  The combined\n   * values of `localToRenderLayerDimensions` and `globalToRenderLayerDimensions` that are not `-1`\n   * must be distinct and partition `[0, ..., rank)`, where `rank` is the rank of the \"model\"\n   * coordinate space.\n   */\n  localToRenderLayerDimensions: readonly number[];\n\n  /**\n   * Specifies for each global dimension the corresponding \"render layer\" dimension.  A value of\n   * `-1` indicates there is no corresponding \"render layer\" dimension.\n   */\n  globalToRenderLayerDimensions: readonly number[];\n\n  /**\n   * Specifies for each channel dimension the corresponding \"render layer\" dimension.  A value of\n   * `-1` indicates there is no corresponding \"render layer\" dimension.\n   */\n  channelToRenderLayerDimensions: readonly number[];\n\n  channelToModelDimensions: readonly number[];\n\n  channelSpaceShape: Uint32Array;\n\n  /**\n   * Homogeneous transform from \"model\" coordinate space to \"render layer\" coordinate space.\n   */\n  modelToRenderLayerTransform: Float32Array;\n\n  modelDimensionNames: readonly string[];\n  layerDimensionNames: readonly string[];\n}\n\nexport interface ChannelSpace {\n  channelCoordinateSpace: CoordinateSpace;\n  // Shape of multi-dimensional channel space.\n  shape: Uint32Array;\n  // Total number of channels, equal to product of `shape`.\n  numChannels: number;\n  // Row-major array of shape `[count, rank]` specifying the coordinates for each flattened channel.\n  // Channels are ordered in Fortran order.\n  coordinates: Uint32Array;\n}\n\nexport const zeroRankChannelSpace: ChannelSpace = {\n  channelCoordinateSpace: emptyValidCoordinateSpace,\n  shape: new Uint32Array(0),\n  numChannels: 1,\n  coordinates: new Uint32Array(0),\n};\n\nexport function getChannelSpace(channelCoordinateSpace: CoordinateSpace): ChannelSpace {\n  const {rank} = channelCoordinateSpace;\n  const {bounds: {lowerBounds, upperBounds}} = channelCoordinateSpace;\n  if (lowerBounds.some(x => x !== 0)) {\n    throw new Error('Lower bounds of channel coordinate space must all be 0');\n  }\n  if (upperBounds.some(x => !Number.isInteger(x) || x <= 0 || x >= 2 ** 32)) {\n    throw new Error('Upper bounds of channel coordinate space must all be positive integers');\n  }\n  const shape = new Uint32Array(upperBounds);\n  const numChannels = prod(shape);\n  const coordinates = new Uint32Array(numChannels * rank);\n  for (let flatIndex = 0; flatIndex < numChannels; ++flatIndex) {\n    let remainder = flatIndex;\n    for (let dim = 0; dim < rank; ++dim) {\n      const coordinate = remainder % shape[dim];\n      remainder = (remainder - coordinate) / shape[dim];\n      coordinates[flatIndex * rank + dim] = coordinate;\n    }\n  }\n  return {channelCoordinateSpace, shape, numChannels, coordinates};\n}\n\nexport type RenderLayerTransformOrError = ValueOrError<RenderLayerTransform>;\nexport type WatchableRenderLayerTransform = WatchableValueInterface<RenderLayerTransformOrError>;\n\nfunction scaleTransformSubmatrix(\n    transform: Float32Array, rank: number, baseInputSpace: CoordinateSpace,\n    inputToBaseDimensions: readonly number[], baseOutputSpace: CoordinateSpace,\n    baseToOutputDimensions: readonly number[]) {\n  const {scales: baseInputScales} = baseInputSpace;\n  const {scales: baseOutputScales, rank: baseOutputRank} = baseOutputSpace;\n  const stride = rank + 1;\n  for (let baseOutputDim = 0; baseOutputDim < baseOutputRank; ++baseOutputDim) {\n    const outputDim = baseToOutputDimensions[baseOutputDim];\n    if (outputDim === -1) continue;\n    const baseOutputScale = baseOutputScales[baseOutputDim];\n    for (let inputDim = 0; inputDim < rank; ++inputDim) {\n      const baseInputDim = inputToBaseDimensions[inputDim];\n      const baseInputScale = baseInputScales[baseInputDim];\n      transform[stride * inputDim + outputDim] *= (baseInputScale / baseOutputScale);\n    }\n  }\n}\n\nexport function getRenderLayerTransform(\n    globalCoordinateSpace: CoordinateSpace, localCoordinateSpace: CoordinateSpace,\n    modelToLayerTransform: CoordinateSpaceTransform, subsourceEntry: {\n      subsourceToModelSubspaceTransform: Float32Array,\n      modelSubspaceDimensionIndices: readonly number[]\n    }|undefined,\n    channelCoordinateSpace: CoordinateSpace =\n        emptyValidCoordinateSpace): RenderLayerTransformOrError {\n  const {\n    inputSpace: modelSpace,\n    rank: fullRank,\n    sourceRank,\n    outputSpace: layerSpace,\n    transform: oldTransform\n  } = modelToLayerTransform;\n  const {names: modelDimensionNames} = modelSpace;\n  const {names: transformOutputDimensions} = layerSpace;\n  let requiredInputDims: number[];\n  if (subsourceEntry !== undefined) {\n    requiredInputDims = Array.from(subsourceEntry.modelSubspaceDimensionIndices);\n  } else {\n    requiredInputDims = [];\n    for (let i = 0; i < sourceRank; ++i) {\n      requiredInputDims[i] = i;\n    }\n  }\n  const unpaddedRank = requiredInputDims.length;\n  for (let i = sourceRank; i < fullRank; ++i) {\n    requiredInputDims.push(i);\n  }\n  const requiredOutputDims = getDependentTransformInputDimensions(\n      modelToLayerTransform.transform, fullRank, requiredInputDims, true);\n  const subspaceRank = requiredInputDims.length;\n  const modelSubspaceDimensionNames = requiredInputDims.map(i => modelDimensionNames[i] || `${i}`);\n  const layerSubspaceDimensionNames = requiredOutputDims.map(i => transformOutputDimensions[i]);\n  if (subspaceRank !== requiredOutputDims.length) {\n    return {\n      error: 'Rank mismatch between model subspace dimensions (' +\n          modelSubspaceDimensionNames.join(', ') + ') and corresponding layer/global dimensions (' +\n          layerSubspaceDimensionNames.join(', ') + ')',\n    };\n  }\n  let newTransform = homogeneousTransformSubmatrix(\n      Float32Array, oldTransform, fullRank, requiredOutputDims, requiredInputDims);\n  const renderLayerDimensions = requiredOutputDims.map(i => transformOutputDimensions[i]);\n  const localToRenderLayerDimensions =\n      localCoordinateSpace.names.map(x => renderLayerDimensions.indexOf(x));\n  const globalToRenderLayerDimensions =\n      globalCoordinateSpace.names.map(x => renderLayerDimensions.indexOf(x));\n  scaleTransformSubmatrix(\n      newTransform, subspaceRank, modelSpace, requiredInputDims, globalCoordinateSpace,\n      globalToRenderLayerDimensions);\n  scaleTransformSubmatrix(\n      newTransform, subspaceRank, modelSpace, requiredInputDims, localCoordinateSpace,\n      localToRenderLayerDimensions);\n  const channelToRenderLayerDimensions =\n      channelCoordinateSpace.names.map(x => renderLayerDimensions.indexOf(x));\n  scaleTransformSubmatrix(\n      newTransform, subspaceRank, modelSpace, requiredInputDims, channelCoordinateSpace,\n      channelToRenderLayerDimensions);\n  const channelToModelSubspaceDimensions: number[] = [];\n  const channelRank = channelCoordinateSpace.rank;\n  if (subsourceEntry !== undefined) {\n    let {subsourceToModelSubspaceTransform} = subsourceEntry;\n    if (unpaddedRank !== subspaceRank) {\n      subsourceToModelSubspaceTransform = matrix.extendHomogeneousTransform(\n          new Float32Array((subspaceRank + 1) ** 2), subspaceRank,\n          subsourceToModelSubspaceTransform, unpaddedRank);\n    }\n    newTransform = matrix.multiply(\n        new Float32Array((subspaceRank + 1) ** 2), subspaceRank + 1, newTransform, subspaceRank + 1,\n        subsourceToModelSubspaceTransform, subspaceRank + 1, subspaceRank + 1, subspaceRank + 1,\n        subspaceRank + 1);\n  }\n  const channelSpaceShape = new Uint32Array(channelRank);\n  for (let channelDim = 0; channelDim < channelRank; ++channelDim) {\n    const lower = channelCoordinateSpace.bounds.lowerBounds[channelDim];\n    const upper = channelCoordinateSpace.bounds.upperBounds[channelDim];\n    if (lower !== 0 || !Number.isInteger(upper) || upper <= 0 || upper >= 2 ** 32) {\n      return {\n        error: `Channel dimension ${channelCoordinateSpace.names[channelDim]} must have ` +\n            `lower bound of 0 and positive integer upper bound`,\n      };\n    }\n    channelSpaceShape[channelDim] = upper;\n    const layerDim = channelToRenderLayerDimensions[channelDim];\n    let correspondingModelSubspaceDim = -1;\n    if (layerDim !== -1) {\n      for (let chunkDim = 0; chunkDim < subspaceRank; ++chunkDim) {\n        const coeff = newTransform[layerDim + chunkDim * (subspaceRank + 1)];\n        if (coeff === 0) continue;\n        if (coeff !== 1 || correspondingModelSubspaceDim !== -1) {\n          return {\n            error: `Channel dimension ${layerSubspaceDimensionNames[layerDim]} ` +\n                `must map to a single source dimension`\n          };\n        }\n        correspondingModelSubspaceDim = chunkDim;\n      }\n    }\n    channelToModelSubspaceDimensions[channelDim] = correspondingModelSubspaceDim;\n  }\n  return {\n    rank: subspaceRank,\n    unpaddedRank,\n    modelDimensionNames: modelSubspaceDimensionNames,\n    layerDimensionNames: layerSubspaceDimensionNames,\n    localToRenderLayerDimensions,\n    globalToRenderLayerDimensions,\n    channelToRenderLayerDimensions,\n    modelToRenderLayerTransform: newTransform,\n    channelToModelDimensions: channelToModelSubspaceDimensions,\n    channelSpaceShape,\n  };\n}\n\nexport function renderLayerTransformsEqual(\n    a: RenderLayerTransformOrError, b: RenderLayerTransformOrError) {\n  if (a === b) return true;\n  if (a.error !== undefined || b.error !== undefined) return false;\n  return (\n      arraysEqual(a.modelDimensionNames, b.modelDimensionNames) &&\n      arraysEqual(a.layerDimensionNames, b.layerDimensionNames) &&\n      arraysEqual(a.globalToRenderLayerDimensions, b.globalToRenderLayerDimensions) &&\n      arraysEqual(a.localToRenderLayerDimensions, b.localToRenderLayerDimensions) &&\n      arraysEqual(a.channelToRenderLayerDimensions, b.channelToRenderLayerDimensions) &&\n      arraysEqual(a.modelToRenderLayerTransform, b.modelToRenderLayerTransform) &&\n      arraysEqual(a.channelSpaceShape, b.channelSpaceShape));\n}\n\nexport function getWatchableRenderLayerTransform(\n    globalCoordinateSpace: WatchableValueInterface<CoordinateSpace>,\n    localCoordinateSpace: WatchableValueInterface<CoordinateSpace>,\n    modelToLayerTransform: WatchableValueInterface<CoordinateSpaceTransform>, subsourceEntry: {\n      subsourceToModelSubspaceTransform: Float32Array,\n      modelSubspaceDimensionIndices: readonly number[]\n    }|undefined,\n    channelCoordinateSpace?: WatchableValueInterface<CoordinateSpace|undefined>):\n    CachedWatchableValue<RenderLayerTransformOrError> {\n  return makeCachedDerivedWatchableValue(\n      (globalCoordinateSpace: CoordinateSpace, localCoordinateSpace: CoordinateSpace,\n       modelToLayerTransform: CoordinateSpaceTransform,\n       channelCoordinateSpace: CoordinateSpace|undefined) =>\n          getRenderLayerTransform(\n              globalCoordinateSpace, localCoordinateSpace, modelToLayerTransform, subsourceEntry,\n              channelCoordinateSpace),\n      [\n        globalCoordinateSpace,\n        localCoordinateSpace,\n        modelToLayerTransform,\n        channelCoordinateSpace === undefined ? constantWatchableValue(undefined) :\n                                               channelCoordinateSpace,\n      ],\n      renderLayerTransformsEqual);\n}\n\nexport interface LayerDisplayDimensionMapping {\n  /**\n   * List of indices of layer dimensions that correspond to display dimensions.\n   */\n  layerDisplayDimensionIndices: number[];\n\n  /**\n   * Maps each display dimension index to the corresponding layer dimension index, or `-1`.\n   */\n  displayToLayerDimensionIndices: number[];\n}\n\nexport interface ChunkChannelAccessParameters {\n  channelSpaceShape: Uint32Array;\n\n  /**\n   * Equal to the values in `channelToChunkDimensionIndices` not equal to `-1`.\n   */\n  chunkChannelDimensionIndices: readonly number[];\n\n  /**\n   * Product of `modelTransform.channelSpaceShape`.\n   */\n  numChannels: number;\n\n  /**\n   * Row-major array of shape `[numChannels, chunkChannelDimensionIndices.length]`, specifies the\n   * coordinates within the chunk channel dimensions corresponding to each flat channel index.\n   */\n  chunkChannelCoordinates: Uint32Array;\n}\n\nexport interface ChunkTransformParameters extends ChunkChannelAccessParameters {\n  modelTransform: RenderLayerTransform;\n  chunkToLayerTransform: Float32Array;\n  layerToChunkTransform: Float32Array;\n  chunkToLayerTransformDet: number;\n  /**\n   * Maps channel dimension indices in the layer channel coordinate space to the corresponding chunk\n   * dimension index, or `-1` if there is no correpsonding chunk dimension.\n   */\n  channelToChunkDimensionIndices: readonly number[];\n  combinedGlobalLocalToChunkTransform: Float32Array;\n  combinedGlobalLocalRank: number;\n  layerRank: number;\n}\n\nexport function layerToDisplayCoordinates(\n    displayPosition: vec3, layerPosition: Float32Array, modelTransform: RenderLayerTransform,\n    displayDimensionIndices: Int32Array) {\n  const {globalToRenderLayerDimensions} = modelTransform;\n  for (let displayDim = 0; displayDim < 3; ++displayDim) {\n    let v = 0;\n    const globalDim = displayDimensionIndices[displayDim];\n    if (globalDim !== -1) {\n      const layerDim = globalToRenderLayerDimensions[globalDim];\n      if (layerDim !== -1) {\n        v = layerPosition[layerDim];\n      }\n    }\n    displayPosition[displayDim] = v;\n  }\n}\n\nexport function displayToLayerCoordinates(\n    layerPosition: Float32Array, displayPosition: vec3, modelTransform: RenderLayerTransform,\n    displayDimensionIndices: Int32Array) {\n  const {globalToRenderLayerDimensions} = modelTransform;\n  for (let displayDim = 0; displayDim < 3; ++displayDim) {\n    const globalDim = displayDimensionIndices[displayDim];\n    if (globalDim !== -1) {\n      const layerDim = globalToRenderLayerDimensions[globalDim];\n      if (layerDim !== -1) {\n        layerPosition[layerDim] = displayPosition[displayDim];\n      }\n    }\n  }\n}\n\nexport function chunkToDisplayCoordinates(\n    displayPosition: vec3, chunkPosition: Float32Array, chunkTransform: ChunkTransformParameters,\n    displayDimensionIndices: Int32Array): vec3 {\n  const {globalToRenderLayerDimensions} = chunkTransform.modelTransform;\n  const {layerRank, chunkToLayerTransform} = chunkTransform;\n  const stride = layerRank + 1;\n  for (let displayDim = 0; displayDim < 3; ++displayDim) {\n    let sum = 0;\n    const globalDim = displayDimensionIndices[displayDim];\n    if (globalDim !== -1) {\n      const layerDim = globalToRenderLayerDimensions[globalDim];\n      if (layerDim !== -1) {\n        sum = chunkToLayerTransform[stride * layerRank + layerDim];\n        for (let chunkDim = 0; chunkDim < layerRank; ++chunkDim) {\n          sum += chunkToLayerTransform[stride * chunkDim + layerDim] * chunkPosition[chunkDim];\n        }\n      }\n    }\n    displayPosition[displayDim] = sum;\n  }\n  return displayPosition;\n}\n\nexport interface ChunkDisplayTransformParameters {\n  modelTransform: RenderLayerTransform;\n  chunkTransform: ChunkTransformParameters;\n  displaySubspaceModelMatrix: mat4;\n  displaySubspaceInvModelMatrix: mat4;\n  chunkDisplayDimensionIndices: number[];\n  numChunkDisplayDims: number;\n}\n\nexport function getChunkTransformParameters(\n    modelTransform: RenderLayerTransform,\n    chunkToModelTransform?: Float32Array): ChunkTransformParameters {\n  const layerRank = modelTransform.rank;\n  const unpaddedRank = modelTransform.unpaddedRank;\n  let chunkToLayerTransform: Float32Array;\n  if (unpaddedRank !== layerRank && chunkToModelTransform !== undefined) {\n    chunkToModelTransform = matrix.extendHomogeneousTransform(\n        new Float32Array((layerRank + 1) ** 2), layerRank, chunkToModelTransform, unpaddedRank);\n  }\n  if (chunkToModelTransform !== undefined) {\n    chunkToLayerTransform = new Float32Array((layerRank + 1) * (layerRank + 1));\n    matrix.multiply(\n        chunkToLayerTransform, layerRank + 1, modelTransform.modelToRenderLayerTransform,\n        layerRank + 1, chunkToModelTransform, layerRank + 1, layerRank + 1, layerRank + 1,\n        layerRank + 1);\n  } else {\n    chunkToLayerTransform = modelTransform.modelToRenderLayerTransform;\n  }\n  const layerToChunkTransform = new Float32Array((layerRank + 1) * (layerRank + 1));\n  const det = matrix.inverse(\n      layerToChunkTransform, layerRank + 1, chunkToLayerTransform, layerRank + 1, layerRank + 1);\n  if (det === 0) {\n    throw new Error(`Transform is singular`);\n  }\n  const {\n    globalToRenderLayerDimensions,\n    localToRenderLayerDimensions,\n    channelToRenderLayerDimensions\n  } = modelTransform;\n  const globalRank = globalToRenderLayerDimensions.length;\n  const localRank = localToRenderLayerDimensions.length;\n  const combinedGlobalLocalRank = globalRank + localRank;\n\n  // Compute `combinedGlobalLocalToChunkTransform`.\n  const combinedGlobalLocalToChunkTransform =\n      new Float32Array((combinedGlobalLocalRank + 1) * layerRank);\n  for (let chunkDim = 0; chunkDim < layerRank; ++chunkDim) {\n    for (let globalDim = 0; globalDim < globalRank; ++globalDim) {\n      const layerDim = globalToRenderLayerDimensions[globalDim];\n      if (layerDim === -1) continue;\n      combinedGlobalLocalToChunkTransform[chunkDim + globalDim * layerRank] =\n          layerToChunkTransform[chunkDim + layerDim * (layerRank + 1)];\n    }\n    for (let localDim = 0; localDim < localRank; ++localDim) {\n      const layerDim = localToRenderLayerDimensions[localDim];\n      if (layerDim === -1) continue;\n      combinedGlobalLocalToChunkTransform[chunkDim + (globalRank + localDim) * layerRank] =\n          layerToChunkTransform[chunkDim + layerDim * (layerRank + 1)];\n    }\n    combinedGlobalLocalToChunkTransform[chunkDim + combinedGlobalLocalRank * layerRank] =\n        layerToChunkTransform[chunkDim + layerRank * (layerRank + 1)];\n  }\n\n  const channelRank = channelToRenderLayerDimensions.length;\n  let channelToChunkDimensionIndices = new Array<number>(channelRank);\n  const chunkChannelDimensionIndices: number[] = [];\n  for (let channelDim = 0; channelDim < channelRank; ++channelDim) {\n    const layerDim = channelToRenderLayerDimensions[channelDim];\n    let correspondingChunkDim = -1;\n    if (layerDim !== -1) {\n      for (let chunkDim = 0; chunkDim < layerRank; ++chunkDim) {\n        const coeff = chunkToLayerTransform[layerDim + chunkDim * (layerRank + 1)];\n        if (coeff === 0) continue;\n        if (coeff !== 1 || correspondingChunkDim !== -1) {\n          throw new Error(\n              `Channel dimension ${modelTransform.layerDimensionNames[layerDim]} ` +\n              `must map with stride 1 to a single data chunk dimensions`);\n        }\n        correspondingChunkDim = chunkDim;\n      }\n      if (correspondingChunkDim !== -1) {\n        if (chunkToLayerTransform[layerDim + layerRank * (layerRank + 1)] !== 0) {\n          throw new Error(\n              `Channel dimension ${modelTransform.layerDimensionNames[layerDim]} ` +\n              `must have an offset of 0 in the chunk coordinate space`);\n        }\n        chunkChannelDimensionIndices.push(correspondingChunkDim);\n      }\n    }\n    channelToChunkDimensionIndices[channelDim] = correspondingChunkDim;\n  }\n  const {channelSpaceShape} = modelTransform;\n  const numChannels = vector.prod(channelSpaceShape);\n  const chunkChannelRank = chunkChannelDimensionIndices.length;\n  const chunkChannelCoordinates = new Uint32Array(numChannels * chunkChannelRank);\n  for (let channelIndex = 0; channelIndex < numChannels; ++channelIndex) {\n    let remainder = channelIndex;\n    let chunkChannelDim = 0;\n    for (let channelDim = 0; channelDim < channelRank; ++channelDim) {\n      const coordinate = remainder % channelSpaceShape[channelDim];\n      remainder = (remainder -  coordinate) / channelSpaceShape[channelDim];\n      const chunkDim = channelToChunkDimensionIndices[channelDim];\n      if (chunkDim !== -1) {\n        chunkChannelCoordinates[channelIndex * chunkChannelRank + chunkChannelDim] = coordinate;\n        ++chunkChannelDim;\n      }\n    }\n  }\n  return {\n    layerRank: layerRank,\n    modelTransform,\n    chunkToLayerTransform,\n    layerToChunkTransform,\n    chunkToLayerTransformDet: det,\n    combinedGlobalLocalRank,\n    combinedGlobalLocalToChunkTransform,\n    channelToChunkDimensionIndices,\n    chunkChannelDimensionIndices,\n    numChannels,\n    chunkChannelCoordinates,\n    channelSpaceShape,\n  };\n}\n\nexport function getLayerDisplayDimensionMapping(\n    transform: RenderLayerTransform,\n    displayDimensionIndices: Int32Array): LayerDisplayDimensionMapping {\n  const {globalToRenderLayerDimensions} = transform;\n\n  // List of layer dimension indices corresponding to global display dimensions.\n  const layerDisplayDimensionIndices: number[] = [];\n\n  // Maps global display dimension (in {0, 1, 2}) to the corresponding layer dimension index, or\n  // `-1`.\n  const displayToLayerDimensionIndices: number[] = [];\n\n  for (let displayDim = 0; displayDim < 3; ++displayDim) {\n    const globalDim = displayDimensionIndices[displayDim];\n    if (globalDim == -1) continue;\n    const layerDim = globalToRenderLayerDimensions[globalDim];\n    displayToLayerDimensionIndices.push(layerDim);\n    if (layerDim === -1) continue;\n    layerDisplayDimensionIndices.push(layerDim);\n  }\n  for (let i = displayToLayerDimensionIndices.length; i < 3; ++i) {\n    displayToLayerDimensionIndices[i] = -1;\n  }\n  return {layerDisplayDimensionIndices, displayToLayerDimensionIndices};\n}\n\nexport function getChunkDisplayTransformParameters(\n    chunkTransform: ChunkTransformParameters,\n    layerDisplayDimensionMapping: LayerDisplayDimensionMapping): ChunkDisplayTransformParameters {\n  const {chunkToLayerTransform, modelTransform} = chunkTransform;\n  const rank = modelTransform.rank;\n  const {layerDisplayDimensionIndices, displayToLayerDimensionIndices} =\n      layerDisplayDimensionMapping;\n  const numLayerDisplayDims = layerDisplayDimensionIndices.length;\n  const chunkDisplayDimensionIndices = getDependentTransformInputDimensions(\n      chunkToLayerTransform, rank, layerDisplayDimensionIndices);\n  if (chunkDisplayDimensionIndices.length !== numLayerDisplayDims) {\n    const {modelDimensionNames, layerDimensionNames} = modelTransform;\n    throw new Error(\n        `Rank mismatch between displayed layer dimensions ` +\n        `(${\n            Array.from(layerDisplayDimensionIndices, i => layerDimensionNames[i])\n                .join(',\\u00a0')}) ` +\n        `and corresponding chunk dimensions ` +\n        `(${\n            Array.from(chunkDisplayDimensionIndices, i => modelDimensionNames[i])\n                .join(',\\u00a0')})`);\n  }\n  // Compute \"model matrix\" (transform from the displayed subspace of the chunk space) to the global\n  // display coordinate space.\n  const displaySubspaceModelMatrix = mat4.create();\n  for (let displayDim = 0; displayDim < 3; ++displayDim) {\n    const layerDim = displayToLayerDimensionIndices[displayDim];\n    if (layerDim === -1) continue;\n    for (let chunkDisplayDimIndex = 0; chunkDisplayDimIndex < numLayerDisplayDims;\n         ++chunkDisplayDimIndex) {\n      const chunkDim = chunkDisplayDimensionIndices[chunkDisplayDimIndex];\n      displaySubspaceModelMatrix[chunkDisplayDimIndex * 4 + displayDim] =\n          chunkToLayerTransform[chunkDim * (rank + 1) + layerDim];\n    }\n    displaySubspaceModelMatrix[12 + displayDim] =\n        chunkToLayerTransform[rank * (rank + 1) + layerDim];\n  }\n  const displaySubspaceInvModelMatrix = mat4.create();\n  mat4.invert(displaySubspaceInvModelMatrix, displaySubspaceModelMatrix);\n\n  for (let i = chunkDisplayDimensionIndices.length; i < 3; ++i) {\n    chunkDisplayDimensionIndices[i] = -1;\n  }\n  return {\n    modelTransform: chunkTransform.modelTransform,\n    chunkTransform,\n    displaySubspaceModelMatrix,\n    displaySubspaceInvModelMatrix,\n    chunkDisplayDimensionIndices,\n    numChunkDisplayDims: numLayerDisplayDims,\n  };\n}\n\nexport function getChunkPositionFromCombinedGlobalLocalPositions(\n    chunkPosition: Float32Array, globalPosition: Float32Array, localPosition: Float32Array,\n    layerRank: number, combinedGlobalLocalToChunkTransform: Float32Array) {\n  const globalRank = globalPosition.length;\n  const localRank = localPosition.length;\n  const rank = chunkPosition.length;\n  let valid = true;\n  for (let chunkDim = 0; chunkDim < layerRank; ++chunkDim) {\n    let off = chunkDim;\n    let sum = 0;\n    for (let globalDim = 0; globalDim < globalRank; ++globalDim) {\n      sum += combinedGlobalLocalToChunkTransform[off + globalDim * layerRank] *\n          globalPosition[globalDim];\n    }\n    off += globalRank * layerRank;\n    for (let localDim = 0; localDim < localRank; ++localDim) {\n      sum +=\n          combinedGlobalLocalToChunkTransform[off + localDim * layerRank] * localPosition[localDim];\n    }\n    sum += combinedGlobalLocalToChunkTransform[off + localRank * layerRank];\n    if (chunkDim < rank) {\n      chunkPosition[chunkDim] = sum;\n    } else {\n      // Handle clipping\n      if (sum < 0 || sum >= 1) {\n        valid = false;\n      }\n    }\n  }\n  return valid;\n}\n\nexport function getLayerPositionFromCombinedGlobalLocalPositions(\n    layerPosition: Float32Array, globalPosition: Float32Array, localPosition: Float32Array,\n    modelTransform: RenderLayerTransform) {\n  scatterUpdate(layerPosition, globalPosition, modelTransform.globalToRenderLayerDimensions);\n  scatterUpdate(layerPosition, localPosition, modelTransform.localToRenderLayerDimensions);\n  return layerPosition;\n}\n\nexport function get3dModelToDisplaySpaceMatrix(\n    out: mat4, displayDimensionRenderInfo: DisplayDimensionRenderInfo,\n    transform: RenderLayerTransform) {\n  out.fill(0);\n  out[15] = 1;\n  let fullRank = true;\n  const {displayDimensionIndices} = displayDimensionRenderInfo;\n  const {globalToRenderLayerDimensions, modelToRenderLayerTransform} = transform;\n  const layerRank = transform.rank;\n  for (let displayDim = 0; displayDim < 3; ++displayDim) {\n    const globalDim = displayDimensionIndices[displayDim];\n    if (globalDim === -1) {\n      fullRank = false;\n      continue;\n    }\n    const layerDim = globalToRenderLayerDimensions[globalDim];\n    if (layerDim === -1) {\n      fullRank = false;\n      continue;\n    }\n    out[displayDim + 12] = modelToRenderLayerTransform[layerDim + layerRank * (layerRank + 1)];\n    for (let modelDim = 0; modelDim < 3; ++modelDim) {\n      out[displayDim + 4 * modelDim] =\n          modelToRenderLayerTransform[layerDim + (layerRank + 1) * modelDim];\n    }\n  }\n  if (!fullRank) {\n    const {globalDimensionNames} = displayDimensionRenderInfo;\n    const displayDimDesc =\n        Array.from(displayDimensionIndices.filter(i => i !== -1), i => globalDimensionNames[i])\n            .join(',\\u00a0');\n    throw new Error(\n        `Transform from model dimensions (${transform.modelDimensionNames.join(',\\u00a0')}) ` +\n        `to display dimensions (${displayDimDesc}) does not have full rank`);\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {mat4, transformVectorByMat4, transformVectorByMat4Transpose, vec3} from 'neuroglancer/util/geom';\nimport * as matrix from 'neuroglancer/util/matrix';\n\nexport class ChunkLayout {\n  /**\n   * Size of each chunk in \"chunk\" coordinates.\n   */\n  size: vec3;\n\n  /**\n   * Transform from local \"chunk\" coordinates to global voxel coordinates.\n   */\n  transform: mat4;\n\n  /**\n   * Inverse of transform.  Transform from global voxel coordinates to \"chunk\" coordinates.\n   */\n  invTransform: mat4;\n\n  /**\n   * Determinant of `transform`.\n   */\n  detTransform: number;\n\n  finiteRank: number;\n\n  constructor(size: vec3, transform: mat4, finiteRank: number) {\n    this.size = vec3.clone(size);\n    this.transform = mat4.clone(transform);\n    this.finiteRank = finiteRank;\n    const invTransform = mat4.create();\n    const det = matrix.inverse(invTransform, 4, transform, 4, 4);\n    if (det === 0) {\n      throw new Error('Transform is singular');\n    }\n    this.invTransform = invTransform;\n    this.detTransform = det;\n  }\n  toObject() {\n    return {size: this.size, transform: this.transform, finiteRank: this.finiteRank};\n  }\n\n  static fromObject(msg: any) {\n    return new ChunkLayout(msg.size, msg.transform, msg.finiteRank);\n  }\n\n  /**\n   * Transform global spatial coordinates to local spatial coordinates.\n   */\n  globalToLocalSpatial(out: vec3, globalSpatial: vec3): vec3 {\n    return vec3.transformMat4(out, globalSpatial, this.invTransform);\n  }\n\n  localSpatialVectorToGlobal(out: vec3, localVector: vec3): vec3 {\n    return transformVectorByMat4(out, localVector, this.transform);\n  }\n\n  /**\n   * Returns the unnormalized normal vector.\n   */\n  globalToLocalNormal(globalNormal: vec3, localNormal: vec3) {\n    return transformVectorByMat4Transpose(globalNormal, localNormal, this.transform);\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArrayConstructor} from 'neuroglancer/util/array';\n\n/**\n * If this is updated, DATA_TYPE_BYTES must also be updated.\n */\nexport enum DataType {\n  UINT8,\n  INT8,\n  UINT16,\n  INT16,\n  UINT32,\n  INT32,\n  UINT64,\n  FLOAT32,\n}\n\nexport const DATA_TYPE_SIGNED: Record<DataType, boolean|undefined> = {\n  [DataType.UINT8]: false,\n  [DataType.INT8]: true,\n  [DataType.UINT16]: false,\n  [DataType.INT16]: true,\n  [DataType.UINT32]: false,\n  [DataType.INT32]: true,\n  [DataType.UINT64]: false,\n  [DataType.FLOAT32]: undefined,\n};\n\nexport const DATA_TYPE_BYTES: Record<DataType, number> = {\n  [DataType.UINT8]: 1,\n  [DataType.INT8]: 1,\n  [DataType.UINT16]: 2,\n  [DataType.INT16]: 2,\n  [DataType.UINT32]: 4,\n  [DataType.INT32]: 4,\n  [DataType.UINT64]: 8,\n  [DataType.FLOAT32]: 4,\n};\n\nexport const DATA_TYPE_ARRAY_CONSTRUCTOR: Record<DataType, TypedArrayConstructor> = {\n  [DataType.UINT8]: Uint8Array,\n  [DataType.INT8]: Int8Array,\n  [DataType.UINT16]: Uint16Array,\n  [DataType.INT16]: Int16Array,\n  [DataType.UINT32]: Uint32Array,\n  [DataType.INT32]: Int32Array,\n  [DataType.UINT64]: Uint32Array,\n  [DataType.FLOAT32]: Float32Array,\n};\n\nexport const DATA_TYPE_JAVASCRIPT_ELEMENTS_PER_ARRAY_ELEMENT: Record<DataType, number> = {\n  [DataType.UINT8]: 1,\n  [DataType.INT8]: 1,\n  [DataType.UINT16]: 1,\n  [DataType.INT16]: 1,\n  [DataType.UINT32]: 1,\n  [DataType.INT32]: 1,\n  [DataType.UINT64]: 2,\n  [DataType.FLOAT32]: 1,\n};\n\nexport function makeDataTypeArrayView(\n    dataType: DataType, buffer: ArrayBuffer, byteOffset: number = 0,\n    byteLength: number = buffer.byteLength): ArrayBufferView {\n  const bytesPerElement = DATA_TYPE_BYTES[dataType];\n  const javascriptElementsPerArrayElement =\n      DATA_TYPE_JAVASCRIPT_ELEMENTS_PER_ARRAY_ELEMENT[dataType];\n  return new DATA_TYPE_ARRAY_CONSTRUCTOR[dataType](\n      buffer, byteOffset, byteLength / bytesPerElement * javascriptElementsPerArrayElement);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DisplayDimensionRenderInfo} from 'neuroglancer/navigation_state';\nimport {ProjectionParameters} from 'neuroglancer/projection_parameters';\nimport {getChunkPositionFromCombinedGlobalLocalPositions} from 'neuroglancer/render_coordinate_transform';\nimport {ChunkLayout} from 'neuroglancer/sliceview/chunk_layout';\nimport {WatchableValueChangeInterface, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {DATA_TYPE_BYTES, DataType} from 'neuroglancer/util/data_type';\nimport {Disposable} from 'neuroglancer/util/disposable';\nimport {getFrustrumPlanes, getViewFrustrumDepthRange, isAABBIntersectingPlane, isAABBVisible, mat4, vec3} from 'neuroglancer/util/geom';\nimport * as matrix from 'neuroglancer/util/matrix';\nimport * as vector from 'neuroglancer/util/vector';\nimport {SharedObject} from 'neuroglancer/worker_rpc';\n\nexport {DATA_TYPE_BYTES, DataType};\n\nconst DEBUG_VISIBLE_SOURCES = false;\nconst DEBUG_CHUNK_VISIBILITY = false;\n\nconst tempMat4 = mat4.create();\n\n/**\n * Average cross-sectional area contained within a chunk of the specified size and rotation.\n *\n * This is estimated by taking the total volume of the chunk and dividing it by the total length of\n * the chunk along the z axis.\n */\nexport function estimateSliceAreaPerChunk(chunkLayout: ChunkLayout, viewMatrix: mat4) {\n  // Compute the length of the projection of the chunk along the z axis in view space.\n  //\n  // Each chunk dimension `i` can independently affect the z projection by the dot product of column\n  // `i` of `chunkLayout.transform` and row 2 of `viewMatrix`.\n  let viewZProjection = 0;\n  let chunkVolume = Math.abs(chunkLayout.detTransform);\n  const {transform, size} = chunkLayout;\n  for (let i = 0; i < 3; ++i) {\n    let sum = 0;\n    for (let j = 0; j < 3; ++j) {\n      sum += viewMatrix[j * 4 + 2] * transform[4 * i + j];\n    }\n    const s = size[i];\n    viewZProjection += Math.abs(sum) * s;\n    chunkVolume *= s;\n  }\n  return chunkVolume / viewZProjection;\n}\n\nexport interface MultiscaleVolumetricDataRenderLayer {\n  localPosition: WatchableValueInterface<Float32Array>;\n  renderScaleTarget: WatchableValueInterface<number>;\n}\n\nexport interface TransformedSource<\n    RLayer extends MultiscaleVolumetricDataRenderLayer = SliceViewRenderLayer,\n                   Source extends SliceViewChunkSource = SliceViewChunkSource> {\n  renderLayer: RLayer;\n\n  source: Source;\n\n  /**\n   * Approximate voxel size in each of the display dimensions.\n   */\n  effectiveVoxelSize: vec3;\n\n  chunkLayout: ChunkLayout;\n\n  /**\n   * Arrays of length `rank` specifying the clip bounds (in voxels) for dimensions not in\n   * `chunkDisplayDimensionIndices` and not channel dimensions.  The values for display/channel\n   * dimensions are set to -/+infinity.\n   */\n  nonDisplayLowerClipBound: Float32Array;\n  nonDisplayUpperClipBound: Float32Array;\n\n  /**\n   * Arrays of length `rank` specifying the clip bounds (in voxels) for all dimensions.\n   */\n  lowerClipBound: Float32Array;\n  upperClipBound: Float32Array;\n\n  // Lower clip bound (in voxels) in the \"display\" subspace of the chunk coordinate space.\n  lowerClipDisplayBound: vec3;\n  // Upper clip bound (in voxels) in the \"display\" subspace of the chunk coordinate space.\n  upperClipDisplayBound: vec3;\n\n\n  // Lower bound (in chunks) within the \"display\" subspace of the chunk coordinate space.\n  lowerChunkDisplayBound: vec3;\n  // Upper bound (in chunks) within the \"display\" subspace of the chunk coordinate space.\n  upperChunkDisplayBound: vec3;\n\n  /**\n   * Dimensions of the chunk corresponding to the 3 display dimensions of the slice view.\n   */\n  chunkDisplayDimensionIndices: number[];\n\n  /**\n   * Rank of \"layer\" space and the \"chunk clip\" space, which is >= rank of chunk space.\n   */\n  layerRank: number;\n\n  /**\n   * Transform from dimensions of layer space to dimensions of chunk space.\n   *\n   * Matrix has dimensions `(globalRank + localRank + 1) * layerRank`.\n   *\n   * Input space is `[global dimensions, local dimensions]`.  Output space is the \"chunk clip\"\n   * coordinate space, in units of voxels.\n   *\n   */\n  combinedGlobalLocalToChunkTransform: Float32Array;\n\n  /**\n   * Transform from non-display dimensions of layer space to non-display dimensions of chunk space.\n   *\n   * Same as `combinedGlobalLocalToChunkTransform`, except that rows corresponding to \"display\"\n   * chunk dimensions are all 0.\n   *\n   * Matrix has dimensions `(globalRank + localRank + 1) * layerRank`.\n   *\n   * Input space is `[global dimensions, local dimensions]`.  Output space is the \"chunk clip\"\n   * coordinate space, in units of voxels.\n   */\n  fixedLayerToChunkTransform: Float32Array;\n\n  /**\n   * When `computeVisibleChunks` invokes the `addChunk` callback, this is set to the position of the\n   * chunk.\n   */\n  curPositionInChunks: Float32Array;\n\n  fixedPositionWithinChunk: Uint32Array;\n}\n\nexport interface SliceViewRenderLayer {\n  /**\n   * Current position of non-global layer dimensions.\n   */\n  localPosition: WatchableValueInterface<Float32Array>;\n  renderScaleTarget: WatchableValueInterface<number>;\n\n  filterVisibleSources(\n      sliceView: SliceViewBase<SliceViewChunkSource, SliceViewRenderLayer>,\n      sources: readonly TransformedSource[]): Iterable<TransformedSource>;\n}\n\nfunction updateFixedCurPositionInChunks<RLayer extends MultiscaleVolumetricDataRenderLayer>(\n    tsource: TransformedSource<RLayer, SliceViewChunkSource>, globalPosition: Float32Array,\n    localPosition: Float32Array): boolean {\n  const {curPositionInChunks, fixedPositionWithinChunk} = tsource;\n  const {nonDisplayLowerClipBound, nonDisplayUpperClipBound} = tsource;\n  const {rank, chunkDataSize} = tsource.source.spec;\n  if (!getChunkPositionFromCombinedGlobalLocalPositions(\n          curPositionInChunks, globalPosition, localPosition, tsource.layerRank,\n          tsource.fixedLayerToChunkTransform)) {\n    return false;\n  }\n  for (let chunkDim = 0; chunkDim < rank; ++chunkDim) {\n    const x = curPositionInChunks[chunkDim];\n    if (x < nonDisplayLowerClipBound[chunkDim] || x >= nonDisplayUpperClipBound[chunkDim]) {\n      if (DEBUG_VISIBLE_SOURCES) {\n        console.log(\n            'excluding source', tsource, `because of chunkDim=${chunkDim}, sum=${x}`,\n            nonDisplayLowerClipBound, nonDisplayUpperClipBound, tsource.fixedLayerToChunkTransform);\n      }\n      return false;\n    }\n    const chunkSize = chunkDataSize[chunkDim];\n    const chunk = curPositionInChunks[chunkDim] = Math.floor(x / chunkSize);\n    fixedPositionWithinChunk[chunkDim] = x - chunk * chunkSize;\n  }\n  return true;\n}\n\nfunction pickBestAlternativeSource<\n    RLayer extends MultiscaleVolumetricDataRenderLayer, Source extends\n        SliceViewChunkSource, Transformed extends TransformedSource<RLayer, Source>>(\n    viewMatrix: mat4, alternatives: Transformed[]) {\n  let numAlternatives = alternatives.length;\n  let bestAlternativeIndex = 0;\n  if (DEBUG_VISIBLE_SOURCES) {\n    console.log(alternatives);\n  }\n  if (numAlternatives > 1) {\n    let bestSliceArea = 0;\n    for (let alternativeIndex = 0; alternativeIndex < numAlternatives; ++alternativeIndex) {\n      let alternative = alternatives[alternativeIndex];\n      const {chunkLayout} = alternative;\n      let sliceArea = estimateSliceAreaPerChunk(chunkLayout, viewMatrix);\n      if (DEBUG_VISIBLE_SOURCES) {\n        console.log(`chunksize = ${chunkLayout.size}, sliceArea = ${sliceArea}`);\n      }\n      if (sliceArea > bestSliceArea) {\n        bestSliceArea = sliceArea;\n        bestAlternativeIndex = alternativeIndex;\n      }\n    }\n  }\n  return bestAlternativeIndex;\n}\n\nexport interface VisibleLayerSources<\n    RLayer extends MultiscaleVolumetricDataRenderLayer, Source extends\n        SliceViewChunkSource, Transformed extends TransformedSource<RLayer, Source>> {\n  allSources: Transformed[][];\n  visibleSources: Transformed[];\n  displayDimensionRenderInfo: DisplayDimensionRenderInfo;\n}\n\nconst tempChunkLayout = new ChunkLayout(vec3.create(), mat4.create(), 0);\n\nexport class SliceViewProjectionParameters extends ProjectionParameters {\n  /**\n   * Normal vector of cross section in (non-isotropic) global voxel coordinates.\n   */\n  viewportNormalInGlobalCoordinates = vec3.create();\n\n  /**\n   * Normal vector of cross section in isotropic global canonical voxel coordinates.\n   */\n  viewportNormalInCanonicalCoordinates = vec3.create();\n\n  centerDataPosition = vec3.create();\n\n  /**\n   * Size in physical units of a single pixel.\n   */\n  pixelSize: number = 0;\n}\n\nfunction visibleSourcesInvalidated(\n    oldValue: SliceViewProjectionParameters, newValue: SliceViewProjectionParameters) {\n  if (oldValue.displayDimensionRenderInfo !== newValue.displayDimensionRenderInfo) return true;\n  if (oldValue.pixelSize !== newValue.pixelSize) return true;\n  const {viewMatrix: oldViewMatrix} = oldValue;\n  const {viewMatrix: newViewMatrix} = newValue;\n  for (let i = 0; i < 12; ++i) {\n    if (oldViewMatrix[i] !== newViewMatrix[i]) return true;\n  }\n  return false;\n}\n\nexport class SliceViewBase<\n    Source extends SliceViewChunkSource = SliceViewChunkSource,\n                   RLayer extends SliceViewRenderLayer = SliceViewRenderLayer, Transformed extends\n        TransformedSource<RLayer, Source> = TransformedSource<RLayer, Source>> extends\n    SharedObject {\n  visibleLayers = new Map<RLayer, VisibleLayerSources<RLayer, Source, Transformed>>();\n  visibleSourcesStale = true;\n\n  constructor(public projectionParameters:\n                  WatchableValueChangeInterface<SliceViewProjectionParameters>) {\n    super();\n    this.registerDisposer(projectionParameters.changed.add((oldValue, newValue) => {\n      if (visibleSourcesInvalidated(oldValue, newValue)) {\n        this.invalidateVisibleSources();\n      }\n      this.invalidateVisibleChunks();\n    }));\n  }\n\n  invalidateVisibleSources() {\n    this.visibleSourcesStale = true;\n  }\n\n  invalidateVisibleChunks() {}\n\n  /**\n   * Computes the list of sources to use for each visible layer, based on the\n   * current pixelSize.\n   */\n  updateVisibleSources() {\n    if (!this.visibleSourcesStale) {\n      return;\n    }\n    this.visibleSourcesStale = false;\n    const curDisplayDimensionRenderInfo =\n        this.projectionParameters.value.displayDimensionRenderInfo;\n\n    const {visibleLayers} = this;\n    for (const [renderLayer, {allSources, visibleSources, displayDimensionRenderInfo}] of\n             visibleLayers) {\n      visibleSources.length = 0;\n      if (displayDimensionRenderInfo !== curDisplayDimensionRenderInfo || allSources.length === 0) {\n        continue;\n      }\n      const preferredOrientationIndex = pickBestAlternativeSource(\n          this.projectionParameters.value.viewMatrix, allSources.map(x => x[0]));\n\n      const sources = allSources[preferredOrientationIndex];\n\n      for (const source of renderLayer.filterVisibleSources(this, sources)) {\n        visibleSources.push(source as Transformed);\n      }\n      // Reverse visibleSources list since we added sources from coarsest to finest resolution, but\n      // we want them ordered from finest to coarsest.\n      visibleSources.reverse();\n      if (DEBUG_VISIBLE_SOURCES) {\n        console.log('visible sources chosen', visibleSources);\n      }\n    }\n  }\n}\n\n/**\n * By default, choose a chunk size with at most 2^18 = 262144 voxels.\n */\nexport const DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;\n\n/**\n * Specifies common options for getNearIsotropicBlockSize and getTwoDimensionalBlockSize.\n */\nexport interface BaseChunkLayoutOptions {\n  /**\n   * Number of chunk dimensions.\n   */\n  rank: number;\n\n  /**\n   * This, together with upperVoxelBound, specifies the total volume dimensions, which serves as a\n   * bound on the maximum chunk size.  If not specified, defaults to a zero vector.\n   */\n  lowerVoxelBound?: Float32Array;\n\n  /**\n   * Upper voxel bound.  If not specified, the total volume dimensions are not used to bound the\n   * chunk size.\n   */\n  upperVoxelBound?: Float32Array;\n\n  /**\n   * Base 2 logarithm of the maximum number of voxels per chunk.  Defaults to\n   * DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2.\n   */\n  maxVoxelsPerChunkLog2?: number;\n\n  /**\n   * Linear (not affine) transformation matrix with `rank` columns and `displayRank` rows in\n   * column-major order.  Specifies the transformation from chunk space to an isotropic \"camera view\n   * space\".  Note that only relative scales of input dimensions are relevant, any rotations applied\n   * are irrelevant.\n   */\n  chunkToViewTransform: Float32Array;\n  displayRank: number;\n\n  minBlockSize?: Uint32Array;\n  maxBlockSize?: Uint32Array;\n}\n\nexport interface GetNearIsotropicBlockSizeOptions extends BaseChunkLayoutOptions {}\n\n/**\n * Determines a near-isotropic (in camera view space) block size.  All dimensions will be\n * powers of 2, and will not exceed upperVoxelBound - lowerVoxelBound.  The total number of voxels\n * will not exceed maxVoxelsPerChunkLog2.\n */\nexport function getNearIsotropicBlockSize(options: GetNearIsotropicBlockSizeOptions): Uint32Array {\n  let {\n    rank,\n    upperVoxelBound,\n    maxVoxelsPerChunkLog2 = DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2,\n    chunkToViewTransform,\n    displayRank,\n    minBlockSize,\n    maxBlockSize,\n  } = options;\n\n  const {lowerVoxelBound = new Uint32Array(rank)} = options;\n\n  // Adjust voxelSize by effective scaling factor.\n  const effectiveVoxelSize = new Float32Array(rank);\n  for (let chunkDim = 0; chunkDim < rank; ++chunkDim) {\n    let factor = 0;\n    for (let displayDim = 0; displayDim < displayRank; ++displayDim) {\n      const c = chunkToViewTransform[chunkDim * displayRank + displayDim];\n      factor += c * c;\n    }\n    effectiveVoxelSize[chunkDim] = Math.sqrt(factor);\n  }\n\n  const chunkDataSize = new Uint32Array(rank);\n  if (minBlockSize !== undefined) {\n    chunkDataSize.set(minBlockSize);\n  } else {\n    chunkDataSize.fill(1);\n  }\n  const chunkDataSizeUpperBound = new Array<number>(rank);\n  for (let chunkDim = 0; chunkDim < rank; ++chunkDim) {\n    let bound = Number.POSITIVE_INFINITY;\n    if (effectiveVoxelSize[chunkDim] === 0) {\n      bound = chunkDataSize[chunkDim];\n    } else {\n      if (upperVoxelBound !== undefined) {\n        bound = Math.pow(\n            2, Math.floor(Math.log2(upperVoxelBound[chunkDim] - lowerVoxelBound[chunkDim])));\n      }\n      if (maxBlockSize !== undefined) {\n        bound = Math.min(bound, maxBlockSize[chunkDim]);\n      }\n    }\n    chunkDataSizeUpperBound[chunkDim] = bound;\n  }\n\n  // Determine the dimension in which chunkDataSize should be increased.  This is the smallest\n  // dimension (in nanometers) that is < maxChunkDataSize (in voxels).\n  //\n  // Returns -1 if there is no such dimension.\n  function findNextDimension() {\n    let minSize = Infinity;\n    let minDimension = -1;\n    for (let chunkDim = 0; chunkDim < rank; ++chunkDim) {\n      if (chunkDataSize[chunkDim] >= chunkDataSizeUpperBound[chunkDim]) {\n        continue;\n      }\n      let size = chunkDataSize[chunkDim] * effectiveVoxelSize[chunkDim];\n      if (size < minSize) {\n        minSize = size;\n        minDimension = chunkDim;\n      }\n    }\n    return minDimension;\n  }\n\n  maxVoxelsPerChunkLog2 -= Math.log2(vector.prod(chunkDataSize));\n  for (let i = 0; i < maxVoxelsPerChunkLog2; ++i) {\n    let nextDim = findNextDimension();\n    if (nextDim === -1) {\n      break;\n    }\n    chunkDataSize[nextDim] *= 2;\n  }\n  return chunkDataSize;\n}\n\n/**\n * Returns an array of [xy, yz, xz] 2-dimensional block sizes, where [x, y, z] refer to the view\n * dimensions.\n */\nexport function getTwoDimensionalBlockSizes(options: BaseChunkLayoutOptions) {\n  const chunkDataSizes: Uint32Array[] = [];\n  const {displayRank, chunkToViewTransform, rank} = options;\n  if (displayRank > 3) {\n    throw new Error('Unsupported view transform');\n  }\n  if (displayRank < 3) {\n    return [getNearIsotropicBlockSize(options)];\n  }\n  for (let i = 0; i < 3; ++i) {\n    const excludedDim = (i + 2) % 3;\n    const restrictedTransform = new Float32Array(chunkToViewTransform);\n    for (let j = 0; j < rank; ++j) {\n      restrictedTransform[j * displayRank + excludedDim] = 0;\n    }\n    chunkDataSizes[i] =\n        getNearIsotropicBlockSize({...options, chunkToViewTransform: restrictedTransform});\n  }\n  return chunkDataSizes;\n}\n\nexport enum ChunkLayoutPreference {\n  /**\n   * Indicates that isotropic chunks are desired.\n   */\n  ISOTROPIC = 0,\n\n  /**\n   * Indicates that 2-D chunks are desired.\n   */\n  FLAT = 1,\n}\n\nexport interface SliceViewSourceOptions {\n  /**\n   * Transform from the multiscale source coordinate space to a \"view\" coordinate space that\n   * reflects the relative scales.  This is a *linear* (not affine) transformation matrix with\n   * `rank` columns and `displayRank` rows in column-major order, where `rank` is the rank of the\n   * multiscale source.\n   */\n  multiscaleToViewTransform: Float32Array;\n  displayRank: number;\n  modelChannelDimensionIndices: readonly number[];\n}\n\nexport function getCombinedTransform(\n    rank: number, bToC: Float32Array, aToB: Float32Array|undefined) {\n  if (aToB === undefined) {\n    return bToC;\n  } else {\n    return matrix.multiply(\n        new Float32Array((rank + 1) * (rank + 1)), rank + 1, bToC, rank + 1, aToB, rank + 1,\n        rank + 1, rank + 1, rank + 1);\n  }\n}\n\n/**\n * Specifies parameters for getChunkDataSizes.\n */\nexport interface ChunkLayoutOptions {\n  /**\n   * Chunk sizes in voxels.\n   */\n  chunkDataSizes?: Uint32Array[];\n\n  /**\n   * Preferred chunk layout, which determines chunk sizes to use if chunkDataSizes is not\n   * specified.\n   */\n  chunkLayoutPreference?: ChunkLayoutPreference;\n}\n\nexport function getChunkDataSizes(options: ChunkLayoutOptions&BaseChunkLayoutOptions) {\n  if (options.chunkDataSizes !== undefined) {\n    return options.chunkDataSizes;\n  }\n  const {chunkLayoutPreference = ChunkLayoutPreference.ISOTROPIC} = options;\n  switch (chunkLayoutPreference) {\n    case ChunkLayoutPreference.ISOTROPIC:\n      return [getNearIsotropicBlockSize(options)];\n    case ChunkLayoutPreference.FLAT:\n      return getTwoDimensionalBlockSizes(options);\n  }\n}\n\n/**\n * Generic specification for SliceView chunks specifying a layout and voxel size.\n */\nexport interface SliceViewChunkSpecification<ChunkDataSize extends Uint32Array|Float32Array =\n                                                                       Uint32Array | Float32Array> {\n  rank: number;\n\n  /**\n   * Size of chunk in voxels.\n   */\n  chunkDataSize: ChunkDataSize;\n\n  /**\n   * All valid chunks are in the range [lowerChunkBound, upperChunkBound).\n   *\n   * These are specified in units of chunks (not voxels).\n   */\n  lowerChunkBound: Float32Array;\n  upperChunkBound: Float32Array;\n\n  lowerVoxelBound: Float32Array;\n  upperVoxelBound: Float32Array;\n}\n\nexport function makeSliceViewChunkSpecification<ChunkDataSize extends Uint32Array|Float32Array>(\n    options: SliceViewChunkSpecificationOptions<ChunkDataSize>):\n    SliceViewChunkSpecification<ChunkDataSize> {\n  const {\n    rank,\n    chunkDataSize,\n    upperVoxelBound,\n  } = options;\n  const {\n    lowerVoxelBound = new Float32Array(rank),\n  } = options;\n  const lowerChunkBound = new Float32Array(rank);\n  const upperChunkBound = new Float32Array(rank);\n  for (let i = 0; i < rank; ++i) {\n    lowerChunkBound[i] = Math.floor(lowerVoxelBound[i] / chunkDataSize[i]);\n    upperChunkBound[i] = Math.floor((upperVoxelBound[i] - 1) / chunkDataSize[i] + 1);\n  }\n  return {\n    rank,\n    chunkDataSize,\n    lowerChunkBound,\n    upperChunkBound,\n    lowerVoxelBound,\n    upperVoxelBound,\n  };\n}\n\nexport function*\n    filterVisibleSources(\n        sliceView: SliceViewBase, renderLayer: SliceViewRenderLayer,\n        sources: readonly TransformedSource[]): Iterable<TransformedSource> {\n  // Increase pixel size by a small margin.\n  const pixelSize = sliceView.projectionParameters.value.pixelSize * 1.1;\n  // At the smallest scale, all alternative sources must have the same voxel size, which is\n  // considered to be the base voxel size.\n  const smallestVoxelSize = sources[0].effectiveVoxelSize;\n\n  const renderScaleTarget = renderLayer.renderScaleTarget.value;\n\n  /**\n   * Determines whether we should continue to look for a finer-resolution source *after* one\n   * with the specified voxelSize.\n   */\n  const canImproveOnVoxelSize = (voxelSize: vec3) => {\n    const targetSize = pixelSize * renderScaleTarget;\n    for (let i = 0; i < 3; ++i) {\n      const size = voxelSize[i];\n      // If size <= pixelSize, no need for improvement.\n      // If size === smallestVoxelSize, also no need for improvement.\n      if (size > targetSize && size > 1.01 * smallestVoxelSize[i]) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const improvesOnPrevVoxelSize = (voxelSize: vec3, prevVoxelSize: vec3) => {\n    const targetSize = pixelSize * renderScaleTarget;\n    for (let i = 0; i < 3; ++i) {\n      const size = voxelSize[i];\n      const prevSize = prevVoxelSize[i];\n      if (Math.abs(targetSize - size) < Math.abs(targetSize - prevSize) && size < 1.01 * prevSize) {\n        return true;\n      }\n    }\n    return false;\n  };\n  let scaleIndex = sources.length - 1;\n  let prevVoxelSize: vec3|undefined;\n  while (true) {\n    const transformedSource = sources[scaleIndex];\n    if (prevVoxelSize !== undefined &&\n        !improvesOnPrevVoxelSize(transformedSource.effectiveVoxelSize, prevVoxelSize)) {\n      break;\n    }\n    yield transformedSource;\n\n    if (scaleIndex === 0 || !canImproveOnVoxelSize(transformedSource.effectiveVoxelSize)) {\n      break;\n    }\n    prevVoxelSize = transformedSource.effectiveVoxelSize;\n    --scaleIndex;\n  }\n}\n\n/**\n * Common parameters for SliceView Chunks.\n */\nexport interface SliceViewChunkSpecificationBaseOptions {\n  rank: number;\n\n  /**\n   * If not specified, defaults to an all-zero vector.  This determines lowerChunkBound.  If this is\n   * not a multiple of chunkDataSize, then voxels at lower positions may still be requested.\n   */\n  lowerVoxelBound?: Float32Array;\n\n  /**\n   * Exclusive upper bound in \"chunk\" coordinate space, in voxels.  This determines upperChunkBound.\n   */\n  upperVoxelBound: Float32Array;\n}\n\nexport interface SliceViewChunkSpecificationOptions<\n    ChunkDataSize extends Uint32Array|Float32Array = Uint32Array | Float32Array> extends\n    SliceViewChunkSpecificationBaseOptions {\n  chunkDataSize: ChunkDataSize;\n}\n\n\nexport interface SliceViewChunkSource<\n    Spec extends SliceViewChunkSpecification = SliceViewChunkSpecification> extends Disposable {\n  spec: Spec;\n}\n\nexport const SLICEVIEW_RPC_ID = 'SliceView';\nexport const SLICEVIEW_RENDERLAYER_RPC_ID = 'sliceview/RenderLayer';\nexport const SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID = 'SliceView.addVisibleLayer';\nexport const SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID = 'SliceView.removeVisibleLayer';\n\nconst tempVisibleVolumetricChunkLower = new Float32Array(3);\nconst tempVisibleVolumetricChunkUpper = new Float32Array(3);\nconst tempVisibleVolumetricModelViewProjection = mat4.create();\nconst tempVisibleVolumetricClippingPlanes = new Float32Array(24);\n\nfunction forEachVolumetricChunkWithinFrustrum<RLayer extends MultiscaleVolumetricDataRenderLayer>(\n    clippingPlanes: Float32Array, transformedSource: TransformedSource<RLayer>,\n    callback: (positionInChunks: vec3, clippingPlanes: Float32Array) => void,\n    predicate: (\n        xLower: number, yLower: number, zLower: number, xUpper: number, yUpper: number,\n        zUpper: number, clippingPlanes: Float32Array) => boolean) {\n  const lower = tempVisibleVolumetricChunkLower;\n  const upper = tempVisibleVolumetricChunkUpper;\n  const {lowerChunkDisplayBound, upperChunkDisplayBound} = transformedSource;\n  for (let i = 0; i < 3; ++i) {\n    lower[i] = Math.max(lower[i], lowerChunkDisplayBound[i]);\n    upper[i] = Math.min(upper[i], upperChunkDisplayBound[i]);\n  }\n  const {curPositionInChunks, chunkDisplayDimensionIndices} = transformedSource;\n\n  function recurse() {\n    if (!predicate(lower[0], lower[1], lower[2], upper[0], upper[1], upper[2], clippingPlanes)) {\n      return;\n    }\n\n    let splitDim = 0;\n    let splitSize = Math.max(0, upper[0] - lower[0]);\n    let volume = splitSize;\n    for (let i = 1; i < 3; ++i) {\n      const size = Math.max(0, upper[i] - lower[i]);\n      volume *= size;\n      if (size > splitSize) {\n        splitSize = size;\n        splitDim = i;\n      }\n    }\n    if (volume === 0) return;\n    if (volume === 1) {\n      curPositionInChunks[chunkDisplayDimensionIndices[0]] = lower[0];\n      curPositionInChunks[chunkDisplayDimensionIndices[1]] = lower[1];\n      curPositionInChunks[chunkDisplayDimensionIndices[2]] = lower[2];\n      callback(lower as vec3, clippingPlanes);\n      return;\n    }\n    const prevLower = lower[splitDim];\n    const prevUpper = upper[splitDim];\n    const splitPoint = Math.floor(0.5 * (prevLower + prevUpper));\n    upper[splitDim] = splitPoint;\n    recurse();\n    upper[splitDim] = prevUpper;\n    lower[splitDim] = splitPoint;\n    recurse();\n    lower[splitDim] = prevLower;\n  }\n  recurse();\n}\n\nexport function forEachVisibleVolumetricChunk<RLayer extends MultiscaleVolumetricDataRenderLayer>(\n    projectionParameters: ProjectionParameters, localPosition: Float32Array,\n    transformedSource: TransformedSource<RLayer>,\n    callback: (positionInChunks: vec3, clippingPlanes: Float32Array) => void) {\n  if (!updateFixedCurPositionInChunks(\n          transformedSource, projectionParameters.globalPosition, localPosition)) {\n    return;\n  }\n  const {size: chunkSize} = transformedSource.chunkLayout;\n  const modelViewProjection = mat4.multiply(\n      tempVisibleVolumetricModelViewProjection, projectionParameters.viewProjectionMat,\n      transformedSource.chunkLayout.transform);\n  for (let i = 0; i < 3; ++i) {\n    const s = chunkSize[i];\n    for (let j = 0; j < 4; ++j) {\n      modelViewProjection[4 * i + j] *= s;\n    }\n  }\n\n  const clippingPlanes = tempVisibleVolumetricClippingPlanes;\n  getFrustrumPlanes(clippingPlanes, modelViewProjection);\n  const lower = tempVisibleVolumetricChunkLower;\n  const upper = tempVisibleVolumetricChunkUpper;\n  lower.fill(Number.NEGATIVE_INFINITY);\n  upper.fill(Number.POSITIVE_INFINITY);\n  forEachVolumetricChunkWithinFrustrum(clippingPlanes, transformedSource, callback, isAABBVisible);\n}\n\nexport function\nforEachPlaneIntersectingVolumetricChunk<RLayer extends MultiscaleVolumetricDataRenderLayer>(\n    projectionParameters: ProjectionParameters, localPosition: Float32Array,\n    transformedSource: TransformedSource<RLayer>, chunkLayout: ChunkLayout,\n    callback: (positionInChunks: vec3) => void) {\n  if (!updateFixedCurPositionInChunks(\n          transformedSource, projectionParameters.globalPosition, localPosition)) {\n    return;\n  }\n  const {size: chunkSize} = chunkLayout;\n  const modelViewProjection = mat4.multiply(\n      tempVisibleVolumetricModelViewProjection, projectionParameters.viewProjectionMat,\n      chunkLayout.transform);\n  for (let i = 0; i < 3; ++i) {\n    const s = chunkSize[i];\n    for (let j = 0; j < 4; ++j) {\n      modelViewProjection[4 * i + j] *= s;\n    }\n  }\n\n  const invModelViewProjection = tempMat4;\n  mat4.invert(invModelViewProjection, modelViewProjection);\n  const lower = tempVisibleVolumetricChunkLower;\n  const upper = tempVisibleVolumetricChunkUpper;\n  const epsilon = 1e-3;\n  for (let i = 0; i < 3; ++i) {\n    // Add small offset of `epsilon` voxels to bias towards the higher coordinate if very close to a\n    // voxel boundary.\n    const c = invModelViewProjection[12 + i] + epsilon / chunkSize[i];\n    const xCoeff = Math.abs(invModelViewProjection[i]);\n    const yCoeff = Math.abs(invModelViewProjection[4 + i]);\n    lower[i] = Math.floor(c - xCoeff - yCoeff);\n    upper[i] = Math.floor(c + xCoeff + yCoeff + 1);\n  }\n\n  const clippingPlanes = tempVisibleVolumetricClippingPlanes;\n  for (let i = 0; i < 3; ++i) {\n    const xCoeff = modelViewProjection[4 * i];\n    const yCoeff = modelViewProjection[4 * i + 1];\n    const zCoeff = modelViewProjection[4 * i + 2];\n    clippingPlanes[i] = xCoeff;\n    clippingPlanes[4 + i] = -xCoeff;\n    clippingPlanes[8 + i] = +yCoeff;\n    clippingPlanes[12 + i] = -yCoeff;\n    clippingPlanes[16 + i] = +zCoeff;\n    clippingPlanes[20 + i] = -zCoeff;\n  }\n  {\n    const i = 3;\n    const xCoeff = modelViewProjection[4 * i];\n    const yCoeff = modelViewProjection[4 * i + 1];\n    const zCoeff = modelViewProjection[4 * i + 2];\n    clippingPlanes[i] = 1 + xCoeff;\n    clippingPlanes[4 + i] = 1 - xCoeff;\n    clippingPlanes[8 + i] = 1 + yCoeff;\n    clippingPlanes[12 + i] = 1 - yCoeff;\n    clippingPlanes[16 + i] = zCoeff;\n    clippingPlanes[20 + i] = -zCoeff;\n  }\n  if (DEBUG_CHUNK_VISIBILITY) {\n    console.log('clippingPlanes', clippingPlanes);\n    console.log('modelViewProjection', modelViewProjection.join(','));\n    console.log(`lower=${lower.join(',')}, upper=${upper.join(',')}`);\n  }\n  forEachVolumetricChunkWithinFrustrum(\n      clippingPlanes, transformedSource, callback, isAABBIntersectingPlane);\n}\n\n/**\n * For chunk layouts with finiteRank < 3, returns an adjusted chunk layout where chunk 0 in each\n * non-finite dimension is guaranteed to cover the viewport.\n */\nexport function getNormalizedChunkLayout(\n    projectionParameters: ProjectionParameters, chunkLayout: ChunkLayout): ChunkLayout {\n  const {finiteRank} = chunkLayout;\n  if (finiteRank === 3) return chunkLayout;\n  tempChunkLayout.finiteRank = finiteRank;\n  vec3.copy(tempChunkLayout.size, chunkLayout.size);\n  const transform = mat4.copy(tempChunkLayout.transform, chunkLayout.transform);\n  const invTransform = mat4.copy(tempChunkLayout.invTransform, chunkLayout.invTransform);\n  tempChunkLayout.detTransform = chunkLayout.detTransform;\n  const {invViewMatrix, width, height} = projectionParameters;\n  const depth = getViewFrustrumDepthRange(projectionParameters.projectionMat);\n  for (let chunkRenderDim = finiteRank; chunkRenderDim < 3; ++chunkRenderDim) {\n    // we want to ensure chunk [0] fully covers the viewport\n    const offset = invViewMatrix[12 + chunkRenderDim];\n    let lower = offset, upper = offset;\n    const xc = Math.abs(invViewMatrix[chunkRenderDim] * width);\n    lower -= xc;\n    upper += xc;\n    const yc = Math.abs(invViewMatrix[chunkRenderDim + 4] * height);\n    lower -= yc;\n    upper += yc;\n    const zc = Math.abs(invViewMatrix[chunkRenderDim + 8] * depth);\n    lower -= zc;\n    upper += zc;\n    const scaleFactor = Math.max(1, upper - lower);\n    transform[12 + chunkRenderDim] = lower;\n    transform[5 * chunkRenderDim] = scaleFactor;\n  }\n  mat4.invert(invTransform, transform);\n  return tempChunkLayout;\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Simple implementation of the error function\n *\n * https://en.wikipedia.org/wiki/Error_function\n *\n * Precision is 2.5e-5\n */\nexport function erf(x: number) {\n  // Abramowitz and Stegun. Handbook of Mathematical Functions\n  // Formula 7.1.26\n  // http://people.math.sfu.ca/~cbm/aands/frameindex.htm\n  const a1 = 0.254829592;\n  const a2 = -0.284496736;\n  const a3 = 1.421413741;\n  const a4 = -1.453152027;\n  const a5 = 1.061405429;\n  const p = 0.3275911;\n\n  const t = 1 / (1 + p * Math.abs(x));\n  const y = 1 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return Math.sign(x) * y;\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Velocity estimation for prefetching using exponentially-weighted moving estimate of\n * univariate gaussian distribution of per-dimension velocities.\n *\n * Because changes to the global position are not continuous, we estimate the velocity itself using\n * an exponentially-weighted moving average over a relatively short time scale\n * `velocityHalfLifeMilliseconds`, and then estimate a mean and variance of these velocity estimates\n * using an expeonentially-weighted moving average over a longer time scale.\n */\n\nconst VELOCITY_HALF_LIFE_MS = 50;\nconst MODEL_HALF_LIFE_MS = 1000;\n\nexport class VelocityEstimator {\n  private lastTime = Number.NEGATIVE_INFINITY;\n  rank = 0;\n\n  private numSamples = 0;\n\n  // Previous position sampled.\n  private prevPosition = new Float32Array();\n\n  // Moving average of raw velocity over `velocityHalfLifeMilliseconds`.\n  private velocity = new Float32Array();\n\n  // Moving average of `velocity` estimate using `modelHalfLifeMilliseconds`.\n  mean = new Float32Array();\n  // Moving variance of `velocity` estimate using `modelHalfLifeMilliseconds`.\n  variance = new Float32Array();\n\n  constructor(\n      public velocityHalfLifeMilliseconds: number = VELOCITY_HALF_LIFE_MS,\n      public modelHalfLifeMilliseconds: number = MODEL_HALF_LIFE_MS) {}\n\n  reset(rank: number) {\n    this.lastTime = Number.NEGATIVE_INFINITY;\n    this.rank = rank;\n    this.numSamples = 0;\n    this.velocity = new Float32Array(rank);\n    this.prevPosition = new Float32Array(rank);\n    this.mean = new Float32Array(rank);\n    this.variance = new Float32Array(rank);\n  }\n\n  addSample(position: Float32Array, time = Date.now()) {\n    const rank = position.length;\n    if (rank !== this.rank) {\n      this.reset(rank);\n    }\n\n    const numSamples = this.numSamples;\n    ++this.numSamples;\n\n    // Update `velocity` estimate.\n    if (this.numSamples === 0) {\n      this.prevPosition.set(position);\n      this.lastTime = time;\n      return;\n    }\n\n    const deltaT = time - this.lastTime;\n    this.lastTime = time;\n    const velocityAlpha = 1 - Math.pow(2, -(deltaT / this.velocityHalfLifeMilliseconds));\n    const modelAlpha = 1 - Math.pow(2, -(deltaT / this.modelHalfLifeMilliseconds));\n    const {velocity, prevPosition, mean, variance} = this;\n    for (let i = 0; i < rank; ++i) {\n      const curVelocitySample = (position[i] - prevPosition[i]) / Math.max(deltaT, 1);\n      prevPosition[i] = position[i];\n      const prevVelocity = velocity[i];\n      const newVelocity = velocity[i] =\n          prevVelocity + velocityAlpha * (curVelocitySample - prevVelocity);\n      if (numSamples === 1) {\n        mean[i] = newVelocity;\n      } else {\n        const meanPrev = mean[i];\n        const varPrev = variance[i];\n        const delta = newVelocity - meanPrev;\n        mean[i] = meanPrev + modelAlpha * delta;\n        variance[i] = (1 - modelAlpha) * (varPrev + modelAlpha * delta * delta);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Facility for sharing arbitrary values that support structural cloning between threads.\n */\n\nimport {WatchableValue, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst CHANGED_RPC_METHOD_ID = 'SharedWatchableValue.changed';\n\n@registerSharedObject('SharedWatchableValue')\nexport class SharedWatchableValue<T> extends SharedObjectCounterpart implements\n    WatchableValueInterface<T> {\n  base: WatchableValueInterface<T>;\n\n  /**\n   * The value is being updated to reflect a remote change.\n   * @internal\n   */\n  updatingValue_ = false;\n\n  constructor(rpc?: RPC, options: any = {}) {\n    super(rpc, options);\n    if (rpc !== undefined) {\n      this.base = new WatchableValue<T>(options['value']);\n      this.setupChangedHandler();\n    }\n  }\n\n  initializeCounterpart(rpc: RPC, options: any = {}) {\n    options['value'] = this.value;\n    super.initializeCounterpart(rpc, options);\n  }\n\n  private setupChangedHandler() {\n    this.registerDisposer(this.base.changed.add(() => {\n      if (this.updatingValue_) {\n        this.updatingValue_ = false;\n      } else {\n        const {rpc} = this;\n        if (rpc !== null) {\n          rpc.invoke(CHANGED_RPC_METHOD_ID, {'id': this.rpcId, 'value': this.value});\n        }\n      }\n    }));\n  }\n\n  static makeFromExisting<T>(rpc: RPC, base: WatchableValueInterface<T>) {\n    let obj = new SharedWatchableValue<T>();\n    obj.base = base;\n    obj.setupChangedHandler();\n    obj.initializeCounterpart(rpc);\n    return obj;\n  }\n\n  static make<T>(rpc: RPC, value: T) {\n    return SharedWatchableValue.makeFromExisting(rpc, new WatchableValue<T>(value));\n  }\n\n  get value() {\n    return this.base.value;\n  }\n\n  set value(value: T) {\n    this.base.value = value;\n  }\n\n  get changed() {\n    return this.base.changed;\n  }\n}\n\nregisterRPC(CHANGED_RPC_METHOD_ID, function(x) {\n  const obj = <SharedWatchableValue<any>>this.get(x['id']);\n  obj.updatingValue_ = true;\n  obj.base.value = x['value'];\n  obj.updatingValue_ = false;\n});\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'neuroglancer/shared_watchable_value';\n\nimport {ChunkRequester} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, PREFETCH_PRIORITY_MULTIPLIER} from 'neuroglancer/chunk_manager/base';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {RPC} from 'neuroglancer/worker_rpc';\n\n/**\n * Mixin for adding a visibility shared property to a ChunkRequester.  Calls\n * `this.chunkManager.scheduleUpdateChunkPriorities()` when visibility changes.\n */\nexport function withSharedVisibility<T extends{new (...args: any[]): ChunkRequester}>(Base: T) {\n  return class extends Base {\n    visibility: SharedWatchableValue<number>;\n\n    constructor(...args: any[]) {\n      super(...args);\n      const rpc: RPC = args[0];\n      const options: any = args[1];\n      this.visibility = rpc.get(options['visibility']);\n      this.registerDisposer(\n          this.visibility.changed.add(() => this.chunkManager.scheduleUpdateChunkPriorities()));\n    }\n  };\n}\n\n/**\n * Computes the ChunkPriorityTier for the given `visibility` value.\n *\n * A value of `Number.POSITIVE_INFINITY` means `VISIBLE`.  Any other value means `PREFETCH`.\n */\nexport function getPriorityTier(visibility: number): ChunkPriorityTier {\n  return visibility === Number.POSITIVE_INFINITY ? ChunkPriorityTier.VISIBLE :\n                                                   ChunkPriorityTier.PREFETCH;\n}\n\n/**\n * Computes the base priority for the given `visibility` value.  If the value is\n * `Number.POSTIVE_INFINITY`, corresponding to actual visibility, the base priority is 0.\n * Otherwise, the value is interpreted as the prefetch priority (higher means higher priority), and\n * the base priority is equal to the product of this value and `PREFETCH_PRIORITY_MULTIPLIER`.\n */\nexport function getBasePriority(visibility: number): number {\n  return (visibility === Number.POSITIVE_INFINITY ? 0 : visibility * PREFETCH_PRIORITY_MULTIPLIER);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'neuroglancer/render_layer_backend';\n\nimport {Chunk, ChunkConstructor, ChunkRenderLayerBackend, ChunkSource, getNextMarkGeneration, withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport { filterVisibleSources, forEachPlaneIntersectingVolumetricChunk, MultiscaleVolumetricDataRenderLayer, SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID, SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID, SLICEVIEW_RENDERLAYER_RPC_ID, SLICEVIEW_RPC_ID, SliceViewBase, SliceViewChunkSource as SliceViewChunkSourceInterface, SliceViewChunkSpecification, SliceViewRenderLayer as SliceViewRenderLayerInterface, TransformedSource, getNormalizedChunkLayout} from 'neuroglancer/sliceview/base';\nimport {ChunkLayout} from 'neuroglancer/sliceview/chunk_layout';\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {erf} from 'neuroglancer/util/erf';\nimport {vec3, vec3Key} from 'neuroglancer/util/geom';\nimport {VelocityEstimator} from 'neuroglancer/util/velocity_estimation';\nimport {getBasePriority, getPriorityTier, withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nexport const BASE_PRIORITY = -1e12;\nexport const SCALE_PRIORITY_MULTIPLIER = 1e9;\n\n// Temporary values used by SliceView.updateVisibleChunk\nconst tempChunkPosition = vec3.create();\nconst tempCenter = vec3.create();\nconst tempChunkSize = vec3.create();\n\nclass SliceViewCounterpartBase extends\n    SliceViewBase<SliceViewChunkSourceBackend, SliceViewRenderLayerBackend> {\n  constructor(rpc: RPC, options: any) {\n    super(rpc.get(options.projectionParameters));\n    this.initializeSharedObject(rpc, options['id']);\n  }\n}\n\nfunction disposeTransformedSources(\n    allSources: TransformedSource<SliceViewRenderLayerBackend, SliceViewChunkSourceBackend>[][]) {\n  for (const scales of allSources) {\n    for (const tsource of scales) {\n      tsource.source.dispose();\n    }\n  }\n}\n\nconst SliceViewIntermediateBase = withSharedVisibility(withChunkManager(SliceViewCounterpartBase));\n@registerSharedObject(SLICEVIEW_RPC_ID)\nexport class SliceViewBackend extends SliceViewIntermediateBase {\n  velocityEstimator = new VelocityEstimator();\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateVisibleChunks();\n    }));\n    this.registerDisposer(this.projectionParameters.changed.add(() => {\n      this.velocityEstimator.addSample(this.projectionParameters.value.globalPosition);\n    }));\n  }\n\n  invalidateVisibleChunks() {\n    super.invalidateVisibleChunks();\n    this.chunkManager.scheduleUpdateChunkPriorities();\n  }\n\n  handleLayerChanged = (() => {\n    this.chunkManager.scheduleUpdateChunkPriorities();\n  });\n\n  updateVisibleChunks() {\n    const projectionParameters = this.projectionParameters.value;\n    let chunkManager = this.chunkManager;\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    this.updateVisibleSources();\n    const {centerDataPosition} = projectionParameters;\n    const priorityTier = getPriorityTier(visibility);\n    let basePriority = getBasePriority(visibility);\n    basePriority += BASE_PRIORITY;\n\n    const localCenter = tempCenter;\n\n    const chunkSize = tempChunkSize;\n\n    const curVisibleChunks: SliceViewChunk[] = [];\n    this.velocityEstimator.addSample(this.projectionParameters.value.globalPosition);\n    for (const [layer, visibleLayerSources] of this.visibleLayers) {\n      chunkManager.registerLayer(layer);\n      const {visibleSources} = visibleLayerSources;\n      for (let i = 0, numVisibleSources = visibleSources.length; i < numVisibleSources; ++i) {\n        const tsource = visibleSources[i];\n        const prefetchOffsets = chunkManager.queueManager.enablePrefetch.value ?\n            getPrefetchChunkOffsets(this.velocityEstimator, tsource) :\n            [];\n        const {chunkLayout} = tsource;\n        chunkLayout.globalToLocalSpatial(localCenter, centerDataPosition);\n        const {size, finiteRank} = chunkLayout;\n        vec3.copy(chunkSize, size);\n        for (let i = finiteRank; i < 3; ++i) {\n          chunkSize[i] = 0;\n          localCenter[i] = 0;\n        }\n        const priorityIndex = i;\n        const sourceBasePriority = basePriority + SCALE_PRIORITY_MULTIPLIER * priorityIndex;\n        curVisibleChunks.length = 0;\n        const curMarkGeneration = getNextMarkGeneration();\n        forEachPlaneIntersectingVolumetricChunk(\n            projectionParameters, tsource.renderLayer.localPosition.value, tsource,\n            getNormalizedChunkLayout(projectionParameters, tsource.chunkLayout),\n            positionInChunks => {\n              vec3.multiply(tempChunkPosition, positionInChunks, chunkSize);\n              let priority = -vec3.distance(localCenter, tempChunkPosition);\n              const {curPositionInChunks} = tsource;\n              let chunk = tsource.source.getChunk(curPositionInChunks);\n              chunkManager.requestChunk(chunk, priorityTier, sourceBasePriority + priority);\n              ++layer.numVisibleChunksNeeded;\n              if (chunk.state === ChunkState.GPU_MEMORY) {\n                ++layer.numVisibleChunksAvailable;\n              }\n              curVisibleChunks.push(chunk);\n              // Mark visible chunks to avoid duplicate work when prefetching.  Once we hit a\n              // visible chunk, we don't continue prefetching in the same direction.\n              chunk.markGeneration = curMarkGeneration;\n            });\n        if (prefetchOffsets.length !== 0) {\n          const {curPositionInChunks} = tsource;\n          for (const visibleChunk of curVisibleChunks) {\n            curPositionInChunks.set(visibleChunk.chunkGridPosition);\n            for (let j = 0, length = prefetchOffsets.length; j < length;) {\n              const chunkDim = prefetchOffsets[j];\n              const minChunk = prefetchOffsets[j + 2];\n              const maxChunk = prefetchOffsets[j + 3];\n              const newPriority = prefetchOffsets[j + 4];\n              const jumpOffset = prefetchOffsets[j + 5];\n              const oldIndex = curPositionInChunks[chunkDim];\n              const newIndex = oldIndex + prefetchOffsets[j + 1];\n              if (newIndex < minChunk || newIndex > maxChunk) {\n                j = jumpOffset;\n                continue;\n              }\n              curPositionInChunks[chunkDim] = newIndex;\n              const chunk = tsource.source.getChunk(curPositionInChunks);\n              curPositionInChunks[chunkDim] = oldIndex;\n              if (chunk.markGeneration === curMarkGeneration) {\n                j = jumpOffset;\n                continue;\n              }\n              if (!Number.isFinite(newPriority)) {\n                debugger;\n              }\n              chunkManager.requestChunk(\n                  chunk, ChunkPriorityTier.PREFETCH, sourceBasePriority + newPriority);\n              ++layer.numPrefetchChunksNeeded;\n              if (chunk.state === ChunkState.GPU_MEMORY) {\n                ++layer.numPrefetchChunksAvailable;\n              }\n              j += PREFETCH_ENTRY_SIZE;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  removeVisibleLayer(layer: SliceViewRenderLayerBackend) {\n    const {visibleLayers} = this;\n    const layerInfo = visibleLayers.get(layer)!;\n    visibleLayers.delete(layer);\n    disposeTransformedSources(layerInfo.allSources);\n    layer.renderScaleTarget.changed.remove(this.invalidateVisibleSources);\n    layer.localPosition.changed.remove(this.handleLayerChanged);\n    this.invalidateVisibleSources();\n  }\n\n  addVisibleLayer(\n      layer: SliceViewRenderLayerBackend,\n      allSources: TransformedSource<SliceViewRenderLayerBackend, SliceViewChunkSourceBackend>[][]) {\n    const {displayDimensionRenderInfo} = this.projectionParameters.value;\n    let layerInfo = this.visibleLayers.get(layer);\n    if (layerInfo === undefined) {\n      layerInfo = {\n        allSources,\n        visibleSources: [],\n        displayDimensionRenderInfo: displayDimensionRenderInfo,\n      };\n      this.visibleLayers.set(layer, layerInfo);\n      layer.renderScaleTarget.changed.add(() => this.invalidateVisibleSources());\n      layer.localPosition.changed.add(this.handleLayerChanged);\n    } else {\n      disposeTransformedSources(layerInfo.allSources);\n      layerInfo.allSources = allSources;\n      layerInfo.visibleSources.length = 0;\n      layerInfo.displayDimensionRenderInfo = displayDimensionRenderInfo;\n    }\n    this.invalidateVisibleSources();\n  }\n\n  disposed() {\n    for (let layer of this.visibleLayers.keys()) {\n      this.removeVisibleLayer(layer);\n    }\n    super.disposed();\n  }\n\n  invalidateVisibleSources() {\n    super.invalidateVisibleSources();\n    this.chunkManager.scheduleUpdateChunkPriorities();\n  }\n}\n\nexport function deserializeTransformedSources<\n    Source extends SliceViewChunkSourceBackend, RLayer extends MultiscaleVolumetricDataRenderLayer>(\n    rpc: RPC, serializedSources: any[][], layer: any) {\n  const sources = serializedSources.map(\n      scales => scales.map((serializedSource): TransformedSource<RLayer, Source> => {\n        const source = rpc.getRef<Source>(serializedSource.source);\n        const chunkLayout = serializedSource.chunkLayout;\n        const {rank} = source.spec;\n        const tsource: TransformedSource<RLayer, Source> = {\n          renderLayer: layer,\n          source,\n          chunkLayout: ChunkLayout.fromObject(chunkLayout),\n          layerRank: serializedSource.layerRank,\n          nonDisplayLowerClipBound: serializedSource.nonDisplayLowerClipBound,\n          nonDisplayUpperClipBound: serializedSource.nonDisplayUpperClipBound,\n          lowerClipBound: serializedSource.lowerClipBound,\n          upperClipBound: serializedSource.upperClipBound,\n          lowerClipDisplayBound: serializedSource.lowerClipDisplayBound,\n          upperClipDisplayBound: serializedSource.upperClipDisplayBound,\n          lowerChunkDisplayBound: serializedSource.lowerChunkDisplayBound,\n          upperChunkDisplayBound: serializedSource.upperChunkDisplayBound,\n          effectiveVoxelSize: serializedSource.effectiveVoxelSize,\n          chunkDisplayDimensionIndices: serializedSource.chunkDisplayDimensionIndices,\n          fixedLayerToChunkTransform: serializedSource.fixedLayerToChunkTransform,\n          combinedGlobalLocalToChunkTransform: serializedSource.combinedGlobalLocalToChunkTransform,\n          curPositionInChunks: new Float32Array(rank),\n          fixedPositionWithinChunk: new Uint32Array(rank),\n        };\n        return tsource;\n      }));\n  return sources;\n}\nregisterRPC(SLICEVIEW_ADD_VISIBLE_LAYER_RPC_ID, function(x) {\n  const obj = <SliceViewBackend>this.get(x['id']);\n  const layer = <SliceViewRenderLayerBackend>this.get(x['layerId']);\n  const sources =\n      deserializeTransformedSources<SliceViewChunkSourceBackend, SliceViewRenderLayerBackend>(\n          this, x.sources, layer);\n  obj.addVisibleLayer(layer, sources);\n});\nregisterRPC(SLICEVIEW_REMOVE_VISIBLE_LAYER_RPC_ID, function(x) {\n  let obj = <SliceViewBackend>this.get(x['id']);\n  let layer = <SliceViewRenderLayerBackend>this.get(x['layerId']);\n  obj.removeVisibleLayer(layer);\n});\n\nexport class SliceViewChunk extends Chunk {\n  chunkGridPosition: Float32Array;\n  source: SliceViewChunkSourceBackend|null = null;\n\n  constructor() {\n    super();\n  }\n\n  initializeVolumeChunk(key: string, chunkGridPosition: Float32Array) {\n    super.initialize(key);\n    this.chunkGridPosition = Float32Array.from(chunkGridPosition);\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg['chunkGridPosition'] = this.chunkGridPosition;\n  }\n\n  downloadSucceeded() {\n    super.downloadSucceeded();\n  }\n\n  freeSystemMemory() {}\n\n  toString() {\n    return this.source!.toString() + ':' + vec3Key(this.chunkGridPosition);\n  }\n}\n\nexport interface SliceViewChunkSourceBackend<\n    Spec extends SliceViewChunkSpecification = SliceViewChunkSpecification,\n                 ChunkType extends SliceViewChunk = SliceViewChunk> {\n  // TODO(jbms): Move this declaration to the class definition below and declare abstract once\n  // TypeScript supports mixins with abstact classes.\n  getChunk(chunkGridPosition: vec3): ChunkType;\n\n  chunkConstructor: ChunkConstructor<SliceViewChunk>;\n}\n\nexport class SliceViewChunkSourceBackend<\n    Spec extends SliceViewChunkSpecification = SliceViewChunkSpecification,\n                 ChunkType extends SliceViewChunk = SliceViewChunk> extends ChunkSource implements\n    SliceViewChunkSourceInterface {\n  spec: Spec;\n  chunks: Map<string, ChunkType>;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.spec = options.spec;\n  }\n\n  getChunk(chunkGridPosition: Float32Array) {\n    const key = chunkGridPosition.join();\n    let chunk = this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(this.chunkConstructor) as ChunkType;\n      chunk.initializeVolumeChunk(key, chunkGridPosition);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(SLICEVIEW_RENDERLAYER_RPC_ID)\nexport class SliceViewRenderLayerBackend extends SharedObjectCounterpart implements\n    SliceViewRenderLayerInterface, ChunkRenderLayerBackend {\n  rpcId: number;\n  renderScaleTarget: SharedWatchableValue<number>;\n  localPosition: WatchableValueInterface<Float32Array>;\n\n  numVisibleChunksNeeded: number;\n  numVisibleChunksAvailable: number;\n  numPrefetchChunksNeeded: number;\n  numPrefetchChunksAvailable: number;\n  chunkManagerGeneration: number;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.renderScaleTarget = rpc.get(options.renderScaleTarget);\n    this.localPosition = rpc.get(options.localPosition);\n    this.numVisibleChunksNeeded = 0;\n    this.numVisibleChunksAvailable = 0;\n    this.numPrefetchChunksAvailable = 0;\n    this.numPrefetchChunksNeeded = 0;\n    this.chunkManagerGeneration = -1;\n  }\n\n  filterVisibleSources(sliceView: SliceViewBase, sources: readonly TransformedSource[]):\n      Iterable<TransformedSource> {\n    return filterVisibleSources(sliceView, this, sources);\n  }\n}\n\nconst PREFETCH_MS = 2000;\nconst MAX_PREFETCH_VELOCITY = 0.1;  // voxels per millisecond\nconst MAX_SINGLE_DIRECTION_PREFETCH_CHUNKS =\n    32;  // Maximum number of chunks to prefetch in a single direction.\n\n// If the probability under the model of needing a chunk within `PREFETCH_MS` is less than this\n// probability, skip prefetching it.\nconst PREFETCH_PROBABILITY_CUTOFF = 0.05;\n\nconst PREFETCH_ENTRY_SIZE = 6;\n\nfunction getPrefetchChunkOffsets(\n    velocityEstimator: VelocityEstimator, tsource: TransformedSource): number[] {\n  const offsets: number[] = [];\n  const globalRank = velocityEstimator.rank;\n  const {combinedGlobalLocalToChunkTransform, layerRank} = tsource;\n\n  const {rank: chunkRank, chunkDataSize} = tsource.source.spec;\n  const {mean: meanVec, variance: varianceVec} = velocityEstimator;\n  for (let chunkDim = 0; chunkDim < chunkRank; ++chunkDim) {\n    const isDisplayDimension = tsource.chunkDisplayDimensionIndices.includes(chunkDim);\n    let mean = 0;\n    let variance = 0;\n    for (let globalDim = 0; globalDim < globalRank; ++globalDim) {\n      const meanValue = meanVec[globalDim];\n      const varianceValue = varianceVec[globalDim];\n      const coeff = combinedGlobalLocalToChunkTransform[globalDim * layerRank + chunkDim];\n      mean += coeff * meanValue;\n      variance += coeff * coeff * varianceValue;\n    }\n    if (mean > MAX_PREFETCH_VELOCITY) {\n      continue;\n    }\n    const chunkSize = chunkDataSize[chunkDim];\n    const initialFraction =\n        isDisplayDimension ? 0 : tsource.fixedPositionWithinChunk[chunkDim] / chunkSize;\n    const adjustedMean = mean / chunkSize * PREFETCH_MS;\n    let adjustedStddevTimesSqrt2 = Math.sqrt(2 * variance) / chunkSize * PREFETCH_MS;\n    if (Math.abs(adjustedMean) < 1e-3 && adjustedStddevTimesSqrt2 < 1e-3) {\n      continue;\n    }\n    adjustedStddevTimesSqrt2 = Math.max(1e-6, adjustedStddevTimesSqrt2);\n    const cdf = (x: number) => 0.5 * (1 + erf((x - adjustedMean) / adjustedStddevTimesSqrt2));\n\n    const curChunk = tsource.curPositionInChunks[chunkDim];\n    const minChunk = Math.floor(tsource.lowerClipBound[chunkDim] / chunkSize);\n    const maxChunk = Math.ceil(tsource.upperClipBound[chunkDim] / chunkSize) - 1;\n    let groupStart = offsets.length;\n    for (let i = 1; i <= MAX_SINGLE_DIRECTION_PREFETCH_CHUNKS; ++i) {\n      if (!isDisplayDimension && curChunk + i > maxChunk) break;\n      const probability = 1 - cdf(i - initialFraction);\n      // Probability that chunk `curChunk + i` will be needed within `PREFETCH_MS`.\n      if (probability < PREFETCH_PROBABILITY_CUTOFF) break;\n      offsets.push(chunkDim, i, minChunk, maxChunk, probability, 0);\n    }\n    let newGroupStart = offsets.length;\n    for (let i = groupStart, end = offsets.length; i < end; i += PREFETCH_ENTRY_SIZE) {\n      offsets[i + PREFETCH_ENTRY_SIZE - 1] = newGroupStart;\n    }\n    groupStart = newGroupStart;\n\n    for (let i = 1; i <= MAX_SINGLE_DIRECTION_PREFETCH_CHUNKS; ++i) {\n      if (!isDisplayDimension && curChunk - i < minChunk) break;\n      const probability = cdf(-i + 1 - initialFraction);\n      // Probability that chunk `curChunk - i` will be needed within `PREFETCH_MS`.\n      if (probability < PREFETCH_PROBABILITY_CUTOFF) break;\n      offsets.push(chunkDim, -i, minChunk, maxChunk, probability, 0);\n    }\n    newGroupStart = offsets.length;\n    for (let i = groupStart, end = offsets.length; i < end; i += PREFETCH_ENTRY_SIZE) {\n      offsets[i + PREFETCH_ENTRY_SIZE - 1] = newGroupStart;\n    }\n  }\n  return offsets;\n}\n", "/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PERSPECTIVE_VIEW_RPC_ID = 'perspective_view/PerspectiveView';\n", "/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Backend component of PerspectivePanel.  This allows the optional backend component of a\n * PerspectiveViewRenderLayer to set chunk priorities based on the state of the perspective panel.\n */\n\nimport {PERSPECTIVE_VIEW_RPC_ID} from 'neuroglancer/perspective_view/base';\nimport {ProjectionParameters} from 'neuroglancer/projection_parameters';\nimport {RenderedViewBackend, RenderLayerBackend} from 'neuroglancer/render_layer_backend';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\n@registerSharedObject(PERSPECTIVE_VIEW_RPC_ID)\nexport class PerspectiveViewBackend extends SharedObjectCounterpart implements RenderedViewBackend {\n  visibility: SharedWatchableValue<number>;\n  projectionParameters: SharedWatchableValue<ProjectionParameters>;\n  constructor(...args: any[]) {\n    super(...args);\n    const rpc: RPC = args[0];\n    const options: any = args[1];\n    this.visibility = rpc.get(options.visibility);\n    this.projectionParameters = rpc.get(options.projectionParameters);\n  }\n}\nexport class PerspectiveViewRenderLayerBackend<AttachmentState = unknown> extends\n    RenderLayerBackend<PerspectiveViewBackend, AttachmentState> {}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ProjectionParameters} from 'neuroglancer/projection_parameters';\nimport {forEachVisibleVolumetricChunk, MultiscaleVolumetricDataRenderLayer, TransformedSource} from 'neuroglancer/sliceview/base';\nimport {VolumeChunkSource} from 'neuroglancer/sliceview/volume/base';\nimport {getViewFrustrumDepthRange, mat3, mat3FromMat4, prod3, vec3} from 'neuroglancer/util/geom';\n\nexport const VOLUME_RENDERING_RENDER_LAYER_RPC_ID = 'volume_rendering/VolumeRenderingRenderLayer';\nexport const VOLUME_RENDERING_RENDER_LAYER_UPDATE_SOURCES_RPC_ID =\n    'volume_rendering/VolumeRenderingRenderLayer/update';\n\n// FIXME: make this variable\nexport const volumeRenderingDepthSamples = 64;\n\nconst tempMat3 = mat3.create();\n// const tempMat4 = mat4.create();\n// const tempVisibleVolumetricClippingPlanes = new Float32Array(24);\n\nexport function getVolumeRenderingNearFarBounds(\n    clippingPlanes: Float32Array, displayLowerBound: Float32Array,\n    displayUpperBound: Float32Array) {\n  let volumeMinZ = 0, volumeMaxZ = 0;\n  for (let i = 0; i < 3; ++i) {\n    const planeCoeff = clippingPlanes[16 + i];\n    const a = planeCoeff * displayLowerBound[i], b = planeCoeff * displayUpperBound[i];\n    volumeMinZ += Math.min(a, b);\n    volumeMaxZ += Math.max(a, b);\n  }\n  const near = -clippingPlanes[19];\n  const adjustedNear = Math.max(near, volumeMinZ);\n  const far = clippingPlanes[23];\n  const adjustedFar = Math.min(far, volumeMaxZ);\n  return {near, far, adjustedNear, adjustedFar};\n}\n\n// Returns target volume in \"world\" space.\n// function getTargetVolume(\n//     tsource: TransformedSource<MultiscaleVolumetricDataRenderLayer>,\n//     projectionParameters: ProjectionParameters) {\n//   const modelViewProjection = mat4.multiply(\n//       tempMat4, projectionParameters.viewProjectionMat, tsource.chunkLayout.transform);\n//   const clippingPlanes = tempVisibleVolumetricClippingPlanes;\n//   getFrustrumPlanes(clippingPlanes, modelViewProjection);\n//   const {near, far} = getVolumeRenderingNearFarBounds(\n//       clippingPlanes, tsource.lowerClipDisplayBound, tsource.upperClipDisplayBound);\n//   if (near === far) return -1;\n//   const depthRange = (far - near);\n//   const targetSpacing = depthRange / volumeRenderingDepthSamples;\n//   const targetVolume = targetSpacing ** 3;\n//   return targetVolume * tsource.chunkLayout.detTransform;\n// }\n\nexport function forEachVisibleVolumeRenderingChunk<\n    RLayer extends MultiscaleVolumetricDataRenderLayer, Source extends\n        VolumeChunkSource, Transformed extends TransformedSource<RLayer, Source>>(\n    projectionParameters: ProjectionParameters, localPosition: Float32Array,\n    renderScaleTarget: number, transformedSources: readonly Transformed[],\n    beginScale: (\n        source: Transformed, index: number, physicalSpacing: number, pixelSpacing: number,\n        clippingPlanes: Float32Array) => void,\n    callback: (source: Transformed, index: number, positionInChunks: vec3) => void) {\n  renderScaleTarget;\n  if (transformedSources.length === 0) return;\n  const {viewMatrix, projectionMat, displayDimensionRenderInfo} = projectionParameters;\n  const {voxelPhysicalScales} = displayDimensionRenderInfo;\n  const canonicalToPhysicalScale = prod3(voxelPhysicalScales);\n\n  // Target voxel spacing in view space.\n  const targetViewSpacing = getViewFrustrumDepthRange(projectionMat) / volumeRenderingDepthSamples;\n  // Target voxel volume in view space.\n  const targetViewVolume = targetViewSpacing ** 3;\n  const viewDet = mat3.determinant(mat3FromMat4(tempMat3, viewMatrix));\n\n  // Target voxel volume in view space.\n  // const targetViewVolume = getTargetVolume(transformedSources[0], projectionParameters) *\n  // viewDet;\n\n  // Returns volume of a single voxel of source `scaleIndex` in \"view\" space.\n  const getViewVolume = (scaleIndex: number) => {\n    const tsource = transformedSources[scaleIndex];\n    return Math.abs(tsource.chunkLayout.detTransform * viewDet);\n  };\n  // Index of source with voxel volume that is closest to `targetViewVolume`.\n  let bestScaleIndex = transformedSources.length - 1;\n  // Voxel volume in \"view\" space of source `bestScaleIndex`.\n  let bestViewVolume = getViewVolume(bestScaleIndex);\n  for (let scaleIndex = bestScaleIndex - 1; scaleIndex >= 0; --scaleIndex) {\n    const viewVolume = getViewVolume(scaleIndex);\n    if (Math.abs(viewVolume - targetViewVolume) < Math.abs(bestViewVolume - targetViewVolume)) {\n      bestViewVolume = viewVolume;\n      bestScaleIndex = scaleIndex;\n    } else {\n      break;\n    }\n  }\n\n  const physicalSpacing = Math.pow(bestViewVolume * canonicalToPhysicalScale / viewDet, 1 / 3);\n  const pixelSpacing =\n      Math.pow(bestViewVolume, 1 / 3) * projectionParameters.width / (2 * projectionMat[0]);\n  let firstChunk = true;\n  const tsource = transformedSources[bestScaleIndex];\n  forEachVisibleVolumetricChunk(\n      projectionParameters, localPosition, tsource, (positionInChunks, clippingPlanes) => {\n        if (firstChunk) {\n          beginScale(tsource, bestScaleIndex, physicalSpacing, pixelSpacing, clippingPlanes);\n          firstChunk = false;\n        }\n        callback(tsource, bestScaleIndex, positionInChunks);\n      });\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {DisplayDimensionRenderInfo} from 'neuroglancer/navigation_state';\nimport {RenderedViewBackend, RenderLayerBackend, RenderLayerBackendAttachment} from 'neuroglancer/render_layer_backend';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {BASE_PRIORITY, deserializeTransformedSources, SCALE_PRIORITY_MULTIPLIER} from 'neuroglancer/sliceview/backend';\nimport {TransformedSource} from 'neuroglancer/sliceview/base';\nimport {VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {getBasePriority, getPriorityTier} from 'neuroglancer/visibility_priority/backend';\nimport {forEachVisibleVolumeRenderingChunk, VOLUME_RENDERING_RENDER_LAYER_RPC_ID, VOLUME_RENDERING_RENDER_LAYER_UPDATE_SOURCES_RPC_ID} from 'neuroglancer/volume_rendering/base';\nimport {registerRPC, registerSharedObject, RPC} from 'neuroglancer/worker_rpc';\n\ninterface VolumeRenderingRenderLayerAttachmentState {\n  displayDimensionRenderInfo: DisplayDimensionRenderInfo;\n  transformedSources: TransformedSource<VolumeRenderingRenderLayerBackend, VolumeChunkSource>[][];\n}\n\nconst tempChunkPosition = vec3.create();\nconst tempCenter = vec3.create();\nconst tempChunkSize = vec3.create();\nconst tempCenterDataPosition = vec3.create();\n\n@registerSharedObject(VOLUME_RENDERING_RENDER_LAYER_RPC_ID)\nclass VolumeRenderingRenderLayerBackend extends withChunkManager\n(RenderLayerBackend) {\n  localPosition: SharedWatchableValue<Float32Array>;\n  renderScaleTarget: SharedWatchableValue<number>;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.renderScaleTarget = rpc.get(options.renderScaleTarget);\n    this.localPosition = rpc.get(options.localPosition);\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    this.registerDisposer(this.localPosition.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(this.renderScaleTarget.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(\n        this.chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));\n  }\n\n  attach(attachment: RenderLayerBackendAttachment<\n         RenderedViewBackend, VolumeRenderingRenderLayerAttachmentState>) {\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    const {view} = attachment;\n    attachment.registerDisposer(scheduleUpdateChunkPriorities);\n    attachment.registerDisposer(\n        view.projectionParameters.changed.add(scheduleUpdateChunkPriorities));\n    attachment.registerDisposer(view.visibility.changed.add(scheduleUpdateChunkPriorities));\n    attachment.state = {\n      displayDimensionRenderInfo: view.projectionParameters.value.displayDimensionRenderInfo,\n      transformedSources: [],\n    };\n  }\n\n  private recomputeChunkPriorities() {\n    for (const attachment of this.attachments.values()) {\n      const {view} = attachment;\n      const visibility = view.visibility.value;\n      if (visibility === Number.NEGATIVE_INFINITY) {\n        continue;\n      }\n      const {transformedSources, displayDimensionRenderInfo} =\n          attachment.state as VolumeRenderingRenderLayerAttachmentState;\n      if (transformedSources.length === 0 ||\n          displayDimensionRenderInfo !==\n              view.projectionParameters.value.displayDimensionRenderInfo) {\n        continue;\n      }\n\n      const projectionParameters = view.projectionParameters.value;\n      const priorityTier = getPriorityTier(visibility);\n      let basePriority = getBasePriority(visibility);\n      basePriority += BASE_PRIORITY;\n      const localCenter = tempCenter;\n      const chunkSize = tempChunkSize;\n      const centerDataPosition = tempCenterDataPosition;\n      const {globalPosition, displayDimensionRenderInfo: {displayDimensionIndices}} =\n          projectionParameters;\n      for (let displayDim = 0; displayDim < 3; ++displayDim) {\n        const globalDim = displayDimensionIndices[displayDim];\n        centerDataPosition[displayDim] = globalDim === -1 ? 0 : globalPosition[globalDim];\n      }\n      let sourceBasePriority: number;\n      const {chunkManager} = this;\n      chunkManager.registerLayer(this);\n      forEachVisibleVolumeRenderingChunk(\n          projectionParameters, this.localPosition.value, this.renderScaleTarget.value,\n          transformedSources[0],\n          (tsource, scaleIndex) => {\n            const {chunkLayout} = tsource;\n            for (let i = 0; i < 3; ++i) {\n            }\n            chunkLayout.globalToLocalSpatial(localCenter, centerDataPosition);\n            const {size, finiteRank} = chunkLayout;\n            vec3.copy(chunkSize, size);\n            for (let i = finiteRank; i < 3; ++i) {\n              chunkSize[i] = 0;\n              localCenter[i] = 0;\n            }\n            const priorityIndex = transformedSources[0].length - 1 - scaleIndex;\n            sourceBasePriority = basePriority + SCALE_PRIORITY_MULTIPLIER * priorityIndex;\n          },\n          (tsource, _, positionInChunks) => {\n            vec3.multiply(tempChunkPosition, positionInChunks, chunkSize);\n            const priority = -vec3.distance(localCenter, tempChunkPosition);\n            const chunk = tsource.source.getChunk(tsource.curPositionInChunks);\n            ++this.numVisibleChunksNeeded;\n            chunkManager.requestChunk(chunk, priorityTier, sourceBasePriority + priority);\n            if (chunk.state === ChunkState.GPU_MEMORY) {\n              ++this.numVisibleChunksAvailable;\n            }\n          });\n    }\n  }\n}\nVolumeRenderingRenderLayerBackend;\n\nregisterRPC(VOLUME_RENDERING_RENDER_LAYER_UPDATE_SOURCES_RPC_ID, function(x) {\n  const view = this.get(x.view) as RenderedViewBackend;\n  const layer = this.get(x.layer) as VolumeRenderingRenderLayerBackend;\n  const attachment = layer.attachments.get(view)! as\n      RenderLayerBackendAttachment<RenderedViewBackend, VolumeRenderingRenderLayerAttachmentState>;\n  attachment.state!.transformedSources =\n      deserializeTransformedSources<VolumeChunkSource, VolumeRenderingRenderLayerBackend>(\n          this, x.sources, layer);\n  attachment.state!.displayDimensionRenderInfo =\n      attachment.view.projectionParameters.value.displayDimensionRenderInfo;\n  layer.chunkManager.scheduleUpdateChunkPriorities();\n});\n", "/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst tempArray = new Float32Array(1);\n\n/**\n * Converts `x` into its nearest single precision float representation and\n * returns a minimal string representation, with as many digits as necessary\n * to uniquely distinguish single precision `x` from its adjacent single\n * precision values.\n *\n * E.g.: 0.299999999000000017179701217174d \u2192 0.30000001192092896f \u2192 '0.3')\n */\nexport function float32ToString(x: number) {\n  tempArray[0] = x;\n  x = tempArray[0];\n  for (let digits = 1; digits < 21; ++digits) {\n    let result = x.toPrecision(digits);\n    tempArray[0] = parseFloat(result);\n    if (tempArray[0] === x) {\n      return result;\n    }\n  }\n  return x.toString();\n}\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function hexEncodeByte(x: number) {\n  return ('0' + x.toString(16)).slice(-2);\n}\n\nexport function hexEncode(arr: Uint8Array) {\n  return Array.prototype.map.call(arr, hexEncodeByte).join('');\n}\n\nexport function hexDecode(x: string) {\n  if (!/^(?:[0-9a-fA-F]{2})*$/.test(x)) {\n    throw new Error('Invalid hex-encoded string');\n  }\n  const length = x.length / 2;\n  const result = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    result[i] = parseInt(x.substr(i * 2, 2), 16);\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Facilities for converting between strings and RGB/RGBA colors.\n */\n\nimport {WatchableValue} from 'neuroglancer/trackable_value';\nimport {float32ToString} from 'neuroglancer/util/float32_to_string';\nimport {vec3, vec4} from 'neuroglancer/util/geom';\nimport {hexEncodeByte} from 'neuroglancer/util/hex';\n\n/**\n * Parse the serialization of a color.\n *\n * This is based on the definition here:\n * https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n */\nexport function parseColorSerialization(x: string) {\n  const rgbaPattern = /^rgba\\(([0-9]+), ([0-9]+), ([0-9]+), (0(?:\\.[0-9]+)?)\\)$/;\n  {\n    const m = x.match(rgbaPattern);\n    if (m !== null) {\n      return [parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10), parseFloat(m[4])];\n    }\n  }\n  const hexPattern = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\n  {\n    const m = x.match(hexPattern);\n    if (m !== null) {\n      return [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), 1.0];\n    }\n  }\n  throw new Error(`Invalid serialized color: ${JSON.stringify(x)}.`);\n}\n\nexport function parseRGBAColorSpecification(x: any) {\n  try {\n    if (typeof x !== 'string') {\n      throw new Error(`Expected string, but received ${JSON.stringify(x)}.`);\n    }\n    const context = document.createElement('canvas').getContext('2d')!;\n    context.fillStyle = x;\n    const result = parseColorSerialization(context.fillStyle);\n    return vec4.fromValues(result[0] / 255, result[1] / 255, result[2] / 255, result[3]);\n  } catch (parseError) {\n    throw new Error(`Failed to parse color specification: ${parseError.message}`);\n  }\n}\n\nexport function parseRGBColorSpecification(x: any) {\n  const result = parseRGBAColorSpecification(x);\n  return <vec3>result.subarray(0, 3);\n}\n\n/**\n * Returns an integer formed by concatenating the channels of the input color vector.\n * Each channel is clamped to the range [0.0, 1.0] before being converted to 8 bits.\n * An RGB color is packed into 24 bits, and a RGBA into 32 bits.\n */\nexport function packColor(x: vec3|vec4): number {\n  const size = (x[3] === undefined) ? 3 : 4;\n  let result = 0;\n  for (let i = 0; i < size; i++) {\n    // The \">>> 0\" ensures an unsigned value.\n    result =\n        ((result << 8) >>> 0) + Math.min(255, Math.max(0, (Math.round(x[size - 1 - i] * 255))));\n  }\n  return result;\n}\n\nexport function unpackRGB(value: number) {\n  return vec3.fromValues(\n      ((value >>> 0) & 0xff) / 255, ((value >>> 8) & 0xff) / 255, ((value >>> 16) & 0xff) / 255);\n}\n\nexport function unpackRGBA(value: number) {\n  return vec4.fromValues(\n      ((value >>> 0) & 0xff) / 255, ((value >>> 8) & 0xff) / 255, ((value >>> 16) & 0xff) / 255,\n      ((value >>> 24) & 0xff) / 255);\n}\n\nexport function serializeColor(x: vec3|vec4) {\n  if (x[3] === undefined || x[3] === 1) {\n    let result = '#';\n    for (let i = 0; i < 3; ++i) {\n      result += hexEncodeByte(Math.min(255, Math.max(0, Math.round(x[i] * 255))));\n    }\n    return result;\n  } else {\n    let result = 'rgba(';\n    for (let i = 0; i < 3; ++i) {\n      if (i !== 0) {\n        result += ', ';\n      }\n      result += Math.min(255, Math.max(0, Math.round(x[i] * 255)));\n    }\n    result += `, ${float32ToString(x[3])})`;\n    return result;\n  }\n}\n\n// Converts an sRGB color component to the gamma-expanded (\"linear\") value.\nexport function srgbGammaExpand(value: number) {\n  return value <= 0.03928 ? value / 12.92 : ((value + 0.055) / 1.055) ** 2.4;\n}\n\n// Computes the relative luminance according to Web Content Accessibility Guidelines (WCAG) 2.0\n//\n// https://www.w3.org/TR/WCAG20/#relativeluminancedef\n//\n// @param color sRGB color\nexport function getRelativeLuminance(color: vec3|vec4) {\n  const [r, g, b] = color;\n  return 0.2126 * srgbGammaExpand(r) + 0.7152 * srgbGammaExpand(g) + 0.0722 * srgbGammaExpand(b);\n}\n\n// Determines whether a white background would provide higher contrast than a black background for\n// the given foreground color.\n//\n// This is determined according to the Web Content Accessibility Guidelines (WCAG) 2.0:\n// https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n//\n// https://stackoverflow.com/a/3943023\nexport function useWhiteBackground(foregroundColor: vec3|vec4) {\n  return getRelativeLuminance(foregroundColor) <= 0.179;\n}\n\nexport class TrackableRGB extends WatchableValue<vec3> {\n  constructor(public defaultValue: vec3) {\n    super(vec3.clone(defaultValue));\n  }\n  toString() {\n    return serializeColor(this.value);\n  }\n  toJSON() {\n    if (vec3.equals(this.value, this.defaultValue)) {\n      return undefined;\n    } else {\n      return serializeColor(this.value);\n    }\n  }\n  reset() {\n    this.value = vec3.clone(this.defaultValue);\n  }\n  restoreState(x: any) {\n    if (x === undefined) {\n      this.reset();\n      return;\n    }\n    const {value} = this;\n    const newValue = parseRGBColorSpecification(x);\n    if (!vec3.equals(value, newValue)) {\n      this.value = newValue;\n    }\n  }\n}\n\nexport class TrackableOptionalRGB extends WatchableValue<vec3|undefined> {\n  constructor() {\n    super(undefined);\n  }\n  toJSON() {\n    const {value} = this;\n    if (value === undefined) return undefined;\n    return serializeColor(value);\n  }\n  reset() {\n    this.value = undefined;\n  }\n  restoreState(x: any) {\n    if (x === undefined) {\n      this.reset();\n      return;\n    }\n    const {value} = this;\n    const newValue = parseRGBColorSpecification(x);\n    if (value === undefined || !vec3.equals(value, newValue)) {\n      this.value = newValue;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Facilities for endianness detection and swapping.\n */\n\nexport enum Endianness {\n  LITTLE = 0,\n  BIG = 1\n}\n\nexport function determineEndianness() {\n  const a = Uint16Array.of(0x1122);\n  const b = new Uint8Array(a.buffer);\n  return b[0] === 0x11 ? Endianness.BIG : Endianness.LITTLE;\n}\n\n/**\n * The native endianness of the runtime.\n */\nexport const ENDIANNESS = determineEndianness();\n\n/**\n * Swaps the endianness of an array assumed to contain 16-bit values.\n */\nexport function swapEndian16(array: ArrayBufferView) {\n  let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  for (let i = 0, length = view.length; i < length; i += 2) {\n    let temp = view[i];\n    view[i] = view[i + 1];\n    view[i + 1] = temp;\n  }\n}\n\n/**\n * Swaps the endianness of an array assumed to contain 32-bit values.\n */\nexport function swapEndian32(array: ArrayBufferView) {\n  let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  for (let i = 0, length = view.length; i < length; i += 4) {\n    let temp = view[i];\n    view[i] = view[i + 3];\n    view[i + 3] = temp;\n    temp = view[i + 1];\n    view[i + 1] = view[i + 2];\n    view[i + 2] = temp;\n  }\n}\n\nexport function swapEndian64(array: ArrayBufferView) {\n  let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  for (let i = 0, length = view.length; i < length; i += 8) {\n    let temp = view[i];\n    view[i] = view[i + 7];\n    view[i + 7] = temp;\n    temp = view[i + 1];\n    view[i + 1] = view[i + 6];\n    view[i + 6] = temp;\n    temp = view[i + 2];\n    view[i + 2] = view[i + 5];\n    view[i + 5] = temp;\n    temp = view[i + 3];\n    view[i + 3] = view[i + 4];\n    view[i + 4] = temp;\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 16-bit values from source to target.\n *\n * This does nothing if source === target.\n */\nexport function convertEndian16(\n    array: ArrayBufferView, source: Endianness, target: Endianness = ENDIANNESS) {\n  if (source !== target) {\n    swapEndian16(array);\n  }\n}\n\n\n/**\n * Converts the endianness of an array assumed to contain 32-bit values from source to target.\n *\n * This does nothing if source === target.\n */\nexport function convertEndian32(\n    array: ArrayBufferView, source: Endianness, target: Endianness = ENDIANNESS) {\n  if (source !== target) {\n    swapEndian32(array);\n  }\n}\n\n\n/**\n * Converts the endianness of an array assumed to contain 64-bit values from source to target.\n *\n * This does nothing if source === target.\n */\nexport function convertEndian64(\n    array: ArrayBufferView, source: Endianness, target: Endianness = ENDIANNESS) {\n  if (source !== target) {\n    swapEndian64(array);\n  }\n}\n\nexport function convertEndian(\n    array: ArrayBufferView, source: Endianness, elementBytes: number,\n    target: Endianness = ENDIANNESS) {\n  if (source === target || elementBytes === 1) return;\n  switch (elementBytes) {\n    case 2:\n      swapEndian16(array);\n      break;\n    case 4:\n      swapEndian32(array);\n      break;\n    case 8:\n      swapEndian64(array);\n      break;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Endianness, ENDIANNESS} from 'neuroglancer/util/endian';\n\nconst denormMin = 2 ** (-1074);\n\nconst float64Buf = new Float64Array(1);\nconst uint32Buf = new Uint32Array(float64Buf.buffer);\n\n// The following implementation is derived from:\n// https://github.com/scijs/nextafter/\n//\n// and is subject to the following license:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2013 Mikola Lysenko\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Like the C standard library `nextafter` function, returns the next representable JavaScript\n// number (float64) after `x` in the direction of `y`.  Returns `y` if `x === y`.\nexport function nextAfterFloat64(x: number, y: number) {\n  if (isNaN(x) || isNaN(y)) return NaN;\n  if (x === y) return y;\n  if (x === 0) {\n    return y < 0 ? -denormMin : denormMin;\n  }\n  float64Buf[0] = x;\n  const lowIndex = ENDIANNESS === Endianness.LITTLE ? 0 : 1;\n  const highIndex = 1 - lowIndex;\n  if ((y > x) === (x > 0)) {\n    if (uint32Buf[lowIndex] === 0xffffffff) {\n      uint32Buf[lowIndex] = 0;\n      uint32Buf[highIndex] += 1;\n    } else {\n      uint32Buf[lowIndex] += 1;\n    }\n  } else {\n    if (uint32Buf[lowIndex] === 0) {\n      uint32Buf[lowIndex] = 0xffffffff;\n      uint32Buf[highIndex] -= 1;\n    } else {\n      uint32Buf[lowIndex] -= 1;\n    }\n  }\n  return float64Buf[0];\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst randomTempBuffer = new Uint32Array(2);\n\nconst trueBase = 0x100000000;\n\n// For dealing with the string representation in base b, we will represent the 64-bit number as\n//\n//   highPrime * intermediateBase[b] + lowPrime,\n//\n// where:\n//\n//   intermediateBaseForBase[b] = Math.pow(b, lowDigitsforBase[b]),\n//\n// and\n//\n//   lowDigitsForBase[b] = Math.floor(Math.log(Math.pow(2,53 - 32)) / Math.log(b)).\n\ninterface StringConversionData {\n  lowDigits: number;\n\n  lowBase: number;\n\n  pattern: RegExp;\n}\n\nlet stringConversionData: StringConversionData[] = [];\nfor (let base = 2; base <= 36; ++base) {\n  let lowDigits = Math.floor(32 / Math.log2(base));\n  let lowBase = Math.pow(base, lowDigits);\n  let patternString = `^[0-${String.fromCharCode('0'.charCodeAt(0) + Math.min(9, base - 1))}`;\n  if (base > 10) {\n    patternString += `a-${String.fromCharCode('a'.charCodeAt(0) + base - 11)}`;\n    patternString += `A-${String.fromCharCode('A'.charCodeAt(0) + base - 11)}`;\n  }\n  let maxDigits = Math.ceil(64 / Math.log2(base));\n  patternString += `]{1,${maxDigits}}$`;\n  let pattern = new RegExp(patternString);\n  stringConversionData[base] = {lowDigits, lowBase, pattern};\n}\n\n/**\n * Returns the high 32 bits of the result of the 32-bit integer multiply `a` and `b`.\n *\n * The low 32-bits can be obtained using the built-in `Math.imul` function.\n */\nfunction uint32MultiplyHigh(a: number, b: number) {\n  a >>>= 0;\n  b >>>= 0;\n\n  const a00 = a & 0xFFFF, a16 = a >>> 16;\n  const b00 = b & 0xFFFF, b16 = b >>> 16;\n\n  let c00 = a00 * b00;\n  let c16 = (c00 >>> 16) + (a16 * b00);\n  let c32 = c16 >>> 16;\n  c16 = (c16 & 0xFFFF) + (a00 * b16);\n  c32 += c16 >>> 16;\n  let c48 = c32 >>> 16;\n  c32 = (c32 & 0xFFFF) + (a16 * b16);\n  c48 += c32 >>> 16;\n\n  return (((c48 & 0xFFFF) << 16) | (c32 & 0xFFFF)) >>> 0;\n}\n\nexport class Uint64 {\n  constructor(public low: number = 0, public high: number = 0) {}\n\n  clone() {\n    return new Uint64(this.low, this.high);\n  }\n\n  assign(x: Uint64) {\n    this.low = x.low;\n    this.high = x.high;\n  }\n\n  toString(base = 10): string {\n    let vLow = this.low, vHigh = this.high;\n    if (vHigh === 0) {\n      return vLow.toString(base);\n    }\n    vHigh *= trueBase;\n    let {lowBase, lowDigits} = stringConversionData[base];\n    let vHighExtra = vHigh % lowBase;\n    vHigh = Math.floor(vHigh / lowBase);\n    vLow += vHighExtra;\n    vHigh += Math.floor(vLow / lowBase);\n    vLow = vLow % lowBase;\n    let vLowStr = vLow.toString(base);\n    return vHigh.toString(base) + '0'.repeat(lowDigits - vLowStr.length) + vLowStr;\n  }\n\n  /**\n   * Returns true if a is strictly less than b.\n   */\n  static less(a: Uint64, b: Uint64): boolean {\n    return a.high < b.high || (a.high === b.high && a.low < b.low);\n  }\n\n  /**\n   * Returns a negative number if a is strictly less than b, 0 if a is equal to b, or a positive\n   * number if a is strictly greater than b.\n   */\n  static compare(a: Uint64, b: Uint64): number {\n    return (a.high - b.high) || (a.low - b.low);\n  }\n\n  static ZERO = new Uint64(0, 0);\n  static ONE = new Uint64(1, 0);\n\n  static equal(a: Uint64, b: Uint64) {\n    return a.low === b.low && a.high === b.high;\n  }\n\n  static min(a: Uint64, b: Uint64): Uint64 {\n    return Uint64.less(a, b) ? a : b;\n  }\n\n  static max(a: Uint64, b: Uint64): Uint64 {\n    return Uint64.less(a, b) ? b : a;\n  }\n\n  static random() {\n    crypto.getRandomValues(randomTempBuffer);\n    return new Uint64(randomTempBuffer[0], randomTempBuffer[1]);\n  }\n\n  tryParseString(s: string, base = 10) {\n    const {lowDigits, lowBase, pattern} = stringConversionData[base];\n    if (!pattern.test(s)) {\n      return false;\n    }\n    if (s.length <= lowDigits) {\n      this.low = parseInt(s, base);\n      this.high = 0;\n      return true;\n    }\n    const splitPoint = s.length - lowDigits;\n    const lowPrime = parseInt(s.substr(splitPoint), base);\n    const highPrime = parseInt(s.substr(0, splitPoint), base);\n\n    let high: number, low: number;\n\n    if (lowBase === trueBase) {\n      high = highPrime;\n      low = lowPrime;\n    } else {\n      const highRemainder = Math.imul(highPrime, lowBase) >>> 0;\n      high = uint32MultiplyHigh(highPrime, lowBase) +\n          (Math.imul(Math.floor(highPrime / trueBase), lowBase) >>> 0);\n      low = lowPrime + highRemainder;\n      if (low >= trueBase) {\n        ++high;\n        low -= trueBase;\n      }\n    }\n    if ((low >>> 0) !== low || ((high >>> 0) !== high)) {\n      return false;\n    }\n    this.low = low;\n    this.high = high;\n    return true;\n  }\n\n  parseString(s: string, base = 10) {\n    if (!this.tryParseString(s, base)) {\n      throw new Error(`Failed to parse string as uint64 value: ${JSON.stringify(s)}.`);\n    }\n    return this;\n  }\n\n  static parseString(s: string, base = 10) {\n    let x = new Uint64();\n    return x.parseString(s, base);\n  }\n\n  valid() {\n    let {low, high} = this;\n    return ((low >>> 0) === low) && ((high >>> 0) === high);\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  static lshift(out: Uint64, input: Uint64, bits: number): Uint64 {\n    const {low, high} = input;\n    if (bits === 0) {\n      out.low = low;\n      out.high = high;\n    } else if (bits < 32) {\n      out.low = low << bits;\n      out.high = (high << bits) | (low >>> (32 - bits));\n    } else {\n      out.low = 0;\n      out.high = low << (bits - 32);\n    }\n    return out;\n  }\n\n  static rshift(out: Uint64, input: Uint64, bits: number) {\n    const {low, high} = input;\n    if (bits === 0) {\n      out.low = low;\n      out.high = high;\n    } else if (bits < 32) {\n      out.low = (low >>> bits) | (high << (32 - bits));\n      out.high = high >>> bits;\n    } else {\n      out.low = high >>> (bits - 32);\n      out.high = 0;\n    }\n    return out;\n  }\n\n  static or(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    out.low = a.low | b.low;\n    out.high = a.high | b.high;\n    return out;\n  }\n\n  static xor(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    out.low = a.low ^ b.low;\n    out.high = a.high ^ b.high;\n    return out;\n  }\n\n  static and(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    out.low = a.low & b.low;\n    out.high = a.high & b.high;\n    return out;\n  }\n\n  static add(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    let lowSum = a.low + b.low;\n    let highSum = a.high + b.high;\n    const low = lowSum >>> 0;\n    if (low !== lowSum) highSum += 1;\n    out.low = low;\n    out.high = highSum >>> 0;\n    return out;\n  }\n\n  static addUint32(out: Uint64, a: Uint64, b: number): Uint64 {\n    let lowSum = a.low + b;\n    let highSum = a.high;\n    const low = lowSum >>> 0;\n    if (low !== lowSum) highSum += 1;\n    out.low = low;\n    out.high = highSum >>> 0;\n    return out;\n  }\n\n  static decrement(out: Uint64, input: Uint64): Uint64 {\n    let {low, high} = input;\n    if (low === 0) {\n      high -= 1;\n    }\n    out.low = (low - 1) >>> 0;\n    out.high = high >>> 0;\n    return out;\n  }\n\n  static increment(out: Uint64, input: Uint64): Uint64 {\n    let {low, high} = input;\n    if (low === 0xFFFFFFFF) high += 1;\n    out.low = (low + 1) >>> 0;\n    out.high = high >>> 0;\n    return out;\n  }\n\n  static subtract(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    let lowSum = a.low - b.low;\n    let highSum = a.high - b.high;\n    const low = lowSum >>> 0;\n    if (low !== lowSum) highSum -= 1;\n    out.low = low;\n    out.high = highSum >>> 0;\n    return out;\n  }\n\n  static absDifference(out: Uint64, a: Uint64, b: Uint64): Uint64 {\n    return Uint64.less(a, b) ? Uint64.subtract(out, b, a) : Uint64.subtract(out, a, b);\n  }\n\n  static multiplyUint32(out: Uint64, a: Uint64, b: number): Uint64 {\n    const {low, high} = a;\n    out.low = Math.imul(low, b) >>> 0;\n    out.high = (Math.imul(high, b) + uint32MultiplyHigh(low, b)) >>> 0;\n    return out;\n  }\n\n  static lowMask(out: Uint64, bits: number) {\n    if (bits === 0) {\n      out.high = out.low = 0;\n    } else if (bits <= 32) {\n      out.high = 0;\n      out.low = 0xffffffff >>> (32 - bits);\n    } else {\n      out.high = 0xffffffff >>> (bits - 32);\n      out.low = 0xffffffff;\n    }\n    return out;\n  }\n\n  toNumber() {\n    return this.low + this.high * 0x100000000;\n  }\n\n  setFromNumber(value: number) {\n    value = Math.round(value);\n    if (value < 0) {\n      this.low = this.high = 0;\n    } else if (value >= 0x10000000000000000) {\n      this.low = this.high = 0xffffffff;\n    } else {\n      this.low = (value % 0x100000000);\n      this.high = Math.floor(value / 0x100000000);\n    }\n  }\n\n  static fromNumber(value: number) {\n    const x = new Uint64();\n    x.setFromNumber(value);\n    return x;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DataType} from 'neuroglancer/util/data_type';\nimport {nextAfterFloat64} from 'neuroglancer/util/float';\nimport {parseFixedLengthArray} from 'neuroglancer/util/json';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport type DataTypeInterval = [number, number]|[Uint64, Uint64];\n\nexport type UnknownDataTypeInterval = [number|Uint64, number|Uint64];\n\nexport const defaultDataTypeRange: Record<DataType, DataTypeInterval> = {\n  [DataType.UINT8]: [0, 0xff],\n  [DataType.INT8]: [-0x80, 0x7f],\n  [DataType.UINT16]: [0, 0xffff],\n  [DataType.INT16]: [-0x8000, 0x7fff],\n  [DataType.UINT32]: [0, 0xffffffff],\n  [DataType.INT32]: [-0x80000000, 0x7fffffff],\n  [DataType.UINT64]: [Uint64.ZERO, new Uint64(0xffffffff, 0xffffffff)],\n  [DataType.FLOAT32]: [0, 1],\n};\n\nexport function computeInvlerp(range: DataTypeInterval, value: number|Uint64): number {\n  if (typeof value === 'number') {\n    const minValue = range[0] as number;\n    const maxValue = range[1] as number;\n    return (value - minValue) / (maxValue - minValue);\n  } else {\n    const minValue = range[0] as Uint64;\n    const maxValue = range[1] as Uint64;\n    let numerator: number;\n    if (Uint64.compare(value, minValue) < 0) {\n      numerator = -Uint64.subtract(tempUint64, minValue, value).toNumber();\n    } else {\n      numerator = Uint64.subtract(tempUint64, value, minValue).toNumber();\n    }\n    let denominator = Uint64.absDifference(tempUint64, maxValue, minValue).toNumber();\n    if (Uint64.compare(minValue, maxValue) > 0) denominator *= -1;\n    return numerator / denominator;\n  }\n}\n\nexport function computeLerp(range: DataTypeInterval, dataType: DataType, value: number): number|\n    Uint64 {\n  if (typeof range[0] === 'number') {\n    const minValue = range[0] as number;\n    const maxValue = range[1] as number;\n    let result = minValue * (1 - value) + maxValue * value;\n    if (dataType !== DataType.FLOAT32) {\n      const dataTypeRange = defaultDataTypeRange[dataType];\n      result = Math.round(result);\n      result = Math.max(dataTypeRange[0] as number, result);\n      result = Math.min(dataTypeRange[1] as number, result);\n    }\n    return result;\n  } else {\n    let minValue = range[0] as Uint64;\n    let maxValue = range[1] as Uint64;\n    if (Uint64.compare(minValue, maxValue) > 0) {\n      [minValue, maxValue] = [maxValue, minValue];\n      value = 1 - value;\n    }\n    const scalar = Uint64.subtract(tempUint64, maxValue, minValue).toNumber();\n    const result = new Uint64();\n    if (value <= 0) {\n      tempUint64.setFromNumber(scalar * -value);\n      Uint64.subtract(result, minValue, Uint64.min(tempUint64, minValue));\n    } else if (value >= 1) {\n      tempUint64.setFromNumber(scalar * (value - 1));\n      Uint64.add(result, maxValue, tempUint64);\n      if (Uint64.less(result, maxValue)) {\n        result.low = result.high = 0xffffffff;\n      }\n    } else {\n      tempUint64.setFromNumber(scalar * value);\n      Uint64.add(result, minValue, tempUint64);\n      if (Uint64.less(result, minValue)) {\n        result.low = result.high = 0xffffffff;\n      }\n    }\n    return result;\n  }\n}\n\nexport function clampToInterval(range: DataTypeInterval, value: number|Uint64): number|Uint64 {\n  if (typeof value === 'number') {\n    return Math.min(Math.max(range[0] as number, value), range[1] as number);\n  } else {\n    return Uint64.min(Uint64.max(range[0] as Uint64, value), range[1] as Uint64);\n  }\n}\n\nexport function getClampedInterval(\n    bounds: DataTypeInterval, range: DataTypeInterval): DataTypeInterval {\n  return [clampToInterval(bounds, range[0]), clampToInterval(bounds, range[1])] as DataTypeInterval;\n}\n\n// Validates that the lower bound is <= the upper bound.\nexport function validateDataTypeInterval(interval: DataTypeInterval): DataTypeInterval {\n  if (dataTypeCompare(interval[0], interval[1]) <= 0) return interval;\n  throw new Error(`Invalid interval: [${interval[0]}, ${interval[1]}]`);\n}\n\n// Ensures the lower bound is <= the upper bound.\nexport function normalizeDataTypeInterval(interval: DataTypeInterval): DataTypeInterval {\n  if (dataTypeCompare(interval[0], interval[1]) <= 0) return interval;\n  return [interval[1], interval[0]] as DataTypeInterval;\n}\n\nexport function dataTypeCompare(a: number|Uint64, b: number|Uint64) {\n  if (typeof a === 'number') {\n    return (a as number) - (b as number);\n  } else {\n    return Uint64.compare(a as Uint64, b as Uint64);\n  }\n}\n\nconst tempUint64 = new Uint64();\nconst temp2Uint64 = new Uint64();\n\nexport function getClosestEndpoint(range: DataTypeInterval, value: number|Uint64): number {\n  if (typeof value === 'number') {\n    return (Math.abs(value - (range[0] as number)) < Math.abs(value - (range[1] as number))) ? 0 :\n                                                                                               1;\n  } else {\n    return Uint64.less(\n               Uint64.absDifference(tempUint64, range[0] as Uint64, value as Uint64),\n               Uint64.absDifference(temp2Uint64, range[1] as Uint64, value as Uint64)) ?\n        0 :\n        1;\n  }\n}\n\nexport function parseDataTypeValue(dataType: DataType, x: unknown): number|Uint64 {\n  let s: string;\n  if (typeof x !== 'string') {\n    s = '' + x;\n  } else {\n    s = x;\n  }\n  switch (dataType) {\n    case DataType.UINT64:\n      return Uint64.parseString(s);\n    case DataType.FLOAT32: {\n      const value = parseFloat(s);\n      if (!Number.isFinite(value)) {\n        throw new Error(`Invalid float32 value: ${JSON.stringify(s)}`);\n      }\n      return value;\n    }\n    default: {\n      const value = parseInt(s);\n      const dataTypeRange = defaultDataTypeRange[dataType];\n      if (!Number.isInteger(value) || value < (dataTypeRange[0] as number) ||\n          value > (dataTypeRange[1] as number)) {\n        throw new Error(`Invalid ${DataType[dataType].toLowerCase()} value: ${JSON.stringify(s)}`);\n      }\n      return value;\n    }\n  }\n}\n\nexport function parseUnknownDataTypeValue(x: unknown): number|Uint64 {\n  if (typeof x === 'number') return x;\n  if (typeof x === 'string') {\n    let num64 = new Uint64();\n    let num = Number(x);\n    if (num64.tryParseString(x)) {\n      if (num.toString() === num64.toString()) {\n        return num;\n      }\n      return num64;\n    }\n    if (!Number.isFinite(num)) {\n      throw new Error(`Invalid value: ${JSON.stringify(x)}`);\n    }\n    return num;\n  }\n  throw new Error(`Invalid value: ${JSON.stringify(x)}`);\n}\n\nexport function parseDataTypeInterval(obj: unknown, dataType: DataType): DataTypeInterval {\n  return parseFixedLengthArray(new Array(2), obj, x => parseDataTypeValue(dataType, x)) as\n      DataTypeInterval;\n}\n\nexport function parseUnknownDataTypeInterval(obj: unknown): UnknownDataTypeInterval {\n  return parseFixedLengthArray(new Array(2), obj, x => parseUnknownDataTypeValue(x)) as\n      UnknownDataTypeInterval;\n}\n\nexport function dataTypeIntervalEqual(\n    dataType: DataType, a: DataTypeInterval, b: DataTypeInterval) {\n  if (dataType === DataType.UINT64) {\n    return Uint64.equal(a[0] as Uint64, b[0] as Uint64) &&\n        Uint64.equal(a[1] as Uint64, b[1] as Uint64);\n  } else {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n}\n\nexport function dataTypeIntervalToJson(\n    range: DataTypeInterval, dataType: DataType, defaultRange = defaultDataTypeRange[dataType]) {\n  if (dataTypeIntervalEqual(dataType, range, defaultRange)) return undefined;\n  if (dataType === DataType.UINT64) {\n    return [range[0].toString(), range[1].toString()];\n  } else {\n    return range;\n  }\n}\n\nexport function dataTypeValueNextAfter(\n    dataType: DataType, value: number|Uint64, sign: 1|- 1): number|Uint64 {\n  switch (dataType) {\n    case DataType.FLOAT32:\n      return nextAfterFloat64(value as number, sign * Infinity);\n    case DataType.UINT64:\n      const v = value as Uint64;\n      if (sign === -1) {\n        if (v.low === 0 && v.high === 0) return v;\n        return Uint64.decrement(new Uint64(), v);\n      } else {\n        if (v.low === 0xffffffff && v.high === 0xffffffff) return v;\n        return Uint64.increment(new Uint64(), v);\n      }\n    default: {\n      const range = defaultDataTypeRange[dataType] as [number, number];\n      return Math.max(range[0], Math.min(range[1], (value as number) + sign));\n    }\n  }\n}\n\n// Returns the offset such that within the floating point range `[-offset, 1+offset]`, there is an\n// equal-sized interval corresponding to each number in `interval`.\n//\n// For dataType=FLOAT32, always returns 0.  For integer data types, returns:\n//\n//   0.5 / (1 + abs(interval[1] - interval[0]))\nexport function getIntervalBoundsEffectiveOffset(dataType: DataType, interval: DataTypeInterval) {\n  switch (dataType) {\n    case DataType.FLOAT32:\n      return 0;\n    case DataType.UINT64:\n      return 0.5 /\n          (Uint64.absDifference(tempUint64, interval[0] as Uint64, interval[1] as Uint64)\n               .toNumber());\n    default:\n      return 0.5 / (Math.abs((interval[0] as number) - (interval[1] as number)));\n  }\n}\n\nexport function getIntervalBoundsEffectiveFraction(dataType: DataType, interval: DataTypeInterval) {\n  switch (dataType) {\n    case DataType.FLOAT32:\n      return 1;\n    case DataType.UINT64: {\n      const diff =\n          Uint64.absDifference(tempUint64, interval[0] as Uint64, interval[1] as Uint64).toNumber();\n      return diff / (diff + 1);\n    }\n    default: {\n      const diff = Math.abs((interval[0] as number) - (interval[1] as number));\n      return diff / (diff + 1);\n    }\n  }\n}\n\nexport function convertDataTypeInterval(\n    interval: UnknownDataTypeInterval|undefined, dataType: DataType): DataTypeInterval {\n  if (interval === undefined) {\n    return defaultDataTypeRange[dataType];\n  }\n  let [lower, upper] = interval;\n  if (dataType === DataType.UINT64) {\n    if (typeof lower === 'number') {\n      lower = Uint64.fromNumber(lower);\n    }\n    if (typeof upper === 'number') {\n      upper = Uint64.fromNumber(upper);\n    }\n    return [lower, upper];\n  }\n  // Ensure that neither lower nor upper is a `Uint64`.\n  if (typeof lower !== 'number') {\n    lower = lower.toNumber();\n  }\n  if (typeof upper !== 'number') {\n    upper = upper.toNumber();\n  }\n  if (dataType !== DataType.FLOAT32) {\n    lower = Math.round(lower);\n    upper = Math.round(upper);\n    const range = defaultDataTypeRange[dataType] as [number, number];\n    if (!Number.isFinite(lower)) {\n      lower = range[0];\n    } else {\n      lower = Math.min(Math.max(range[0], lower), range[1]);\n    }\n    if (!Number.isFinite(upper)) {\n      upper = range[1];\n    } else {\n      upper = Math.min(Math.max(range[0], upper), range[1]);\n    }\n  }\n  return [lower, upper];\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArray} from 'neuroglancer/util/array';\n\nexport function getRandomHexString(numBits = 128) {\n  const numValues = Math.ceil(numBits / 32);\n  const data = new Uint32Array(numValues);\n  crypto.getRandomValues(data);\n  let s = '';\n  for (let i = 0; i < numValues; ++i) {\n    s += ('00000000' + data[i].toString(16)).slice(-8);\n  }\n  return s;\n}\n\n/**\n * Calls crypto.getRandomValues as many times as needed to fill array.\n */\nexport function getRandomValues<T extends TypedArray>(array: T): T {\n  let byteArray = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  const blockSize = 65536;\n  for (let i = 0, length = byteArray.length; i < length; i += blockSize) {\n    crypto.getRandomValues(byteArray.subarray(i, Math.min(length, i + blockSize)));\n  }\n  return array;\n}\n\nexport function getRandomUint32() {\n  const data = new Uint32Array(1);\n  crypto.getRandomValues(data);\n  return data[0];\n}\n", "/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Basic annotation data structures.\n */\n\nimport {BoundingBox, CoordinateSpaceTransform, WatchableCoordinateSpaceTransform} from 'neuroglancer/coordinate_transform';\nimport {arraysEqual} from 'neuroglancer/util/array';\nimport {packColor, parseRGBAColorSpecification, parseRGBColorSpecification, serializeColor, unpackRGB, unpackRGBA} from 'neuroglancer/util/color';\nimport {DataType} from 'neuroglancer/util/data_type';\nimport {Borrowed, RefCounted} from 'neuroglancer/util/disposable';\nimport {Endianness, ENDIANNESS} from 'neuroglancer/util/endian';\nimport {expectArray, parseArray, parseFixedLengthArray, verifyEnumString, verifyFiniteFloat, verifyFiniteNonNegativeFloat, verifyFloat, verifyInt, verifyObject, verifyObjectProperty, verifyOptionalObjectProperty, verifyOptionalString, verifyString} from 'neuroglancer/util/json';\nimport {parseDataTypeValue} from 'neuroglancer/util/lerp';\nimport {getRandomHexString} from 'neuroglancer/util/random';\nimport {NullarySignal, Signal} from 'neuroglancer/util/signal';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport type AnnotationId = string;\n\nexport class AnnotationReference extends RefCounted {\n  changed = new NullarySignal();\n\n  /**\n   * If `undefined`, we are still waiting to look up the result.  If `null`, annotation has been\n   * deleted.\n   */\n  value: Annotation|null|undefined;\n\n  constructor(public id: AnnotationId) {\n    super();\n  }\n}\n\nexport enum AnnotationType {\n  POINT,\n  LINE,\n  AXIS_ALIGNED_BOUNDING_BOX,\n  ELLIPSOID,\n}\n\nexport const annotationTypes = [\n  AnnotationType.POINT,\n  AnnotationType.LINE,\n  AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,\n  AnnotationType.ELLIPSOID,\n];\n\nexport interface AnnotationPropertySpecBase {\n  identifier: string;\n  description: string|undefined;\n}\n\nexport interface AnnotationColorPropertySpec extends AnnotationPropertySpecBase {\n  type: 'rgb'|'rgba';\n  default: number;\n}\n\nexport interface AnnotationNumericPropertySpec extends AnnotationPropertySpecBase {\n  type: 'float32'|'uint32'|'int32'|'uint16'|'int16'|'uint8'|'int8';\n  default: number;\n  enumValues?: number[];\n  enumLabels?: string[];\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport const propertyTypeDataType: Record<AnnotationPropertySpec['type'], DataType|undefined> = {\n  'float32': DataType.FLOAT32,\n  'uint32': DataType.UINT32,\n  'int32': DataType.INT32,\n  'uint16': DataType.UINT16,\n  'int16': DataType.INT16,\n  'uint8': DataType.UINT8,\n  'int8': DataType.INT8,\n  'rgb': undefined,\n  'rgba': undefined,\n};\n\nexport type AnnotationPropertySpec = AnnotationColorPropertySpec|AnnotationNumericPropertySpec;\n\nexport interface AnnotationPropertyTypeHandler {\n  serializedBytes(rank: number): number;\n  alignment(rank: number): number;\n  serializeCode(property: string, offset: string, rank: number): string;\n  deserializeCode(property: string, offset: string, rank: number): string;\n  deserializeJson(obj: unknown): number;\n  serializeJson(value: number): any;\n}\n\nexport const annotationPropertyTypeHandlers:\n    {[K in AnnotationPropertySpec['type']]: AnnotationPropertyTypeHandler} = {\n      'rgb': {\n        serializedBytes() {\n          return 3;\n        },\n        alignment() {\n          return 1;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setUint16(${offset}, ${property}, true);` +\n              `dv.setUint8(${offset} + 2, ${property} >>> 16);`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getUint16(${offset}, true) | (dv.getUint8(${\n              offset} + 2) << 16);`;\n        },\n        deserializeJson(obj: unknown) {\n          return packColor(parseRGBColorSpecification(obj));\n        },\n        serializeJson(value: number) {\n          return serializeColor(unpackRGB(value));\n        },\n      },\n      'rgba': {\n        serializedBytes() {\n          return 4;\n        },\n        alignment() {\n          return 1;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setUint32(${offset}, ${property}, true);`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getUint32(${offset}, true);`;\n        },\n        deserializeJson(obj: unknown) {\n          return packColor(parseRGBAColorSpecification(obj));\n        },\n        serializeJson(value: number) {\n          return serializeColor(unpackRGBA(value));\n        },\n      },\n      'float32': {\n        serializedBytes() {\n          return 4;\n        },\n        alignment() {\n          return 4;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setFloat32(${offset}, ${property}, isLittleEndian);`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getFloat32(${offset}, isLittleEndian);`;\n        },\n        deserializeJson(obj: unknown) {\n          return verifyFloat(obj);\n        },\n        serializeJson(value: number) {\n          return value;\n        },\n      },\n      'uint32': {\n        serializedBytes() {\n          return 4;\n        },\n        alignment() {\n          return 4;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setUint32(${offset}, ${property}, isLittleEndian);`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getUint32(${offset}, isLittleEndian);`;\n        },\n        deserializeJson(obj: unknown) {\n          return verifyInt(obj);\n        },\n        serializeJson(value: number) {\n          return value;\n        },\n      },\n      'int32': {\n        serializedBytes() {\n          return 4;\n        },\n        alignment() {\n          return 4;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setInt32(${offset}, ${property}, isLittleEndian);`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getInt32(${offset}, isLittleEndian);`;\n        },\n        deserializeJson(obj: unknown) {\n          return verifyInt(obj);\n        },\n        serializeJson(value: number) {\n          return value;\n        },\n      },\n      'uint16': {\n        serializedBytes() {\n          return 2;\n        },\n        alignment() {\n          return 2;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setUint16(${offset}, ${property}, isLittleEndian);`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getUint16(${offset}, isLittleEndian);`;\n        },\n        deserializeJson(obj: unknown) {\n          return verifyInt(obj);\n        },\n        serializeJson(value: number) {\n          return value;\n        },\n      },\n      'int16': {\n        serializedBytes() {\n          return 2;\n        },\n        alignment() {\n          return 2;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setInt16(${offset}, ${property}, isLittleEndian);`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getInt16(${offset}, isLittleEndian);`;\n        },\n        deserializeJson(obj: unknown) {\n          return verifyInt(obj);\n        },\n        serializeJson(value: number) {\n          return value;\n        },\n      },\n      'uint8': {\n        serializedBytes() {\n          return 1;\n        },\n        alignment() {\n          return 1;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setUint8(${offset}, ${property});`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getUint8(${offset});`;\n        },\n        deserializeJson(obj: unknown) {\n          return verifyInt(obj);\n        },\n        serializeJson(value: number) {\n          return value;\n        },\n      },\n      'int8': {\n        serializedBytes() {\n          return 2;\n        },\n        alignment() {\n          return 1;\n        },\n        serializeCode(property: string, offset: string) {\n          return `dv.setInt8(${offset}, ${property});`;\n        },\n        deserializeCode(property: string, offset: string) {\n          return `${property} = dv.getInt8(${offset});`;\n        },\n        deserializeJson(obj: unknown) {\n          return verifyInt(obj);\n        },\n        serializeJson(value: number) {\n          return value;\n        },\n      },\n    };\n\n// Maximum stride value supported by WebGL.\nconst MAX_BUFFER_STRIDE = 255;\n\nexport function getPropertyOffsets(\n    rank: number, firstGroupInitialOffset: number,\n    propertySpecs: readonly Readonly<AnnotationPropertySpec>[]): {\n  serializedBytes: number,\n  offsets: {group: number, offset: number}[],\n  propertyGroupBytes: number[],\n} {\n  let serializedBytes = 0;\n  const numProperties = propertySpecs.length;\n  const permutation = new Array<number>(numProperties);\n  const propertyGroupBytes: number[] = [];\n  for (let i = 0; i < numProperties; ++i) {\n    permutation[i] = i;\n  }\n  const getAlignment = (i: number) =>\n      annotationPropertyTypeHandlers[propertySpecs[i].type].alignment(rank);\n  permutation.sort((i, j) => getAlignment(j) - getAlignment(i));\n  let propertyGroupIndex = 0;\n  const offsets = new Array<{group: number, offset: number}>(numProperties);\n  let propertyGroupOffset = firstGroupInitialOffset;\n  const nextPropertyGroup = () => {\n    propertyGroupOffset += (4 - (propertyGroupOffset % 4)) % 4;\n    serializedBytes += propertyGroupOffset;\n    propertyGroupBytes[propertyGroupIndex] = propertyGroupOffset;\n    propertyGroupOffset = 0;\n    ++propertyGroupIndex;\n  };\n  for (let outputIndex = 0; outputIndex < numProperties; ++outputIndex) {\n    const propertyIndex = permutation[outputIndex];\n    const spec = propertySpecs[propertyIndex];\n    const handler = annotationPropertyTypeHandlers[spec.type];\n    const numBytes = handler.serializedBytes(rank);\n    const alignment = handler.alignment(rank);\n    // Check if the property fits in the current property group.\n    const alignmentOffset = (alignment - (propertyGroupOffset % alignment)) % alignment\n    const newStartOffset = propertyGroupOffset + alignmentOffset;\n    const newEndOffset = newStartOffset + numBytes;\n    const newAlignedEndOffset = newEndOffset + (4 - (newEndOffset % 4)) % 4;\n    if (newAlignedEndOffset <= MAX_BUFFER_STRIDE) {\n      // Property fits\n      propertyGroupOffset += alignmentOffset;\n    } else {\n      // Property does not fit.\n      nextPropertyGroup();\n    }\n    offsets[propertyIndex] = {offset: propertyGroupOffset, group: propertyGroupIndex};\n    propertyGroupOffset += numBytes;\n  }\n  nextPropertyGroup();\n  return {serializedBytes, offsets, propertyGroupBytes};\n}\n\nexport class AnnotationPropertySerializer {\n  serializedBytes: number;\n  serialize:\n      (buffer: DataView, offset: number, annotationIndex: number, annotationCount: number,\n       isLittleEndian: boolean, properties: any[]) => void;\n  deserialize:\n      (buffer: DataView, offset: number, annotationIndex: number, annotationCount: number,\n       isLittleEndian: boolean, properties: any[]) => void;\n  propertyGroupBytes: number[];\n  constructor(\n      public rank: number, public firstGroupInitialOffset: number,\n      public propertySpecs: readonly Readonly<AnnotationPropertySpec>[]) {\n    if (propertySpecs.length === 0) {\n      this.serializedBytes = firstGroupInitialOffset;\n      this.serialize = this.deserialize = () => {};\n      this.propertyGroupBytes = [firstGroupInitialOffset];\n      return;\n    }\n    const {serializedBytes, offsets, propertyGroupBytes} =\n        getPropertyOffsets(rank, firstGroupInitialOffset, propertySpecs);\n    this.propertyGroupBytes = propertyGroupBytes;\n    let groupOffsetCode = 'let groupOffset0 = offset;';\n    for (let groupIndex = 1; groupIndex < propertyGroupBytes.length; ++groupIndex) {\n      groupOffsetCode += `let groupOffset${groupIndex} = groupOffset${groupIndex - 1} + ${\n          propertyGroupBytes[groupIndex - 1]}*annotationCount;`;\n    }\n    for (let groupIndex = 0; groupIndex < propertyGroupBytes.length; ++groupIndex) {\n      groupOffsetCode +=\n          `groupOffset${groupIndex} += ${propertyGroupBytes[groupIndex]}*annotationIndex;`;\n    }\n    let serializeCode = groupOffsetCode;\n    let deserializeCode = groupOffsetCode;\n    const numProperties = propertySpecs.length;\n    for (let propertyIndex = 0; propertyIndex < numProperties; ++propertyIndex) {\n      const {group, offset} = offsets[propertyIndex];\n      const spec = propertySpecs[propertyIndex];\n      const handler = annotationPropertyTypeHandlers[spec.type];\n      const propId = `properties[${propertyIndex}]`;\n      const offsetExpr = `groupOffset${group} + ${offset}`;\n      serializeCode += handler.serializeCode(propId, offsetExpr, rank);\n      deserializeCode += handler.deserializeCode(propId, offsetExpr, rank);\n    }\n    this.serializedBytes = serializedBytes;\n    this.serialize = new Function(\n                         'dv', 'offset', 'annotationIndex', 'annotationCount', 'isLittleEndian',\n                         'properties', serializeCode) as any;\n    this.deserialize = new Function(\n                           'dv', 'offset', 'annotationIndex', 'annotationCount', 'isLittleEndian',\n                           'properties', deserializeCode) as any;\n  }\n}\n\nexport function makeAnnotationPropertySerializers(\n    rank: number, propertySpecs: readonly Readonly<AnnotationPropertySpec>[]) {\n  const serializers: AnnotationPropertySerializer[] = [];\n  for (const annotationType of annotationTypes) {\n    const handler = annotationTypeHandlers[annotationType];\n    serializers[annotationType] =\n        new AnnotationPropertySerializer(rank, handler.serializedBytes(rank), propertySpecs);\n  }\n  return serializers;\n}\n\nexport function formatNumericProperty(\n    property: AnnotationNumericPropertySpec, value: number): string {\n  const formattedValue = property.type === 'float32' ? value.toPrecision(6) : value.toString();\n  const {enumValues, enumLabels} = property;\n  if (enumValues !== undefined) {\n    const enumIndex = enumValues.indexOf(value);\n    if (enumIndex !== -1) {\n      return `${enumLabels![enumIndex]} (${formattedValue})`;\n    }\n  }\n  return formattedValue;\n}\n\nexport function formatAnnotationPropertyValue(\n    property: AnnotationPropertySpec, value: any): string {\n  switch (property.type) {\n    case 'rgb':\n      return serializeColor(unpackRGB(value));\n    case 'rgba':\n      return serializeColor(unpackRGBA(value));\n    default:\n      return formatNumericProperty(property, value);\n  }\n}\n\nexport function parseAnnotationPropertyId(obj: unknown) {\n  const s = verifyString(obj);\n  if (s.match(/^[a-z][a-zA-Z0-9_]*$/) === null) {\n    throw new Error(`Invalid property identifier: ${JSON.stringify(obj)}`);\n  }\n  return s;\n}\n\nexport function parseAnnotationPropertyType(obj: unknown) {\n  verifyString(obj);\n  if (!Object.prototype.hasOwnProperty.call(annotationPropertyTypeHandlers, obj)) {\n    throw new Error(`Unsupported property type: $JSON.stringify(obj)}`);\n  }\n  return obj as AnnotationPropertySpec['type'];\n}\n\nexport function ensureUniqueAnnotationPropertyIds(properties: AnnotationPropertySpec[]) {\n  const ids = new Set<string>();\n  for (const p of properties) {\n    if (ids.has(p.identifier)) {\n      throw new Error(`Duplicate property identifier: ${p.identifier}`);\n    }\n    ids.add(p.identifier);\n  }\n}\n\nfunction parseAnnotationPropertySpec(obj: unknown): AnnotationPropertySpec {\n  verifyObject(obj);\n  const identifier = verifyObjectProperty(obj, 'id', parseAnnotationPropertyId);\n  const type = verifyObjectProperty(obj, 'type', parseAnnotationPropertyType);\n  const description = verifyOptionalObjectProperty(obj, 'description', verifyString);\n  let defaultValue = verifyOptionalObjectProperty(\n      obj, 'default', x => annotationPropertyTypeHandlers[type].deserializeJson(x), 0);\n  let enumValues: number[]|undefined;\n  let enumLabels: string[]|undefined;\n  switch (type) {\n    case 'rgb':\n    case 'rgba':\n      break;\n    default: {\n      const dataType: DataType = DataType[type.toUpperCase() as any] as any;\n      enumValues = verifyOptionalObjectProperty(\n          obj, 'enum_values',\n          valuesObj => parseArray(valuesObj, x => parseDataTypeValue(dataType, x) as number));\n      if (enumValues !== undefined) {\n        enumLabels = verifyObjectProperty(\n            obj, 'enum_labels',\n            labelsObj => parseFixedLengthArray(\n                new Array<string>(enumValues!.length), labelsObj, verifyString));\n      }\n    }\n  }\n  return {type, identifier, description, default: defaultValue, enumValues, enumLabels} as\n      AnnotationPropertySpec;\n}\n\nfunction annotationPropertySpecToJson(spec: AnnotationPropertySpec) {\n  const defaultValue = spec.default;\n  return {\n    id: spec.identifier,\n    description: spec.description,\n    type: spec.type,\n    default: defaultValue === 0 ?\n        undefined :\n        annotationPropertyTypeHandlers[spec.type].serializeJson(defaultValue)\n  };\n}\n\nexport function annotationPropertySpecsToJson(specs: AnnotationPropertySpec[]|undefined) {\n  if (specs === undefined || specs.length === 0) return undefined;\n  return specs.map(annotationPropertySpecToJson);\n}\n\nexport function parseAnnotationPropertySpecs(obj: unknown) {\n  if (obj === undefined) return [];\n  const properties = parseArray(obj, parseAnnotationPropertySpec);\n  ensureUniqueAnnotationPropertyIds(properties);\n  return properties;\n}\n\nexport interface AnnotationBase {\n  /**\n   * If equal to `undefined`, then the description is unknown (possibly still being loaded).  If\n   * equal to `null`, then there is no description.\n   */\n  description?: string|undefined|null;\n\n  id: AnnotationId;\n  type: AnnotationType;\n\n  relatedSegments?: Uint64[][];\n  properties: any[];\n}\n\nexport interface Line extends AnnotationBase {\n  pointA: Float32Array;\n  pointB: Float32Array;\n  type: AnnotationType.LINE;\n}\n\nexport interface Point extends AnnotationBase {\n  point: Float32Array;\n  type: AnnotationType.POINT;\n}\n\nexport interface AxisAlignedBoundingBox extends AnnotationBase {\n  pointA: Float32Array;\n  pointB: Float32Array;\n  type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX;\n}\n\nexport interface Ellipsoid extends AnnotationBase {\n  center: Float32Array;\n  radii: Float32Array;\n  type: AnnotationType.ELLIPSOID;\n}\n\nexport type Annotation = Line|Point|AxisAlignedBoundingBox|Ellipsoid;\n\nexport interface AnnotationTypeHandler<T extends Annotation = Annotation> {\n  icon: string;\n  description: string;\n  toJSON: (annotation: T, rank: number) => any;\n  restoreState: (annotation: T, obj: any, rank: number) => void;\n  serializedBytes: (rank: number) => number;\n  serialize:\n      (buffer: DataView, offset: number, isLittleEndian: boolean, rank: number,\n       annotation: T) => void;\n  deserialize:\n      (buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, id: string) => T;\n  visitGeometry: (annotation: T, callback: (vec: Float32Array, isVector: boolean) => void) => void;\n}\n\nfunction serializeFloatVector(\n    buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, vec: Float32Array) {\n  for (let i = 0; i < rank; ++i) {\n    buffer.setFloat32(offset, vec[i], isLittleEndian);\n    offset += 4;\n  }\n  return offset;\n}\n\nfunction serializeTwoFloatVectors(\n    buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, vecA: Float32Array,\n    vecB: Float32Array) {\n  offset = serializeFloatVector(buffer, offset, isLittleEndian, rank, vecA);\n  offset = serializeFloatVector(buffer, offset, isLittleEndian, rank, vecB);\n  return offset;\n}\n\nfunction deserializeFloatVector(\n    buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, vec: Float32Array) {\n  for (let i = 0; i < rank; ++i) {\n    vec[i] = buffer.getFloat32(offset, isLittleEndian);\n    offset += 4;\n  }\n  return offset;\n}\n\nfunction deserializeTwoFloatVectors(\n    buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, vecA: Float32Array,\n    vecB: Float32Array) {\n  offset = deserializeFloatVector(buffer, offset, isLittleEndian, rank, vecA);\n  offset = deserializeFloatVector(buffer, offset, isLittleEndian, rank, vecB);\n  return offset;\n}\n\nexport const annotationTypeHandlers: Record<AnnotationType, AnnotationTypeHandler> = {\n  [AnnotationType.LINE]: {\n    icon: '\uA579',\n    description: 'Line',\n    toJSON(annotation: Line) {\n      return {\n        pointA: Array.from(annotation.pointA),\n        pointB: Array.from(annotation.pointB),\n      };\n    },\n    restoreState(annotation: Line, obj: any, rank: number) {\n      annotation.pointA = verifyObjectProperty(\n          obj, 'pointA', x => parseFixedLengthArray(new Float32Array(rank), x, verifyFiniteFloat));\n      annotation.pointB = verifyObjectProperty(\n          obj, 'pointB', x => parseFixedLengthArray(new Float32Array(rank), x, verifyFiniteFloat));\n    },\n    serializedBytes(rank: number) {\n      return 2 * 4 * rank;\n    },\n    serialize(\n        buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, annotation: Line) {\n      serializeTwoFloatVectors(\n          buffer, offset, isLittleEndian, rank, annotation.pointA, annotation.pointB);\n    },\n    deserialize:\n        (buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, id: string):\n            Line => {\n              const pointA = new Float32Array(rank);\n              const pointB = new Float32Array(rank);\n              deserializeTwoFloatVectors(buffer, offset, isLittleEndian, rank, pointA, pointB);\n              return {type: AnnotationType.LINE, pointA, pointB, id, properties: []};\n            },\n    visitGeometry(annotation: Line, callback) {\n      callback(annotation.pointA, false);\n      callback(annotation.pointB, false);\n    },\n  },\n  [AnnotationType.POINT]: {\n    icon: '\u26AC',\n    description: 'Point',\n    toJSON: (annotation: Point) => {\n      return {\n        point: Array.from(annotation.point),\n      };\n    },\n    restoreState: (annotation: Point, obj: any, rank: number) => {\n      annotation.point = verifyObjectProperty(\n          obj, 'point', x => parseFixedLengthArray(new Float32Array(rank), x, verifyFiniteFloat));\n    },\n    serializedBytes: rank => rank * 4,\n    serialize:\n        (buffer: DataView, offset: number, isLittleEndian: boolean, rank: number,\n         annotation: Point) => {\n          serializeFloatVector(buffer, offset, isLittleEndian, rank, annotation.point);\n        },\n    deserialize:\n        (buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, id: string):\n            Point => {\n              const point = new Float32Array(rank);\n              deserializeFloatVector(buffer, offset, isLittleEndian, rank, point);\n              return {type: AnnotationType.POINT, point, id, properties: []};\n            },\n    visitGeometry(annotation: Point, callback) {\n      callback(annotation.point, false);\n    },\n  },\n  [AnnotationType.AXIS_ALIGNED_BOUNDING_BOX]: {\n    icon: '\u2751',\n    description: 'Bounding Box',\n    toJSON: (annotation: AxisAlignedBoundingBox) => {\n      return {\n        pointA: Array.from(annotation.pointA),\n        pointB: Array.from(annotation.pointB),\n      };\n    },\n    restoreState: (annotation: AxisAlignedBoundingBox, obj: any, rank: number) => {\n      annotation.pointA = verifyObjectProperty(\n          obj, 'pointA', x => parseFixedLengthArray(new Float32Array(rank), x, verifyFiniteFloat));\n      annotation.pointB = verifyObjectProperty(\n          obj, 'pointB', x => parseFixedLengthArray(new Float32Array(rank), x, verifyFiniteFloat));\n    },\n    serializedBytes: rank => 2 * 4 * rank,\n    serialize(\n        buffer: DataView, offset: number, isLittleEndian: boolean, rank: number,\n        annotation: AxisAlignedBoundingBox) {\n      serializeTwoFloatVectors(\n          buffer, offset, isLittleEndian, rank, annotation.pointA, annotation.pointB);\n    },\n    deserialize: (\n        buffer: DataView, offset: number, isLittleEndian: boolean, rank: number,\n        id: string): AxisAlignedBoundingBox => {\n      const pointA = new Float32Array(rank);\n      const pointB = new Float32Array(rank);\n      deserializeTwoFloatVectors(buffer, offset, isLittleEndian, rank, pointA, pointB);\n      return {type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX, pointA, pointB, id, properties: []};\n    },\n    visitGeometry(annotation: AxisAlignedBoundingBox, callback) {\n      callback(annotation.pointA, false);\n      callback(annotation.pointB, false);\n    },\n  },\n  [AnnotationType.ELLIPSOID]: {\n    icon: '\u25CE',\n    description: 'Ellipsoid',\n    toJSON: (annotation: Ellipsoid) => {\n      return {\n        center: Array.from(annotation.center),\n        radii: Array.from(annotation.radii),\n      };\n    },\n    restoreState: (annotation: Ellipsoid, obj: any, rank: number) => {\n      annotation.center = verifyObjectProperty(\n          obj, 'center', x => parseFixedLengthArray(new Float32Array(rank), x, verifyFiniteFloat));\n      annotation.radii = verifyObjectProperty(\n          obj, 'radii',\n          x => parseFixedLengthArray(new Float32Array(rank), x, verifyFiniteNonNegativeFloat));\n    },\n    serializedBytes: rank => 2 * 4 * rank,\n    serialize(\n        buffer: DataView, offset: number, isLittleEndian: boolean, rank: number,\n        annotation: Ellipsoid) {\n      serializeTwoFloatVectors(\n          buffer, offset, isLittleEndian, rank, annotation.center, annotation.radii);\n    },\n    deserialize:\n        (buffer: DataView, offset: number, isLittleEndian: boolean, rank: number, id: string):\n            Ellipsoid => {\n              const center = new Float32Array(rank);\n              const radii = new Float32Array(rank);\n              deserializeTwoFloatVectors(buffer, offset, isLittleEndian, rank, center, radii);\n              return {type: AnnotationType.ELLIPSOID, center, radii, id, properties: []};\n            },\n    visitGeometry(annotation: Ellipsoid, callback) {\n      callback(annotation.center, false);\n      callback(annotation.radii, true);\n    },\n  },\n};\n\nexport interface AnnotationSchema {\n  rank: number;\n  relationships: readonly string[];\n  properties: readonly AnnotationPropertySpec[];\n}\n\nexport function annotationToJson(annotation: Annotation, schema: AnnotationSchema) {\n  const result = annotationTypeHandlers[annotation.type].toJSON(annotation, schema.rank);\n  result.type = AnnotationType[annotation.type].toLowerCase();\n  result.id = annotation.id;\n  result.description = annotation.description || undefined;\n  const {relatedSegments} = annotation;\n  if (relatedSegments !== undefined && relatedSegments.some(x => x.length !== 0)) {\n    result.segments = relatedSegments.map(segments => segments.map(x => x.toString()));\n  }\n  if (schema.properties.length !== 0) {\n    const propertySpecs = schema.properties;\n    result.props = annotation.properties.map(\n        (prop, i) => annotationPropertyTypeHandlers[propertySpecs[i].type].serializeJson(prop));\n  }\n  return result;\n}\n\nfunction restoreAnnotation(obj: any, schema: AnnotationSchema, allowMissingId = false): Annotation {\n  verifyObject(obj);\n  const type = verifyObjectProperty(obj, 'type', x => verifyEnumString(x, AnnotationType));\n  const id =\n      verifyObjectProperty(obj, 'id', allowMissingId ? verifyOptionalString : verifyString) ||\n      makeAnnotationId();\n  const relatedSegments = verifyObjectProperty(obj, 'segments', relObj => {\n    if (relObj === undefined) {\n      return schema.relationships.map(() => []);\n    }\n    const a = expectArray(relObj);\n    if (a.length === 0) {\n      return schema.relationships.map(() => []);\n    }\n    if (schema.relationships.length === 1 && !Array.isArray(a[0])) {\n      return [parseArray(a, x => Uint64.parseString(x))];\n    }\n    return parseArray(\n        expectArray(relObj, schema.relationships.length),\n        segments => parseArray(segments, y => Uint64.parseString(y)));\n  });\n  const properties = verifyObjectProperty(obj, 'props', propsObj => {\n    const propSpecs = schema.properties;\n    if (propsObj === undefined) return propSpecs.map(x => x.default);\n    return parseArray(\n        expectArray(propsObj, schema.properties.length),\n        (x, i) => annotationPropertyTypeHandlers[propSpecs[i].type].deserializeJson(x));\n  });\n  const result: Annotation = {\n    id,\n    description: verifyObjectProperty(obj, 'description', verifyOptionalString),\n    relatedSegments,\n    properties,\n    type,\n  } as Annotation;\n  annotationTypeHandlers[type].restoreState(result, obj, schema.rank);\n  return result;\n}\n\nexport interface AnnotationSourceSignals {\n  changed: NullarySignal;\n  childAdded: Signal<(annotation: Annotation) => void>;\n  childUpdated: Signal<(annotation: Annotation) => void>;\n  childDeleted: Signal<(annotationId: string) => void>;\n}\n\nexport class AnnotationSource extends RefCounted implements AnnotationSourceSignals {\n  protected annotationMap = new Map<AnnotationId, Annotation>();\n  changed = new NullarySignal();\n  readonly = false;\n  childAdded = new Signal<(annotation: Annotation) => void>();\n  childUpdated = new Signal<(annotation: Annotation) => void>();\n  childDeleted = new Signal<(annotationId: string) => void>();\n\n  private pending = new Set<AnnotationId>();\n\n  protected rank_: number;\n\n  get rank() {\n    return this.rank_;\n  }\n\n  annotationPropertySerializers: AnnotationPropertySerializer[];\n\n  constructor(\n      rank: number, public readonly relationships: readonly string[] = [],\n      public readonly properties: Readonly<AnnotationPropertySpec>[] = []) {\n    super();\n    this.rank_ = rank;\n    this.annotationPropertySerializers = makeAnnotationPropertySerializers(rank, properties);\n  }\n\n  hasNonSerializedProperties() {\n    return true;\n  }\n\n  add(annotation: Annotation, commit: boolean = true): AnnotationReference {\n    this.ensureUpdated();\n    if (!annotation.id) {\n      annotation.id = makeAnnotationId();\n    } else if (this.annotationMap.has(annotation.id)) {\n      throw new Error(`Annotation id already exists: ${JSON.stringify(annotation.id)}.`);\n    }\n    this.annotationMap.set(annotation.id, annotation);\n    this.changed.dispatch();\n    this.childAdded.dispatch(annotation);\n    if (!commit) {\n      this.pending.add(annotation.id);\n    }\n    return this.getReference(annotation.id);\n  }\n\n  commit(reference: AnnotationReference): void {\n    this.ensureUpdated();\n    const id = reference.id;\n    this.pending.delete(id);\n    this.changed.dispatch();\n  }\n\n  update(reference: AnnotationReference, annotation: Annotation) {\n    this.ensureUpdated();\n    if (reference.value === null) {\n      throw new Error(`Annotation already deleted.`);\n    }\n    reference.value = annotation;\n    this.annotationMap.set(annotation.id, annotation);\n    reference.changed.dispatch();\n    this.changed.dispatch();\n    this.childUpdated.dispatch(annotation);\n  }\n\n  [Symbol.iterator]() {\n    this.ensureUpdated();\n    return this.annotationMap.values();\n  }\n\n  get(id: AnnotationId) {\n    this.ensureUpdated();\n    return this.annotationMap.get(id);\n  }\n\n  delete(reference: AnnotationReference) {\n    if (reference.value === null) {\n      return;\n    }\n    reference.value = null;\n    this.annotationMap.delete(reference.id);\n    this.pending.delete(reference.id);\n    reference.changed.dispatch();\n    this.changed.dispatch();\n    this.childDeleted.dispatch(reference.id);\n  }\n\n  getReference(id: AnnotationId): AnnotationReference {\n    let existing = this.references.get(id);\n    if (existing !== undefined) {\n      return existing.addRef();\n    }\n    existing = new AnnotationReference(id);\n    existing.value = this.annotationMap.get(id) || null;\n    this.references.set(id, existing);\n    existing.registerDisposer(() => {\n      this.references.delete(id);\n    });\n    return existing;\n  }\n\n  references = new Map<AnnotationId, Borrowed<AnnotationReference>>();\n\n  protected ensureUpdated() {}\n\n  toJSON() {\n    this.ensureUpdated();\n    const result: any[] = [];\n    const {pending} = this;\n    for (const annotation of this) {\n      if (pending.has(annotation.id)) {\n        // Don't serialize uncommitted annotations.\n        continue;\n      }\n      result.push(annotationToJson(annotation, this));\n    }\n    return result;\n  }\n\n  clear() {\n    this.annotationMap.clear();\n    this.pending.clear();\n    this.changed.dispatch();\n  }\n\n  restoreState(obj: any) {\n    this.ensureUpdated();\n    const {annotationMap} = this;\n    annotationMap.clear();\n    this.pending.clear();\n    if (obj !== undefined) {\n      parseArray(obj, x => {\n        const annotation = restoreAnnotation(x, this);\n        annotationMap.set(annotation.id, annotation);\n      });\n    }\n    for (const reference of this.references.values()) {\n      const {id} = reference;\n      const value = annotationMap.get(id);\n      reference.value = value || null;\n      reference.changed.dispatch();\n    }\n    this.changed.dispatch();\n  }\n\n  reset() {\n    this.clear();\n  }\n}\n\nexport class LocalAnnotationSource extends AnnotationSource {\n  private curCoordinateTransform: CoordinateSpaceTransform;\n\n  get rank() {\n    this.ensureUpdated();\n    return this.rank_;\n  }\n\n  constructor(\n      public watchableTransform: WatchableCoordinateSpaceTransform,\n      properties: AnnotationPropertySpec[], relationships: string[]) {\n    super(watchableTransform.value.sourceRank, relationships, properties);\n    this.curCoordinateTransform = watchableTransform.value;\n    this.registerDisposer(watchableTransform.changed.add(() => this.ensureUpdated()));\n  }\n\n  ensureUpdated() {\n    const transform = this.watchableTransform.value;\n    const {curCoordinateTransform} = this;\n    if (transform === curCoordinateTransform) return;\n    this.curCoordinateTransform = transform;\n    const sourceRank = transform.sourceRank;\n    const oldSourceRank = curCoordinateTransform.sourceRank;\n    if (oldSourceRank === sourceRank &&\n        ((curCoordinateTransform.inputSpace === transform.inputSpace) ||\n         arraysEqual(\n             curCoordinateTransform.inputSpace.ids.slice(0, sourceRank),\n             transform.inputSpace.ids.slice(0, sourceRank)))) {\n      return;\n    }\n    const {ids: newIds} = transform.inputSpace;\n    const oldIds = curCoordinateTransform.inputSpace.ids;\n    const newToOldDims: number[] = [];\n    for (let newDim = 0; newDim < sourceRank; ++newDim) {\n      let oldDim = oldIds.indexOf(newIds[newDim]);\n      if (oldDim >= oldSourceRank) {\n        oldDim = -1;\n      }\n      newToOldDims.push(oldDim);\n    }\n    const mapVector = (radii: Float32Array) => {\n      const newRadii = new Float32Array(sourceRank);\n      for (let i = 0; i < sourceRank; ++i) {\n        const oldDim = newToOldDims[i];\n        newRadii[i] = (oldDim === -1) ? 0 : radii[i];\n      }\n      return newRadii;\n    };\n\n    for (const annotation of this.annotationMap.values()) {\n      switch (annotation.type) {\n        case AnnotationType.POINT:\n          annotation.point = mapVector(annotation.point);\n          break;\n        case AnnotationType.LINE:\n        case AnnotationType.AXIS_ALIGNED_BOUNDING_BOX:\n          annotation.pointA = mapVector(annotation.pointA);\n          annotation.pointB = mapVector(annotation.pointB);\n          break;\n        case AnnotationType.ELLIPSOID:\n          annotation.center = mapVector(annotation.center);\n          annotation.radii = mapVector(annotation.radii);\n          break;\n      }\n    }\n    if (this.rank_ !== sourceRank) {\n      this.rank_ = sourceRank;\n      this.annotationPropertySerializers =\n          makeAnnotationPropertySerializers(this.rank_, this.properties);\n    }\n    this.changed.dispatch();\n  }\n}\n\nexport const DATA_BOUNDS_DESCRIPTION = 'Data Bounds';\n\nexport function makeAnnotationId() {\n  return getRandomHexString(160);\n}\n\nexport function makeDataBoundsBoundingBoxAnnotation(box: BoundingBox): AxisAlignedBoundingBox {\n  return {\n    type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,\n    id: 'data-bounds',\n    description: DATA_BOUNDS_DESCRIPTION,\n    pointA: new Float32Array(box.lowerBounds),\n    pointB: new Float32Array(box.upperBounds),\n    properties: [],\n  };\n}\n\nexport function makeDataBoundsBoundingBoxAnnotationSet(box: BoundingBox): AnnotationSource {\n  const annotationSource = new AnnotationSource(box.lowerBounds.length);\n  annotationSource.readonly = true;\n  annotationSource.add(makeDataBoundsBoundingBoxAnnotation(box));\n  return annotationSource;\n}\n\nexport interface SerializedAnnotations {\n  data: Uint8Array;\n  typeToIds: string[][];\n  typeToOffset: number[];\n  typeToIdMaps: Map<string, number>[];\n}\n\nfunction serializeAnnotations(\n    allAnnotations: Annotation[][],\n    propertySerializers: AnnotationPropertySerializer[]): SerializedAnnotations {\n  let totalBytes = 0;\n  const typeToOffset: number[] = [];\n  for (const annotationType of annotationTypes) {\n    const propertySerializer = propertySerializers[annotationType];\n    const serializedPropertiesBytes = propertySerializer.serializedBytes;\n    typeToOffset[annotationType] = totalBytes;\n    const annotations: Annotation[] = allAnnotations[annotationType];\n    const count = annotations.length;\n    totalBytes += serializedPropertiesBytes * count;\n  }\n  const typeToIds: string[][] = [];\n  const typeToIdMaps: Map<string, number>[] = [];\n  const data = new ArrayBuffer(totalBytes);\n  const dataView = new DataView(data);\n  const isLittleEndian = ENDIANNESS === Endianness.LITTLE;\n  for (const annotationType of annotationTypes) {\n    const propertySerializer = propertySerializers[annotationType];\n    const {rank} = propertySerializer;\n    const serializeProperties = propertySerializer.serialize;\n    const annotations: Annotation[] = allAnnotations[annotationType];\n    typeToIds[annotationType] = annotations.map(x => x.id);\n    typeToIdMaps[annotationType] = new Map(annotations.map((x, i) => [x.id, i]));\n    const handler = annotationTypeHandlers[annotationType];\n    const serialize = handler.serialize;\n    const offset = typeToOffset[annotationType];\n    const geometryDataStride = propertySerializer.propertyGroupBytes[0];\n    for (let i = 0, count = annotations.length; i < count; ++i) {\n      const annotation = annotations[i];\n      serialize(dataView, offset + i * geometryDataStride, isLittleEndian, rank, annotation);\n      serializeProperties(dataView, offset, i, count, isLittleEndian, annotation.properties);\n    }\n  }\n  return {data: new Uint8Array(data), typeToIds, typeToOffset, typeToIdMaps};\n}\n\nexport class AnnotationSerializer {\n  annotations: [Point[], Line[], AxisAlignedBoundingBox[], Ellipsoid[]] = [[], [], [], []];\n  constructor(public propertySerializers: AnnotationPropertySerializer[]) {}\n  add(annotation: Annotation) {\n    (<Annotation[]>this.annotations[annotation.type]).push(annotation);\n  }\n  serialize(): SerializedAnnotations {\n    return serializeAnnotations(this.annotations, this.propertySerializers);\n  }\n}\n\nexport function fixAnnotationAfterStructuredCloning(obj: Annotation|null) {\n  if (obj == null) {\n    return obj;\n  }\n  const {relatedSegments} = obj;\n  if (relatedSegments !== undefined) {\n    for (let i = 0, numRelationships = relatedSegments.length; i < numRelationships; ++i) {\n      const segments = relatedSegments[i];\n      if (segments === undefined) continue;\n      relatedSegments[i] =\n          segments.map((x: {low: number, high: number}) => new Uint64(x.low, x.high));\n    }\n  }\n  return obj;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ProjectionParameters} from 'neuroglancer/projection_parameters';\nimport {forEachVisibleVolumetricChunk, MultiscaleVolumetricDataRenderLayer, SliceViewChunkSource, SliceViewChunkSpecification, TransformedSource} from 'neuroglancer/sliceview/base';\nimport {getViewFrustrumVolume, mat3, mat3FromMat4, prod3} from 'neuroglancer/util/geom';\n\nexport const ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID = 'annotation.MetadataChunkSource';\nexport const ANNOTATION_GEOMETRY_CHUNK_SOURCE_RPC_ID = 'annotation.GeometryChunkSource';\nexport const ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID =\n    'annotation.SubsetGeometryChunkSource';\nexport const ANNOTATION_REFERENCE_ADD_RPC_ID = 'annotation.reference.add';\nexport const ANNOTATION_REFERENCE_DELETE_RPC_ID = 'annotation.reference.delete';\nexport const ANNOTATION_COMMIT_UPDATE_RPC_ID = 'annotation.commit';\nexport const ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID = 'annotation.commit';\n\nexport interface AnnotationGeometryChunkSpecification extends SliceViewChunkSpecification {\n  /**\n   * Must equal the `chunkToMultiscaleTransform` in the `SliceViewSingleResolutionSource`.\n   */\n  chunkToMultiscaleTransform: Float32Array;\n\n  /**\n   * Specifies the maximum density of annotations provided by this chunk source, as `limit` per the\n   * chunk volume.  The higher the value, the sooner chunks from this source will be subsampled.  To\n   * disable subsampling completely, set `limit` to 0.\n   */\n  limit: number;\n}\n\nexport const ANNOTATION_SPATIALLY_INDEXED_RENDER_LAYER_RPC_ID =\n    'annotation/SpatiallyIndexedRenderLayer';\nexport const ANNOTATION_PERSPECTIVE_RENDER_LAYER_UPDATE_SOURCES_RPC_ID =\n    'annotation/PerspectiveRenderLayer:updateSources';\nexport const ANNOTATION_RENDER_LAYER_RPC_ID = 'annotation/RenderLayer';\nexport const ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID =\n    'annotation/RenderLayer.updateSegmentation';\n\nconst tempMat3 = mat3.create();\n\nexport function\nforEachVisibleAnnotationChunk<RLayer extends MultiscaleVolumetricDataRenderLayer, Source extends\n                                  SliceViewChunkSource<AnnotationGeometryChunkSpecification>,\n                                  Transformed extends TransformedSource<RLayer, Source>>(\n    projectionParameters: ProjectionParameters, localPosition: Float32Array,\n    renderScaleTarget: number, transformedSources: readonly Transformed[],\n    beginScale: (source: Transformed, index: number) => void,\n    callback: (\n        source: Transformed, index: number, drawFraction: number, physicalSpacing: number,\n        pixelSpacing: number) => void) {\n  const {displayDimensionRenderInfo, viewMatrix, projectionMat, width, height} =\n      projectionParameters;\n  const {voxelPhysicalScales} = displayDimensionRenderInfo;\n  const viewDet = Math.abs(mat3.determinant(mat3FromMat4(tempMat3, viewMatrix)));\n  const canonicalToPhysicalScale = prod3(voxelPhysicalScales);\n  const viewFrustrumVolume =\n      getViewFrustrumVolume(projectionMat) / viewDet * canonicalToPhysicalScale;\n\n  if (transformedSources.length === 0) return;\n  const baseSource = transformedSources[0];\n  let sourceVolume = Math.abs(baseSource.chunkLayout.detTransform) * canonicalToPhysicalScale;\n  const {lowerClipDisplayBound, upperClipDisplayBound} = baseSource;\n  for (let i = 0; i < 3; ++i) {\n    sourceVolume *= (upperClipDisplayBound[i] - lowerClipDisplayBound[i]);\n  }\n\n  const effectiveVolume = Math.min(sourceVolume, viewFrustrumVolume);\n  const viewportArea = width * height;\n  const targetNumAnnotations = viewportArea / (renderScaleTarget ** 2);\n  const physicalDensityTarget = targetNumAnnotations / effectiveVolume;\n\n  // Target density in annotations per physical volume.\n  let totalPhysicalDensity = 0;\n  for (let scaleIndex = transformedSources.length - 1;\n       scaleIndex >= 0 && totalPhysicalDensity < physicalDensityTarget; --scaleIndex) {\n    const transformedSource = transformedSources[scaleIndex];\n    const spec = transformedSource.source.spec as AnnotationGeometryChunkSpecification;\n    const {chunkLayout} = transformedSource;\n    const physicalVolume =\n        prod3(chunkLayout.size) * Math.abs(chunkLayout.detTransform) * canonicalToPhysicalScale;\n    const {limit, rank} = spec;\n    const {nonDisplayLowerClipBound, nonDisplayUpperClipBound} = transformedSource;\n    let sliceFraction = 1;\n    for (let i = 0; i < rank; ++i) {\n      const b = (nonDisplayUpperClipBound[i] - nonDisplayLowerClipBound[i]);\n      if (Number.isFinite(b)) sliceFraction /= b;\n    }\n    const physicalDensity = limit * sliceFraction / physicalVolume;\n\n    let firstChunk = true;\n    const newTotalPhysicalDensity = totalPhysicalDensity + physicalDensity;\n    const totalPhysicalSpacing = Math.pow(1 / newTotalPhysicalDensity, 1 / 3);\n    const totalPixelSpacing = Math.sqrt(viewportArea / (newTotalPhysicalDensity * effectiveVolume));\n    const desiredCount =\n        (physicalDensityTarget - totalPhysicalDensity) * physicalVolume / sliceFraction;\n    const drawFraction = Math.min(1, desiredCount / spec.limit);\n    forEachVisibleVolumetricChunk(projectionParameters, localPosition, transformedSource, () => {\n      if (firstChunk) {\n        beginScale(transformedSource, scaleIndex);\n        firstChunk = false;\n      }\n      callback(\n          transformedSource, scaleIndex, drawFraction, totalPhysicalSpacing, totalPixelSpacing);\n    });\n    totalPhysicalDensity = newTotalPhysicalDensity;\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Defines a generic interface for a simple state tracking mechanism.\n */\n\nimport {RefCounted} from 'neuroglancer/util/disposable';\nimport {verifyObject, verifyOptionalObjectProperty} from 'neuroglancer/util/json';\nimport {NullaryReadonlySignal, NullarySignal} from 'neuroglancer/util/signal';\n\nexport interface JsonRestorable {\n  restoreState: (x: any) => void;\n}\n\nexport function optionallyRestoreFromJsonMember(\n    obj: any, member: string, restorable: JsonRestorable) {\n  verifyOptionalObjectProperty(obj, member, x => restorable.restoreState(x));\n}\n\nexport interface Trackable extends JsonRestorable {\n  restoreState: (x: any) => void;\n  reset: () => void;\n  changed: NullaryReadonlySignal;\n  toJSON: () => any;\n}\n\nexport class CompoundTrackable extends RefCounted implements Trackable {\n  children = new Map<string, Trackable>();\n  changed = new NullarySignal();\n\n  add(key: string, value: Trackable): () => void {\n    const {children} = this;\n    if (children.has(key)) {\n      throw new Error(`Key ${JSON.stringify(key)} already registered.`);\n    }\n    this.children.set(key, value);\n    value.changed.add(this.changed.dispatch);\n    this.changed.dispatch();\n    return () => {\n      this.remove(key);\n    };\n  }\n\n  remove(key: string): void {\n    const {children} = this;\n    if (children.has(key)) {\n      throw new Error(`Key ${JSON.stringify(key)} not registered.`);\n    }\n    const value = children.get(key)!;\n    this.children.delete(key);\n    value.changed.remove(this.changed.dispatch);\n    this.changed.dispatch();\n  }\n\n  disposed() {\n    const {changed} = this;\n    for (let value of this.children.values()) {\n      value.changed.remove(changed.dispatch);\n    }\n    this.children = <any>undefined;\n    super.disposed();\n  }\n\n  toJSON() {\n    console.log(this.children);\n    const result = this.baseJSON();\n    for (let [key, value] of this.children) {\n      result[key] = value.toJSON();\n    }\n    return result;\n  }\n\n  baseJSON() {\n    return <{[key: string]: any}>{};\n  }\n\n  reset() {\n    for (let value of this.children.values()) {\n      value.reset();\n    }\n  }\n\n  restoreState(x: any) {\n    verifyObject(x);\n    for (let [key, value] of this.children) {\n      try {\n        if (x.hasOwnProperty(key)) {\n          const subValue = x[key];\n          if (subValue === undefined) {\n            continue;\n          }\n          value.restoreState(subValue);\n        }\n      } catch (restoreError) {\n        throw new Error(`Error restoring property ${JSON.stringify(key)}: ${restoreError.message}`);\n      }\n    }\n  }\n}\n\nexport class PersistentCompoundTrackable extends CompoundTrackable {\n  lastState: {[key: string]: any} = {};\n\n  restoreState(x: any) {\n    verifyObject(x);\n    this.lastState = x;\n    super.restoreState(x);\n  }\n\n  reset () {\n    this.lastState = {};\n    super.reset();\n  }\n\n  baseJSON() {\n    const result = Object.assign(super.baseJSON(), this.lastState);\n    for (const key of this.children.keys()) {\n      delete result[key];\n    }\n    return result;\n  }\n\n  toJSON() {\n    const result = super.toJSON();\n    this.lastState = result;\n    return result;\n  }\n  add(key: string, value: Trackable) {\n    const result = super.add(key, value);\n    const existingValue = this.lastState[key];\n    if (existingValue !== undefined) {\n      value.reset();\n      value.restoreState(existingValue);\n    }\n    return result;\n  }\n}\n\n/**\n * Cache used by getCachedJson.\n */\nconst jsonCache = new WeakMap<Trackable, {value: any, generation: number}>();\n\n/**\n * Returns a JSON representation of a Trackable object.\n *\n * Recursively caches the result, such that it is only necessary to traverse the changed portions of\n * the object.\n *\n * The returned value must not be modified.\n */\nexport function getCachedJson(root: Trackable): {value: any, generation: number} {\n  let cacheState = jsonCache.get(root);\n  const generation = root.changed.count;\n  if (cacheState !== undefined) {\n    if (cacheState.generation === generation) {\n      return cacheState;\n    }\n  }\n  let value: any;\n  if (root instanceof CompoundTrackable) {\n    value = root.baseJSON();\n    for (let [k, v] of root.children) {\n      value[k] = getCachedJson(v).value;\n    }\n  } else {\n    value = root.toJSON();\n  }\n  if (cacheState === undefined) {\n    cacheState = {generation, value};\n    jsonCache.set(root, cacheState);\n  } else {\n    cacheState.generation = generation;\n    cacheState.value = value;\n  }\n  return cacheState;\n}\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {verifyEnumString} from 'neuroglancer/util/json';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {Trackable} from 'neuroglancer/util/trackable';\n\nexport class TrackableEnum<T extends number> implements Trackable {\n  changed = new NullarySignal();\n\n  constructor(\n      public enumType: {[x: string]: any},\n      private value_: T,\n      private defaultValue: T = value_,\n  ) {}\n\n  set value(value: T) {\n    if (this.value_ !== value) {\n      this.value_ = value;\n      this.changed.dispatch();\n    }\n  }\n\n  get value() {\n    return this.value_;\n  }\n\n  reset() {\n    this.value = this.defaultValue;\n  }\n\n  restoreState(obj: any) {\n    this.value = verifyEnumString(obj, this.enumType);\n  }\n\n  toJSON(): string|undefined {\n    if (this.value_ === this.defaultValue) return undefined;\n    return this.enumType[this.value_].toLowerCase();\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CoordinateSpace, dimensionNamesFromJson, emptyInvalidCoordinateSpace, getBoundingBoxCenter, getCenterBound} from 'neuroglancer/coordinate_transform';\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {arraysEqual} from 'neuroglancer/util/array';\nimport {Borrowed, Owned, RefCounted} from 'neuroglancer/util/disposable';\nimport {mat3, mat4, quat, vec3} from 'neuroglancer/util/geom';\nimport {parseArray, parseFiniteVec, verifyFiniteFloat, verifyFinitePositiveFloat, verifyObject, verifyObjectProperty} from 'neuroglancer/util/json';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {optionallyRestoreFromJsonMember, Trackable} from 'neuroglancer/util/trackable';\nimport {TrackableEnum} from 'neuroglancer/util/trackable_enum';\nimport * as vector from 'neuroglancer/util/vector';\n\nexport enum NavigationLinkType {\n  LINKED = 0,\n  RELATIVE = 1,\n  UNLINKED = 2,\n}\n\nexport enum NavigationSimpleLinkType {\n  LINKED = 0,\n  UNLINKED = 2,\n}\n\nexport class TrackableNavigationLink extends TrackableEnum<NavigationLinkType> {\n  constructor(value = NavigationLinkType.LINKED) {\n    super(NavigationLinkType, value);\n  }\n}\n\nexport class TrackableNavigationSimpleLink extends TrackableEnum<NavigationSimpleLinkType> {\n  constructor(value = NavigationSimpleLinkType.LINKED) {\n    super(NavigationSimpleLinkType, value);\n  }\n}\n\nconst tempVec3 = vec3.create();\nconst tempQuat = quat.create();\n\nfunction makeLinked<T extends RefCounted&{changed: NullarySignal}, Difference>(\n    self: T, peer: T, link: TrackableNavigationLink, operations: {\n      assign: (target: T, source: T) => void,\n      isValid: (a: T) => boolean,\n      difference: (a: T, b: T) => Difference,\n      add: (target: T, source: T, amount: Difference) => void,\n      subtract: (target: T, source: T, amount: Difference) => void\n    }): T {\n  let updatingSelf = false;\n  let updatingPeer = false;\n  let selfMinusPeer: Difference|undefined;\n  self.registerDisposer(peer);\n  const handlePeerUpdate = () => {\n    if (updatingPeer) {\n      return;\n    }\n    updatingSelf = true;\n    switch (link.value) {\n      case NavigationLinkType.UNLINKED:\n        if (operations.isValid(self)) {\n          break;\n        } else {\n          // Fallthrough to LINKED case.\n        }\n      case NavigationLinkType.LINKED:\n        operations.assign(self, peer);\n        break;\n      case NavigationLinkType.RELATIVE:\n        operations.add(self, peer, selfMinusPeer!);\n        break;\n    }\n    updatingSelf = false;\n  };\n  const handleSelfUpdate = () => {\n    if (updatingSelf) {\n      return;\n    }\n    switch (link.value) {\n      case NavigationLinkType.UNLINKED:\n        break;\n      case NavigationLinkType.LINKED:\n        operations.assign(peer, self);\n        break;\n      case NavigationLinkType.RELATIVE:\n        operations.subtract(peer, self, selfMinusPeer!);\n        break;\n    }\n  };\n  let previousLinkValue = NavigationLinkType.UNLINKED;\n  const handleLinkUpdate = () => {\n    const linkValue = link.value;\n    if (linkValue !== previousLinkValue) {\n      switch (linkValue) {\n        case NavigationLinkType.UNLINKED:\n          selfMinusPeer = undefined;\n          break;\n        case NavigationLinkType.LINKED:\n          selfMinusPeer = undefined;\n          operations.assign(self, peer);\n          break;\n        case NavigationLinkType.RELATIVE:\n          selfMinusPeer = operations.difference(self, peer);\n          break;\n      }\n    }\n    previousLinkValue = linkValue;\n    self.changed.dispatch();\n  };\n  self.registerDisposer(self.changed.add(handleSelfUpdate));\n  self.registerDisposer(peer.changed.add(handlePeerUpdate));\n  self.registerDisposer(link.changed.add(handleLinkUpdate));\n  handleLinkUpdate();\n  return self;\n}\n\nfunction makeSimpleLinked<T extends RefCounted&{changed: NullarySignal}>(\n    self: T, peer: T, link: TrackableNavigationSimpleLink, operations: {\n      assign: (target: T, source: T) => void,\n      isValid: (a: T) => boolean,\n    }) {\n  return makeLinked(self, peer, link as any, operations as any);\n}\n\nexport class Position extends RefCounted {\n  private coordinates_: Float32Array = vector.kEmptyFloat32Vec;\n  private curCoordinateSpace: CoordinateSpace|undefined;\n  changed = new NullarySignal();\n  constructor(public coordinateSpace: WatchableValueInterface<CoordinateSpace>) {\n    super();\n    this.registerDisposer(coordinateSpace.changed.add(() => {\n      this.handleCoordinateSpaceChanged();\n    }));\n  }\n\n  get valid() {\n    return this.coordinateSpace.value.valid;\n  }\n\n  /**\n   * Returns the position in voxels.\n   */\n  get value() {\n    this.handleCoordinateSpaceChanged();\n    return this.coordinates_;\n  }\n\n  reset() {\n    this.curCoordinateSpace = undefined;\n    this.coordinates_ = vector.kEmptyFloat32Vec;\n    this.changed.dispatch();\n  }\n\n  set value(coordinates: Float32Array) {\n    const {curCoordinateSpace} = this;\n    if (curCoordinateSpace === undefined || !curCoordinateSpace.valid ||\n        curCoordinateSpace.rank !== coordinates.length) {\n      return;\n    }\n    const {coordinates_} = this;\n    coordinates_.set(coordinates);\n    this.changed.dispatch();\n  }\n\n  private handleCoordinateSpaceChanged() {\n    const coordinateSpace = this.coordinateSpace.value;\n    const prevCoordinateSpace = this.curCoordinateSpace;\n    if (coordinateSpace === prevCoordinateSpace) return;\n    this.curCoordinateSpace = coordinateSpace;\n    const {rank} = coordinateSpace;\n    if (!coordinateSpace.valid) return;\n    if (prevCoordinateSpace === undefined || !prevCoordinateSpace.valid) {\n      let {coordinates_} = this;\n      if (coordinates_ !== undefined && coordinates_.length === rank) {\n        // Use the existing voxel coordinates if rank is the same.  Otherwise, ignore.\n      } else {\n        coordinates_ = this.coordinates_ = new Float32Array(rank);\n        getBoundingBoxCenter(coordinates_, coordinateSpace.bounds);\n        for (let i = 0; i < rank; ++i) {\n          coordinates_[i] = Math.floor(coordinates_[i]) + 0.5;\n        }\n      }\n      this.changed.dispatch();\n      return;\n    }\n    // Match dimensions by ID.\n    const newCoordinates = new Float32Array(rank);\n    const prevCoordinates = this.coordinates_;\n    const {ids, scales: newScales} = coordinateSpace;\n    const {ids: prevDimensionIds, scales: oldScales} = prevCoordinateSpace;\n    for (let newDim = 0; newDim < rank; ++newDim) {\n      const newDimId = ids[newDim];\n      const oldDim = prevDimensionIds.indexOf(newDimId);\n      if (oldDim === -1) {\n        newCoordinates[newDim] = getCenterBound(\n            coordinateSpace.bounds.lowerBounds[newDim], coordinateSpace.bounds.upperBounds[newDim]);\n      } else {\n        newCoordinates[newDim] = prevCoordinates[oldDim] * (oldScales[oldDim] / newScales[newDim]);\n      }\n    }\n    this.coordinates_ = newCoordinates;\n    this.changed.dispatch();\n  }\n\n  toJSON() {\n    if (!this.valid && this.coordinates_.length === 0) return undefined;\n    this.handleCoordinateSpaceChanged();\n    const {value} = this;\n    if (value.length === 0) return undefined;\n    return Array.from(value);\n  }\n\n  restoreState(obj: any) {\n    if (obj === undefined) {\n      this.reset();\n      return;\n    }\n    this.curCoordinateSpace = undefined;\n    this.coordinates_ = Float32Array.from(parseArray(obj, verifyFiniteFloat));\n    this.handleCoordinateSpaceChanged();\n    this.changed.dispatch();\n  }\n\n  snapToVoxel() {\n    this.handleCoordinateSpaceChanged();\n    const {coordinates_} = this;\n    const rank = coordinates_.length;\n    for (let i = 0; i < rank; ++i) {\n      coordinates_[i] = Math.floor(coordinates_[i]) + 0.5;\n    }\n    this.changed.dispatch();\n  }\n\n  assign(other: Borrowed<Position>) {\n    other.handleCoordinateSpaceChanged();\n    const {curCoordinateSpace, coordinates_} = other;\n    this.curCoordinateSpace = curCoordinateSpace;\n    this.coordinates_ = Float32Array.from(coordinates_);\n    this.changed.dispatch();\n  }\n\n  /**\n   * Get the offset of `a` relative to `b`.\n   */\n  static getOffset(a: Position, b: Position): Float32Array|undefined {\n    const aCoordinates = a.coordinates_;\n    const bCoordinates = b.coordinates_;\n    const rank = aCoordinates.length;\n    if (rank === bCoordinates.length) {\n      return vector.subtract(new Float32Array(aCoordinates.length), aCoordinates, bCoordinates);\n    }\n    return undefined;\n  }\n  static addOffset(\n      target: Position, source: Position, offset: Float32Array|undefined, scale: number = 1): void {\n    target.handleCoordinateSpaceChanged();\n    const {value: sourceCoordinates} = source;\n    if (offset !== undefined && sourceCoordinates.length === offset.length) {\n      vector.scaleAndAdd(target.value, sourceCoordinates, offset, scale);\n      target.changed.dispatch();\n    }\n  }\n\n  get legacyJsonView() {\n    const self = this;\n    return {\n      changed: self.changed,\n      toJSON() {\n        return self.toJSON();\n      },\n      reset() {\n        self.reset();\n      },\n      restoreState(obj: unknown) {\n        if (obj === undefined || Array.isArray(obj)) {\n          self.restoreState(obj);\n          return;\n        }\n        verifyObject(obj);\n        optionallyRestoreFromJsonMember(obj, 'voxelCoordinates', self);\n      },\n    };\n  }\n}\n\ntype TrackableLinkInterface = TrackableNavigationLink|TrackableNavigationSimpleLink;\n\nfunction restoreLinkedFromJson(\n    link: TrackableLinkInterface, value: {restoreState(obj: unknown): void}, json: any) {\n  if (json === undefined || Object.keys(json).length === 0) {\n    link.value = NavigationLinkType.LINKED;\n    return;\n  }\n  verifyObject(json);\n  link.value = NavigationLinkType.UNLINKED;\n  verifyObjectProperty(json, 'value', x => {\n    if (x !== undefined) {\n      value.restoreState(x);\n    }\n  });\n  verifyObjectProperty(json, 'link', x => link.restoreState(x));\n}\n\ninterface LinkableState<T> extends RefCounted, Trackable {\n  assign(other: T): void;\n}\n\nabstract class LinkedBase<T extends LinkableState<T>,\n                                    Link extends TrackableLinkInterface = TrackableNavigationLink>\n    implements Trackable {\n  value: T;\n  get changed() {\n    return this.value.changed;\n  }\n  constructor(public peer: Owned<T>, public link: Link = new TrackableNavigationLink() as any) {}\n\n  toJSON() {\n    const {link} = this;\n    if (link.value === NavigationLinkType.LINKED) {\n      return undefined;\n    }\n    return {link: link.toJSON(), value: this.getValueJson()};\n  }\n\n  protected getValueJson(): any {\n    return this.value.toJSON();\n  }\n\n  reset() {\n    this.link.value = NavigationLinkType.LINKED;\n  }\n\n  restoreState(obj: any) {\n    restoreLinkedFromJson(this.link, this.value, obj);\n  }\n\n  copyToPeer() {\n    if (this.link.value !== NavigationLinkType.LINKED) {\n      this.link.value = NavigationLinkType.UNLINKED;\n      this.peer.assign(this.value);\n      this.link.value = NavigationLinkType.LINKED;\n    }\n  }\n}\n\nabstract class SimpleLinkedBase<T extends RefCounted&Trackable&{assign(other: T): void}> extends\n    LinkedBase<T, TrackableNavigationSimpleLink> implements Trackable {\n  constructor(peer: Owned<T>, link = new TrackableNavigationSimpleLink()) {\n    super(peer, link);\n  }\n}\n\n\nexport class LinkedPosition extends LinkedBase<Position> {\n  value = makeLinked(new Position(this.peer.coordinateSpace), this.peer, this.link, {\n    assign: (a: Position, b: Position) => a.assign(b),\n    isValid:\n        (a: Position) => {\n          return a.valid;\n        },\n    difference: Position.getOffset,\n    add: Position.addOffset,\n    subtract:\n        (target: Position, source: Position, amount: Float32Array|undefined) => {\n          Position.addOffset(target, source, amount, -1);\n        },\n  });\n}\n\nfunction quaternionIsIdentity(q: quat) {\n  return q[0] === 0 && q[1] === 0 && q[2] === 0 && q[3] === 1;\n}\n\nexport class OrientationState extends RefCounted {\n  orientation: quat;\n  changed = new NullarySignal();\n\n  constructor(orientation?: quat) {\n    super();\n    if (orientation == null) {\n      orientation = quat.create();\n    }\n    this.orientation = orientation;\n  }\n  toJSON() {\n    let {orientation} = this;\n    quat.normalize(this.orientation, this.orientation);\n    if (quaternionIsIdentity(orientation)) {\n      return undefined;\n    }\n    return Array.prototype.slice.call(this.orientation);\n  }\n  restoreState(obj: any) {\n    try {\n      parseFiniteVec(this.orientation, obj);\n      quat.normalize(this.orientation, this.orientation);\n    } catch (ignoredError) {\n      quat.identity(this.orientation);\n    }\n    this.changed.dispatch();\n  }\n\n  reset() {\n    quat.identity(this.orientation);\n    this.changed.dispatch();\n  }\n\n  snap() {\n    let mat = mat3.create();\n    mat3.fromQuat(mat, this.orientation);\n    let usedAxes = [false, false, false];\n    for (let i = 0; i < 3; ++i) {\n      let maxComponent = 0;\n      let argmaxComponent = 0;\n      for (let j = 0; j < 3; ++j) {\n        let value = mat[i * 3 + j];\n        mat[i * 3 + j] = 0;\n        if (usedAxes[j]) {\n          continue;\n        }\n        if (Math.abs(value) > Math.abs(maxComponent)) {\n          maxComponent = value;\n          argmaxComponent = j;\n        }\n      }\n      mat[i * 3 + argmaxComponent] = Math.sign(maxComponent);\n      usedAxes[argmaxComponent] = true;\n    }\n    quat.fromMat3(this.orientation, mat);\n    this.changed.dispatch();\n  }\n\n  /**\n   * Returns a new OrientationState with orientation fixed to peerToSelf * peer.orientation.  Any\n   * changes to the returned OrientationState will cause a corresponding change in peer, and vice\n   * versa.\n   */\n  static makeRelative(peer: OrientationState, peerToSelf: quat) {\n    let self = new OrientationState(quat.multiply(quat.create(), peer.orientation, peerToSelf));\n    let updatingPeer = false;\n    self.registerDisposer(peer.changed.add(() => {\n      if (!updatingPeer) {\n        updatingSelf = true;\n        quat.multiply(self.orientation, peer.orientation, peerToSelf);\n        self.changed.dispatch();\n        updatingSelf = false;\n      }\n    }));\n    let updatingSelf = false;\n    const selfToPeer = quat.invert(quat.create(), peerToSelf);\n    self.registerDisposer(self.changed.add(() => {\n      if (!updatingSelf) {\n        updatingPeer = true;\n        quat.multiply(peer.orientation, self.orientation, selfToPeer);\n        peer.changed.dispatch();\n        updatingPeer = false;\n      }\n    }));\n    return self;\n  }\n\n  assign(other: Borrowed<OrientationState>) {\n    quat.copy(this.orientation, other.orientation);\n    this.changed.dispatch();\n  }\n}\n\nexport class LinkedOrientationState extends LinkedBase<OrientationState> {\n  value = makeLinked(new OrientationState(), this.peer, this.link, {\n    assign: (a: OrientationState, b: OrientationState) => a.assign(b),\n    isValid: () => true,\n    difference:\n        (a: OrientationState, b: OrientationState) => {\n          const temp = quat.create();\n          return quat.multiply(temp, quat.invert(temp, b.orientation), a.orientation);\n        },\n    add:\n        (target: OrientationState, source: OrientationState, amount: quat) => {\n          quat.multiply(target.orientation, source.orientation, amount);\n          target.changed.dispatch();\n        },\n    subtract:\n        (target: OrientationState, source: OrientationState, amount: quat) => {\n          quat.multiply(target.orientation, source.orientation, quat.invert(tempQuat, amount));\n          target.changed.dispatch();\n        }\n  });\n}\n\nexport interface RelativeDisplayScales {\n  /**\n   * Array of length `coordinateSpace.rank` specifying scale factors on top of (will be multiply by)\n   * `coordinateSpace.scales` to use for display purposes.  This allows non-uniform zooming.\n   */\n  factors: Float64Array;\n}\n\nexport class TrackableRelativeDisplayScales extends RefCounted implements\n    Trackable, WatchableValueInterface<RelativeDisplayScales> {\n  changed = new NullarySignal();\n  private curCoordinateSpace = emptyInvalidCoordinateSpace;\n  private value_: RelativeDisplayScales = {factors: new Float64Array(0)};\n  constructor(public coordinateSpace: WatchableValueInterface<CoordinateSpace>) {\n    super();\n    this.registerDisposer(coordinateSpace.changed.add(() => this.update()));\n    this.update();\n  }\n\n  get value() {\n    return this.update();\n  }\n\n  reset() {\n    this.value_ = {factors: new Float64Array(0)};\n    this.curCoordinateSpace = emptyInvalidCoordinateSpace;\n    this.changed.dispatch();\n  }\n\n  toJSON() {\n    const json: any = {};\n    let nonEmpty = false;\n    const {value} = this;\n    const {factors} = value;\n    const {names, rank} = this.curCoordinateSpace;\n    for (let i = 0; i < rank; ++i) {\n      const factor = factors[i];\n      if (factor === 1) continue;\n      json[names[i]] = factor;\n      nonEmpty = true;\n    }\n    if (nonEmpty) return json;\n    return undefined;\n  }\n\n  restoreState(json: unknown) {\n    const {coordinateSpace: {value: coordinateSpace}} = this;\n    const {names, rank} = coordinateSpace;\n    const factors = new Float64Array(rank);\n    factors.fill(-1);\n    if (json !== undefined) {\n      const obj = verifyObject(json);\n      for (let i = 0; i < rank; ++i) {\n        factors[i] = verifyObjectProperty(\n            obj, names[i], x => x === undefined ? 1 : verifyFinitePositiveFloat(x));\n      }\n    }\n    this.value_ = {factors};\n    this.curCoordinateSpace = coordinateSpace;\n    this.changed.dispatch();\n  }\n\n  setFactors(factors: Float64Array) {\n    const {coordinateSpace: {value: coordinateSpace}} = this;\n    if (factors.length !== coordinateSpace.rank) return;\n    this.value_ = {factors};\n    this.curCoordinateSpace = coordinateSpace;\n    this.changed.dispatch();\n  }\n\n  private update() {\n    const {coordinateSpace: {value: coordinateSpace}} = this;\n    let value = this.value_;\n    const {curCoordinateSpace} = this;\n    if (curCoordinateSpace === coordinateSpace) return value;\n    const {ids: oldDimensionIds} = curCoordinateSpace;\n    const {ids: newDimensionIds, rank} = coordinateSpace;\n    const oldFactors = value.factors;\n    const newFactors = new Float64Array(rank);\n    newFactors.fill(1);\n    for (let i = 0; i < rank; ++i) {\n      const id = newDimensionIds[i];\n      const oldIndex = oldDimensionIds.indexOf(id);\n      if (oldIndex === -1) continue;\n      newFactors[i] = oldFactors[oldIndex];\n    }\n    if (arraysEqual(newFactors, oldFactors)) return value;\n    value = this.value_ = {factors: newFactors};\n    this.curCoordinateSpace = coordinateSpace;\n    this.changed.dispatch();\n    return value;\n  }\n\n  assign(other: TrackableRelativeDisplayScales) {\n    this.setFactors(other.value.factors);\n  }\n}\n\nfunction mapPerDimensionValues<T, A extends {length: number, [index: number]: T},\n                                            C extends {new (n: number): A}>(\n    arrayConstructor: C, input: A, oldCoordinateSpace: CoordinateSpace,\n    newCoordinateSpace: CoordinateSpace, defaultValue: (index: number) => T): A {\n  if (oldCoordinateSpace === newCoordinateSpace) return input;\n  const {ids: oldDimensionIds} = oldCoordinateSpace;\n  const {rank: newRank, ids: newDimensionIds} = newCoordinateSpace;\n  const output = new arrayConstructor(newRank);\n  for (let newDim = 0; newDim < newRank; ++newDim) {\n    const id = newDimensionIds[newDim];\n    const oldDim = oldDimensionIds.indexOf(id);\n    output[newDim] = (oldDim === -1) ? defaultValue(newDim) : input[oldDim];\n  }\n  return output;\n}\n\nexport class LinkedRelativeDisplayScales extends LinkedBase<TrackableRelativeDisplayScales> {\n  value = makeLinked(\n      new TrackableRelativeDisplayScales(this.peer.coordinateSpace), this.peer, this.link, {\n        assign: (target, source) => target.assign(source),\n        difference:\n            (a, b) => {\n              const {factors: fa} = a.value;\n              const coordinateSpace = a.coordinateSpace.value;\n              const fb = b.value.factors;\n              return {\n                coordinateSpace,\n                offsets: vector.subtract(new Float64Array(fa.length), fa, fb)\n              };\n            },\n        add:\n            (target, source, delta: {offsets: Float64Array, coordinateSpace: CoordinateSpace}) => {\n              const newOffsets = mapPerDimensionValues(\n                  Float64Array, delta.offsets, delta.coordinateSpace, target.coordinateSpace.value,\n                  () => 0);\n              target.setFactors(vector.add(\n                  new Float64Array(newOffsets.length), newOffsets, source.value.factors));\n            },\n        subtract:\n            (target, source, delta: {offsets: Float64Array, coordinateSpace: CoordinateSpace}) => {\n              const newOffsets = mapPerDimensionValues(\n                  Float64Array, delta.offsets, delta.coordinateSpace, target.coordinateSpace.value,\n                  () => 0);\n              target.setFactors(vector.subtract(\n                  new Float64Array(newOffsets.length), source.value.factors, newOffsets));\n            },\n        isValid: () => true,\n      });\n}\n\nexport interface DisplayDimensionRenderInfo {\n  /**\n   * Number of global dimensions.\n   */\n  globalRank: number;\n\n  /**\n   * Array of length `globalRank` specifying global dimension names.\n   */\n  globalDimensionNames: readonly string[];\n\n  /**\n   * Number of displayed dimensions.  Must be <= 3.\n   */\n  displayRank: number;\n\n  /**\n   * Array of length 3.  The first `displayRank` elements specify the indices of the the global\n   * dimensions that are displayed.  The remaining elements are `-1`.\n   */\n  displayDimensionIndices: Int32Array;\n\n  /**\n   * Array of length 3.  `voxelPhysicalScales[i]` equals\n   * `relativeDisplayScales[d] * coordinateSpace.scales[d]`,\n   * where `d = displayDimensionIndices[i]`, or `1` for `i >= rank`.\n   */\n  voxelPhysicalScales: Float64Array;\n\n  /**\n   * Unit corresponding to each dimension in `displayDimensionIndices`.  `displayDimensionUnits[i]`\n   * is equal to `coordinateSpace.units[displayDimensionIndices[i]]`, or `''` if\n   * `displayDimensionIndices[i] == -1`.\n   */\n  displayDimensionUnits: readonly string[];\n\n  /**\n   * Scale corresponding to each dimension in `displayDimensionIndices`.\n   * `displayDimensionScales[i]` is equal to `coordinateSpace.scales[displayDimensionIndices[i]]`,\n   * or `1` if `displayDimensionIndices[i] == -1`.\n   */\n  displayDimensionScales: Float64Array;\n\n  /**\n   * Physical scale corresponding to the canonical voxel.  Equal to minimum of\n   * `voxelPhysicalScales.slice(0, rank)`, or `1` if `rank == 0`.\n   */\n  canonicalVoxelPhysicalSize: number;\n\n  /**\n   * Array of length 3.  Amount by which the voxel coordinates of each display dimensions must be\n   * multiplied to convert to canonical voxels.  canonicalVoxelFactors[i] = voxelPhysicalScales[d] /\n   * canonicalVoxelPhysicalSize, where d = dimensionIndices[i], or `1` for `i >= rank`.\n   */\n  canonicalVoxelFactors: Float64Array;\n}\n\nfunction getDisplayDimensionRenderInfo(\n    coordinateSpace: CoordinateSpace, displayDimensions: DisplayDimensions,\n    relativeDisplayScales: RelativeDisplayScales): DisplayDimensionRenderInfo {\n  const {rank: globalRank, names: globalDimensionNames, units} = coordinateSpace;\n  const {displayRank, displayDimensionIndices} = displayDimensions;\n  const canonicalVoxelFactors = new Float64Array(3);\n  let voxelPhysicalScales = new Float64Array(3);\n  let canonicalVoxelPhysicalSize: number;\n  const {factors} = relativeDisplayScales;\n  const displayDimensionUnits = new Array<string>(3);\n  const displayDimensionScales = new Float64Array(3);\n  canonicalVoxelFactors.fill(1);\n  voxelPhysicalScales.fill(1);\n  displayDimensionScales.fill(1);\n  displayDimensionUnits.fill('');\n  if (displayRank === 0) {\n    canonicalVoxelPhysicalSize = 1;\n  } else {\n    canonicalVoxelPhysicalSize = Number.POSITIVE_INFINITY;\n    const {scales} = coordinateSpace;\n    for (let i = 0; i < displayRank; ++i) {\n      const dim = displayDimensionIndices[i];\n      const s = voxelPhysicalScales[i] = factors[dim] * scales[dim];\n      canonicalVoxelPhysicalSize = Math.min(canonicalVoxelPhysicalSize, s);\n      displayDimensionUnits[i] = units[dim];\n      displayDimensionScales[i] = scales[dim];\n    }\n    for (let i = 0; i < displayRank; ++i) {\n      canonicalVoxelFactors[i] = voxelPhysicalScales[i] / canonicalVoxelPhysicalSize;\n    }\n  }\n  return {\n    globalRank,\n    globalDimensionNames,\n    displayRank,\n    displayDimensionIndices,\n    displayDimensionUnits,\n    displayDimensionScales,\n    canonicalVoxelFactors,\n    voxelPhysicalScales,\n    canonicalVoxelPhysicalSize,\n  };\n}\n\nexport function displayDimensionRenderInfosEqual(\n    a: DisplayDimensionRenderInfo, b: DisplayDimensionRenderInfo) {\n  return arraysEqual(a.globalDimensionNames, b.globalDimensionNames) &&\n      arraysEqual(a.displayDimensionIndices, b.displayDimensionIndices) &&\n      arraysEqual(a.canonicalVoxelFactors, b.canonicalVoxelFactors) &&\n      arraysEqual(a.voxelPhysicalScales, b.voxelPhysicalScales) &&\n      a.canonicalVoxelPhysicalSize === b.canonicalVoxelPhysicalSize &&\n      arraysEqual(a.displayDimensionUnits, b.displayDimensionUnits) &&\n      arraysEqual(a.displayDimensionScales, b.displayDimensionScales);\n}\n\nexport class WatchableDisplayDimensionRenderInfo extends RefCounted {\n  changed = new NullarySignal();\n  private curRelativeDisplayScales: RelativeDisplayScales = this.relativeDisplayScales.value;\n  private curDisplayDimensions: DisplayDimensions = this.displayDimensions.value;\n  private curCoordinateSpace: CoordinateSpace = this.relativeDisplayScales.coordinateSpace.value;\n  private value_: DisplayDimensionRenderInfo = getDisplayDimensionRenderInfo(\n      this.curCoordinateSpace, this.curDisplayDimensions, this.curRelativeDisplayScales);\n  get value() {\n    const {\n      relativeDisplayScales:\n          {value: relativeDisplayScales, coordinateSpace: {value: coordinateSpace}},\n      displayDimensions: {value: displayDimensions},\n      curRelativeDisplayScales,\n      curDisplayDimensions,\n      curCoordinateSpace,\n    } = this;\n    let value = this.value_;\n    if (curRelativeDisplayScales !== relativeDisplayScales ||\n        curDisplayDimensions !== displayDimensions || curCoordinateSpace !== coordinateSpace) {\n      this.curRelativeDisplayScales = relativeDisplayScales;\n      this.curDisplayDimensions = displayDimensions;\n      this.curCoordinateSpace = coordinateSpace;\n      const newValue =\n          getDisplayDimensionRenderInfo(coordinateSpace, displayDimensions, relativeDisplayScales);\n      if (!displayDimensionRenderInfosEqual(value, newValue)) {\n        this.value_ = value = newValue;\n        this.changed.dispatch();\n      }\n    }\n    return value;\n  }\n  constructor(\n      public relativeDisplayScales: Owned<TrackableRelativeDisplayScales>,\n      public displayDimensions: Owned<TrackableDisplayDimensions>) {\n    super();\n    this.registerDisposer(relativeDisplayScales);\n    this.registerDisposer(displayDimensions);\n    const maybeUpdateValue = () => {\n      this.value;\n    };\n    this.registerDisposer(relativeDisplayScales.changed.add(maybeUpdateValue));\n    this.registerDisposer(displayDimensions.changed.add(maybeUpdateValue));\n  }\n}\n\nexport interface DisplayDimensions {\n  coordinateSpace: CoordinateSpace;\n  displayRank: number;\n  displayDimensionIndices: Int32Array;\n}\n\nexport class TrackableDisplayDimensions extends RefCounted implements Trackable {\n  changed = new NullarySignal();\n  private default_ = true;\n  private value_: DisplayDimensions|undefined = undefined;\n\n  constructor(public coordinateSpace: WatchableValueInterface<CoordinateSpace>) {\n    super();\n    this.registerDisposer(this.coordinateSpace.changed.add(this.changed.dispatch));\n    this.update();\n  }\n\n  get value() {\n    this.update();\n    return this.value_!;\n  }\n\n  private update() {\n    const {coordinateSpace: {value: coordinateSpace}} = this;\n    const value = this.value_;\n    if (value !== undefined && value.coordinateSpace === coordinateSpace) {\n      return;\n    }\n    if (value === undefined || this.default_) {\n      this.setToDefault(coordinateSpace);\n      return;\n    }\n    const newDimensionIndices = new Int32Array(3);\n    const {ids: oldDimensionIds} = value.coordinateSpace;\n    const {ids: newDimensionIds} = coordinateSpace;\n    const oldDimensionIndices = value.displayDimensionIndices;\n    const oldRank = value.displayRank;\n    let newRank = 0;\n    for (let i = 0; i < oldRank; ++i) {\n      const newDim = newDimensionIds.indexOf(oldDimensionIds[oldDimensionIndices[i]]);\n      if (newDim === -1) continue;\n      newDimensionIndices[newRank] = newDim;\n      ++newRank;\n    }\n    newDimensionIndices.fill(-1, newRank);\n    if (newRank === 0) {\n      this.default_ = true;\n      this.setToDefault(coordinateSpace);\n      return;\n    }\n    this.assignValue(coordinateSpace, newRank, newDimensionIndices);\n    this.changed.dispatch();\n  }\n\n  private setToDefault(coordinateSpace: CoordinateSpace) {\n    const displayRank = Math.min(coordinateSpace.rank, 3);\n    const displayDimensionIndices = new Int32Array(3);\n    displayDimensionIndices.fill(-1);\n    for (let i = 0; i < displayRank; ++i) {\n      displayDimensionIndices[i] = i;\n    }\n    this.assignValue(coordinateSpace, displayRank, displayDimensionIndices);\n  }\n\n  private assignValue(\n      coordinateSpace: CoordinateSpace, displayRank: number, displayDimensionIndices: Int32Array) {\n    this.value_ = {\n      coordinateSpace,\n      displayRank,\n      displayDimensionIndices,\n    };\n    this.changed.dispatch();\n  }\n\n  reset() {\n    this.default_ = true;\n    this.value_ = undefined;\n    this.changed.dispatch();\n  }\n\n  restoreState(obj: any) {\n    if (obj === undefined) {\n      this.reset();\n      return;\n    }\n    const displayDimensionNames = dimensionNamesFromJson(obj);\n    if (displayDimensionNames.length > 3) {\n      throw new Error('Number of spatial dimensions must be <= 3');\n    }\n    const {coordinateSpace: {value: coordinateSpace}} = this;\n    const displayDimensionIndices = new Int32Array(3);\n    displayDimensionIndices.fill(-1);\n    const {names} = coordinateSpace;\n    let displayRank = 0;\n    for (const name of displayDimensionNames) {\n      const index = names.indexOf(name);\n      if (index === -1) continue;\n      displayDimensionIndices[displayRank++] = index;\n    }\n    if (displayRank === 0) {\n      this.reset();\n      return;\n    }\n    this.default_ = false;\n    this.assignValue(coordinateSpace, displayRank, displayDimensionIndices);\n  }\n\n  get default() {\n    this.update();\n    return this.default_;\n  }\n\n  set default(value: boolean) {\n    if (this.default_ === value) return;\n    if (value) {\n      this.default_ = true;\n      this.setToDefault(this.coordinateSpace.value);\n    } else {\n      this.default_ = false;\n      this.changed.dispatch();\n    }\n  }\n\n  setDimensionIndices(rank: number, dimensionIndices: Int32Array) {\n    this.default_ = false;\n    this.assignValue(this.coordinateSpace.value, rank, dimensionIndices);\n  }\n\n  toJSON() {\n    if (this.default_) return undefined;\n    const {value} = this;\n    const displayDimensionNames: string[] = [];\n    const {displayRank, displayDimensionIndices, coordinateSpace: {names}} = value;\n    if (displayRank === 0) return undefined;\n    for (let i = 0; i < displayRank; ++i) {\n      displayDimensionNames[i] = names[displayDimensionIndices[i]];\n    }\n    return displayDimensionNames;\n  }\n\n  assign(other: TrackableDisplayDimensions) {\n    if (other.default) {\n      this.default = true;\n    } else {\n      const {displayRank, displayDimensionIndices} = other.value;\n      this.setDimensionIndices(displayRank, displayDimensionIndices);\n    }\n  }\n}\n\nexport class LinkedDisplayDimensions extends SimpleLinkedBase<TrackableDisplayDimensions> {\n  value = makeSimpleLinked(\n      new TrackableDisplayDimensions(this.peer.coordinateSpace), this.peer, this.link, {\n        assign: (target, source) => target.assign(source),\n        isValid: () => true,\n      });\n  constructor(peer: Owned<TrackableDisplayDimensions>) {\n    super(peer);\n  }\n}\n\nexport class DisplayPose extends RefCounted {\n  changed = new NullarySignal();\n\n  get displayDimensions(): Borrowed<TrackableDisplayDimensions> {\n    return this.displayDimensionRenderInfo.displayDimensions;\n  }\n\n  get relativeDisplayScales(): Borrowed<TrackableRelativeDisplayScales> {\n    return this.displayDimensionRenderInfo.relativeDisplayScales;\n  }\n\n  constructor(\n      public position: Owned<Position>,\n      public displayDimensionRenderInfo: WatchableDisplayDimensionRenderInfo,\n      public orientation: Owned<OrientationState>) {\n    super();\n    this.registerDisposer(position);\n    this.registerDisposer(orientation);\n    this.registerDisposer(displayDimensionRenderInfo);\n    this.registerDisposer(position.changed.add(this.changed.dispatch));\n    this.registerDisposer(orientation.changed.add(this.changed.dispatch));\n    this.registerDisposer(displayDimensionRenderInfo.changed.add(this.changed.dispatch));\n  }\n\n  get valid() {\n    return this.position.valid;\n  }\n\n  /**\n   * Resets everything.\n   */\n  reset() {\n    this.position.reset();\n    this.orientation.reset();\n    this.displayDimensions.reset();\n  }\n\n  updateDisplayPosition(fun: (pos: vec3) => boolean | void, temp: vec3 = tempVec3): boolean {\n    const {coordinateSpace: {value: coordinateSpace}, value: voxelCoordinates} = this.position;\n    const {displayDimensionIndices, displayRank} = this.displayDimensions.value;\n    if (coordinateSpace === undefined) return false;\n    temp.fill(0);\n    for (let i = 0; i < displayRank; ++i) {\n      const dim = displayDimensionIndices[i];\n      temp[i] = voxelCoordinates[dim];\n    }\n    if (fun(temp) !== false) {\n      for (let i = 0; i < displayRank; ++i) {\n        const dim = displayDimensionIndices[i];\n        voxelCoordinates[dim] = temp[i];\n      }\n      this.position.changed.dispatch();\n      return true;\n    }\n    return false;\n  }\n\n  // Transform from view coordinates to global spatial coordinates.\n  toMat4(mat: mat4, zoom: number) {\n    mat4.fromQuat(mat, this.orientation.orientation);\n    const {value: voxelCoordinates} = this.position;\n    const {canonicalVoxelFactors, displayDimensionIndices} = this.displayDimensionRenderInfo.value;\n    for (let i = 0; i < 3; ++i) {\n      const dim = displayDimensionIndices[i];\n      const scale = zoom / canonicalVoxelFactors[i];\n      mat[i] *= scale;\n      mat[4 + i] *= scale;\n      mat[8 + i] *= scale;\n      mat[12 + i] = voxelCoordinates[dim] || 0;\n    }\n  }\n\n  toMat3(mat: mat3, zoom: number) {\n    mat3.fromQuat(mat, this.orientation.orientation);\n    const {canonicalVoxelFactors, displayRank} = this.displayDimensionRenderInfo.value;\n    for (let i = 0; i < displayRank; ++i) {\n      const scale = zoom / canonicalVoxelFactors[i];\n      mat[i] *= scale;\n      mat[3 + i] *= scale;\n      mat[6 + i] *= scale;\n    }\n  }\n\n  /**\n   * Snaps the orientation to the nearest axis-aligned orientation, and\n   * snaps the position to the nearest voxel.\n   */\n  snap() {\n    this.orientation.snap();\n    this.position.snapToVoxel();\n    this.changed.dispatch();\n  }\n\n  translateDimensionRelative(dimensionIndex: number, adjustment: number) {\n    if (!this.valid) {\n      return;\n    }\n    const {position} = this;\n    const {value: voxelCoordinates} = position;\n    const {bounds: {lowerBounds, upperBounds}} = position.coordinateSpace.value;\n    let newValue = voxelCoordinates[dimensionIndex] + adjustment;\n    if (adjustment > 0) {\n      const bound = upperBounds[dimensionIndex];\n      if (Number.isFinite(bound)) {\n        newValue = Math.min(newValue, Math.ceil(bound - 1));\n      }\n    } else {\n      const bound = lowerBounds[dimensionIndex];\n      if (Number.isFinite(bound)) {\n        newValue = Math.max(newValue, Math.floor(bound));\n      }\n    }\n    voxelCoordinates[dimensionIndex] = newValue;\n    position.changed.dispatch();\n  }\n\n  translateVoxelsRelative(translation: vec3, round: boolean = false) {\n    if (!this.valid) {\n      return;\n    }\n    const temp = vec3.transformQuat(tempVec3, translation, this.orientation.orientation);\n    const {position} = this;\n    const {value: voxelCoordinates} = position;\n    const {displayDimensionIndices, displayRank} = this.displayDimensions.value;\n    const {bounds: {lowerBounds, upperBounds}} = position.coordinateSpace.value;\n    for (let i = 0; i < displayRank; ++i) {\n      const dim = displayDimensionIndices[i];\n      const adjustment = temp[i];\n      if (adjustment === 0) continue;\n      let newValue = voxelCoordinates[dim] + adjustment;\n      if (adjustment > 0) {\n        const bound = upperBounds[dim];\n        if (Number.isFinite(bound)) {\n          newValue = Math.min(newValue, Math.ceil(bound - 1));\n        }\n      } else {\n        const bound = lowerBounds[dim];\n        if (Number.isFinite(bound)) {\n          newValue = Math.max(newValue, Math.floor(bound));\n        }\n      }\n      if (round) newValue = Math.floor(newValue) + 0.5;\n      voxelCoordinates[dim] = newValue;\n    }\n    this.position.changed.dispatch();\n  }\n\n  rotateRelative(axis: vec3, angle: number) {\n    var temp = quat.create();\n    quat.setAxisAngle(temp, axis, angle);\n    var orientation = this.orientation.orientation;\n    quat.multiply(orientation, orientation, temp);\n    this.orientation.changed.dispatch();\n  }\n\n  rotateAbsolute(axis: vec3, angle: number, fixedPoint: Float32Array) {\n    const {coordinateSpace: {value: coordinateSpace}, value: voxelCoordinates} = this.position;\n    if (coordinateSpace === undefined) return;\n    const {\n      relativeDisplayScales: {value: {factors: relativeDisplayScales}},\n      displayDimensions: {value: {displayDimensionIndices, displayRank}}\n    } = this;\n    const {scales} = coordinateSpace;\n    const temp = quat.create();\n    quat.setAxisAngle(temp, axis, angle);\n    const orientation = this.orientation.orientation;\n\n    // We want the coordinates in the transformed coordinate frame of the fixed point to remain\n    // the same after the rotation.\n\n    // We have the invariants:\n    // oldOrienation * fixedPointLocal + oldPosition == fixedPoint.\n    // newOrientation * fixedPointLocal + newPosition == fixedPoint.\n\n    // Therefore, we compute fixedPointLocal by:\n    // fixedPointLocal == inverse(oldOrientation) * (fixedPoint - oldPosition).\n    const fixedPointLocal = tempVec3;\n    tempVec3.fill(0);\n    for (let i = 0; i < displayRank; ++i) {\n      const dim = displayDimensionIndices[i];\n      const diff = fixedPoint[dim] - voxelCoordinates[dim];\n      fixedPointLocal[i] = diff * scales[dim] * relativeDisplayScales[dim];\n    }\n    const invOrientation = quat.invert(tempQuat, orientation);\n    vec3.transformQuat(fixedPointLocal, fixedPointLocal, invOrientation);\n\n    // We then compute the newPosition by:\n    // newPosition := fixedPoint - newOrientation * fixedPointLocal.\n    quat.multiply(orientation, temp, orientation);\n    vec3.transformQuat(fixedPointLocal, fixedPointLocal, orientation);\n\n    for (let i = 0; i < displayRank; ++i) {\n      const dim = displayDimensionIndices[i];\n      voxelCoordinates[dim] =\n          fixedPoint[dim] - fixedPointLocal[i] / (scales[dim] * relativeDisplayScales[dim]);\n    }\n    this.position.changed.dispatch();\n    this.orientation.changed.dispatch();\n  }\n\n  translateNonDisplayDimension(nonSpatialDimensionIndex: number, adjustment: number) {\n    if (!this.valid) return;\n    const {displayDimensionIndices} = this.displayDimensions.value;\n    const {position} = this;\n    const rank = position.coordinateSpace.value.rank;\n    for (let i = 0; i < rank; ++i) {\n      if (displayDimensionIndices.indexOf(i) !== -1) continue;\n      if (nonSpatialDimensionIndex-- === 0) {\n        this.translateDimensionRelative(i, adjustment);\n        return;\n      }\n    }\n  }\n}\n\nexport type TrackableZoomInterface = TrackableProjectionZoom|TrackableCrossSectionZoom;\n\nexport class LinkedZoomState<T extends TrackableProjectionZoom|TrackableCrossSectionZoom> extends\n    LinkedBase<T> {\n  constructor(\n      peer: Owned<T>, displayDimensionRenderInfo: Owned<WatchableDisplayDimensionRenderInfo>) {\n    super(peer);\n    this.value = (() => {\n      const self: T = new (peer.constructor as any)(displayDimensionRenderInfo);\n      const assign = (target: T, source: T) => {\n        target.assign(source);\n      };\n      const difference = (a: T, b: T) => {\n        return (a.value / b.value) * (a.canonicalVoxelPhysicalSize / b.canonicalVoxelPhysicalSize);\n      };\n      const add = (target: T, source: T, amount: number) => {\n        target.setPhysicalScale(source.value * amount, source.canonicalVoxelPhysicalSize);\n      };\n      const subtract = (target: T, source: T, amount: number) => {\n        target.setPhysicalScale(source.value / amount, source.canonicalVoxelPhysicalSize);\n      };\n      const isValid = (x: T) => x.coordinateSpaceValue.valid && x.canonicalVoxelPhysicalSize !== 0;\n      makeLinked(self, this.peer, this.link, {assign, isValid, difference, add, subtract});\n      return self;\n    })();\n  }\n}\n\nexport function\nlinkedStateLegacyJsonView<T extends LinkableState<T>&{readonly legacyJsonView: Trackable}>(\n    linked: LinkedBase<T>) {\n  return {\n    changed: linked.changed,\n    toJSON() {\n      return linked.toJSON();\n    },\n    restoreState(obj: unknown) {\n      restoreLinkedFromJson(linked.link, linked.value.legacyJsonView, obj);\n    },\n    reset() {\n      linked.reset();\n    },\n  };\n}\n\nabstract class TrackableZoom extends RefCounted implements Trackable,\n                                                           WatchableValueInterface<number> {\n  readonly changed = new NullarySignal();\n  private curCanonicalVoxelPhysicalSize = 0;\n  private value_: number = Number.NaN;\n  protected legacyValue_: number = Number.NaN;\n\n  /**\n   * Zoom factor.  For cross section views, in canonical voxels per viewport pixel.  For projection\n   * views, in canonical voxels per viewport height (for orthographic projection).\n   */\n  get value() {\n    this.handleCoordinateSpaceChanged();\n    return this.value_;\n  }\n\n  set value(value: number) {\n    const {canonicalVoxelPhysicalSize} = this;\n    if (Object.is(value, this.value_) &&\n        canonicalVoxelPhysicalSize === this.curCanonicalVoxelPhysicalSize) {\n      return;\n    }\n    this.curCanonicalVoxelPhysicalSize = canonicalVoxelPhysicalSize;\n    this.legacyValue_ = Number.NaN;\n    this.value_ = value;\n    this.changed.dispatch();\n  }\n\n  get canonicalVoxelPhysicalSize() {\n    return this.displayDimensionRenderInfo.value.canonicalVoxelPhysicalSize;\n  }\n\n  get coordinateSpaceValue() {\n    return this.displayDimensionRenderInfo.relativeDisplayScales.coordinateSpace.value;\n  }\n\n  /**\n   * Sets the zoom factor in the legacy units.  For cross section views, `1e-9` spatial units per\n   * viewport pixel.  For projection views, `2 * 100 * Math.tan(Math.PI / 8) * 1e-9` spatial units\n   * per viewport height (for orthographic projection).\n   */\n  set legacyValue(value: number) {\n    if (Object.is(value, this.legacyValue_)) return;\n    this.value_ = Number.NaN;\n    this.legacyValue_ = value;\n    this.curCanonicalVoxelPhysicalSize = 0;\n    this.changed.dispatch();\n  }\n\n  get legacyValue() {\n    return this.legacyValue_;\n  }\n\n  constructor(public displayDimensionRenderInfo: Owned<WatchableDisplayDimensionRenderInfo>) {\n    super();\n    this.registerDisposer(displayDimensionRenderInfo);\n    this.registerDisposer(\n        displayDimensionRenderInfo.changed.add(() => this.handleCoordinateSpaceChanged()));\n    this.registerDisposer(\n        displayDimensionRenderInfo.relativeDisplayScales.coordinateSpace.changed.add(\n            () => this.handleCoordinateSpaceChanged()));\n    this.handleCoordinateSpaceChanged();\n  }\n\n  handleCoordinateSpaceChanged() {\n    const {value_} = this;\n    const {\n      displayDimensionRenderInfo: {\n        value: {canonicalVoxelPhysicalSize},\n        relativeDisplayScales: {coordinateSpace: {value: coordinateSpace}}\n      }\n    } = this;\n    const {curCanonicalVoxelPhysicalSize} = this;\n    if (!Number.isNaN(value_) && canonicalVoxelPhysicalSize === curCanonicalVoxelPhysicalSize) {\n      return;\n    }\n    if (!Number.isNaN(value_)) {\n      if (curCanonicalVoxelPhysicalSize !== 0) {\n        this.value_ = value_ * (curCanonicalVoxelPhysicalSize / canonicalVoxelPhysicalSize);\n        this.curCanonicalVoxelPhysicalSize = canonicalVoxelPhysicalSize;\n        this.changed.dispatch();\n      }\n      return;\n    }\n    if (!coordinateSpace.valid || canonicalVoxelPhysicalSize === 0) {\n      return;\n    }\n    this.curCanonicalVoxelPhysicalSize = canonicalVoxelPhysicalSize;\n    this.value_ = this.getDefaultValue();\n    this.changed.dispatch();\n  }\n\n  protected abstract getDefaultValue(): number;\n\n  toJSON() {\n    const {value} = this;\n    return Number.isNaN(value) ? undefined : value;\n  }\n\n  restoreState(obj: any) {\n    this.curCanonicalVoxelPhysicalSize = 0;\n    this.legacyValue_ = Number.NaN;\n    if (obj === undefined) {\n      this.value_ = Number.NaN;\n    } else {\n      this.value_ = verifyFinitePositiveFloat(obj);\n    }\n    this.changed.dispatch();\n  }\n\n  reset() {\n    this.curCanonicalVoxelPhysicalSize = 0;\n    this.value_ = Number.NaN;\n    this.legacyValue_ = Number.NaN;\n    this.changed.dispatch();\n  }\n\n  get legacyJsonView() {\n    const self = this;\n    return {\n      changed: self.changed,\n      toJSON() {\n        return self.toJSON();\n      },\n      reset() {\n        return self.reset();\n      },\n      restoreState(obj: any) {\n        self.legacyValue = verifyFinitePositiveFloat(obj);\n      },\n    };\n  }\n\n  setPhysicalScale(scaleInCanonicalVoxels: number, canonicalVoxelPhysicalSize: number) {\n    const curCanonicalVoxelPhysicalSize = this.curCanonicalVoxelPhysicalSize =\n        this.canonicalVoxelPhysicalSize;\n    this.value =\n        scaleInCanonicalVoxels * (canonicalVoxelPhysicalSize / curCanonicalVoxelPhysicalSize);\n  }\n\n  assign(source: TrackableZoomInterface) {\n    const {legacyValue} = source;\n    if (!Number.isNaN(legacyValue)) {\n      this.legacyValue = legacyValue;\n    } else {\n      this.setPhysicalScale(source.value, source.canonicalVoxelPhysicalSize);\n    }\n  }\n}\n\nexport class TrackableCrossSectionZoom extends TrackableZoom {\n  protected getDefaultValue() {\n    const {legacyValue_} = this;\n    if (Number.isNaN(legacyValue_)) {\n      // Default is 1 voxel per viewport pixel.\n      return 1;\n    }\n    const {canonicalVoxelPhysicalSize} = this;\n    return this.legacyValue_ * 1e-9 / canonicalVoxelPhysicalSize;\n  }\n}\n\nexport class TrackableProjectionZoom extends TrackableZoom {\n  protected getDefaultValue() {\n    const {legacyValue_} = this;\n    if (!Number.isNaN(legacyValue_)) {\n      this.legacyValue_ = Number.NaN;\n      const {canonicalVoxelPhysicalSize} = this;\n      return 2 * 100 * Math.tan(Math.PI / 8) * 1e-9 * legacyValue_ / canonicalVoxelPhysicalSize;\n    }\n    const {coordinateSpaceValue: {bounds: {lowerBounds, upperBounds}}} = this;\n    const {canonicalVoxelFactors, displayDimensionIndices} = this.displayDimensionRenderInfo.value;\n    let value = canonicalVoxelFactors.reduce((x, factor, i) => {\n      const dim = displayDimensionIndices[i];\n      const extent = (upperBounds[dim] - lowerBounds[dim]) * factor;\n      return Math.max(x, extent);\n    }, 0);\n    if (!Number.isFinite(value)) {\n      // Default to showing 1024 voxels if there is no bounds information.\n      value = 1024;\n    } else {\n      value = 2 ** Math.ceil(Math.log2(value));\n    }\n    return value;\n  }\n}\n\nexport class TrackableDepthRange extends RefCounted implements WatchableValueInterface<number> {\n  changed = new NullarySignal();\n\n  constructor(\n      public readonly defaultValue: number,\n      public displayDimensionRenderInfo: WatchableValueInterface<DisplayDimensionRenderInfo>) {\n    super();\n    this.value_ = defaultValue;\n    this.canonicalVoxelPhysicalSize = displayDimensionRenderInfo.value.canonicalVoxelPhysicalSize;\n    this.registerDisposer(displayDimensionRenderInfo.changed.add(() => {\n      this.value;\n    }));\n  }\n\n  private value_: number;\n  canonicalVoxelPhysicalSize: number;\n\n  get value() {\n    let {value_} = this;\n    if (value_ > 0) {\n      const {canonicalVoxelPhysicalSize} = this.displayDimensionRenderInfo.value;\n      const prevCanonicalVoxelPhysicalSize = this.canonicalVoxelPhysicalSize;\n      if (canonicalVoxelPhysicalSize !== prevCanonicalVoxelPhysicalSize) {\n        this.canonicalVoxelPhysicalSize = canonicalVoxelPhysicalSize;\n        value_ = this.value_ = value_ =\n            (prevCanonicalVoxelPhysicalSize / canonicalVoxelPhysicalSize);\n        this.changed.dispatch();\n      }\n    }\n    return value_;\n  }\n\n  set value(value: number) {\n    if (value === this.value) return;\n    this.value_ = value;\n    const {canonicalVoxelPhysicalSize} = this.displayDimensionRenderInfo.value;\n    this.canonicalVoxelPhysicalSize = canonicalVoxelPhysicalSize;\n    this.changed.dispatch();\n  }\n\n  toJSON() {\n    const {value} = this;\n    if (value === this.defaultValue) return undefined;\n    return value;\n  }\n\n  reset() {\n    this.value = this.defaultValue;\n  }\n\n  restoreState(obj: unknown) {\n    if (typeof obj !== 'number' || !Number.isFinite(obj) || obj === 0) {\n      this.value = this.defaultValue;\n    } else {\n      this.value = obj;\n    }\n  }\n\n  setValueAbsolute(value: number, sourceCanonicalVoxelPhysicalSize: number) {\n    if (value > 0) {\n      const {canonicalVoxelPhysicalSize} = this.displayDimensionRenderInfo.value;\n      value = value * (sourceCanonicalVoxelPhysicalSize / canonicalVoxelPhysicalSize);\n    }\n    this.value = value;\n  }\n\n  assign(other: TrackableDepthRange) {\n    this.setValueAbsolute(other.value, other.canonicalVoxelPhysicalSize);\n  }\n}\n\nexport class LinkedDepthRange extends SimpleLinkedBase<TrackableDepthRange> {\n  constructor(\n      peer: Owned<TrackableDepthRange>,\n      displayDimensionRenderInfo: WatchableValueInterface<DisplayDimensionRenderInfo>) {\n    super(peer);\n    this.value = makeSimpleLinked(\n        new TrackableDepthRange(peer.defaultValue, displayDimensionRenderInfo), this.peer,\n        this.link, {\n          assign: (target, source) => target.assign(source),\n          isValid: () => true,\n        });\n  }\n}\n\nexport class NavigationState<Zoom extends TrackableZoomInterface = TrackableZoomInterface> extends\n    RefCounted {\n  changed = new NullarySignal();\n\n  constructor(\n      public pose: Owned<DisplayPose>, public zoomFactor: Owned<Zoom>,\n      public depthRange: Owned<TrackableDepthRange>) {\n    super();\n    this.registerDisposer(pose);\n    this.registerDisposer(zoomFactor);\n    this.registerDisposer(depthRange);\n    this.registerDisposer(this.pose.changed.add(this.changed.dispatch));\n    this.registerDisposer(this.zoomFactor.changed.add(this.changed.dispatch));\n    this.registerDisposer(this.depthRange.changed.add(this.changed.dispatch));\n  }\n  get coordinateSpace() {\n    return this.pose.position.coordinateSpace;\n  }\n\n  /**\n   * Resets everything.\n   */\n  reset() {\n    this.pose.reset();\n    this.zoomFactor.reset();\n  }\n\n  get position() {\n    return this.pose.position;\n  }\n  get displayDimensions() {\n    return this.pose.displayDimensions;\n  }\n  get relativeDisplayScales() {\n    return this.pose.relativeDisplayScales;\n  }\n  get displayDimensionRenderInfo() {\n    return this.pose.displayDimensionRenderInfo;\n  }\n  toMat4(mat: mat4) {\n    this.pose.toMat4(mat, this.zoomFactor.value);\n  }\n  toMat3(mat: mat3) {\n    this.pose.toMat3(mat, this.zoomFactor.value);\n  }\n\n  get relativeDepthRange() {\n    let depthRange = this.depthRange.value;\n    if (depthRange > 0) {\n      depthRange /= this.zoomFactor.value;\n    } else {\n      depthRange *= -1;\n    }\n    return depthRange;\n  }\n\n  get valid() {\n    return this.pose.valid && !Number.isNaN(this.zoomFactor.value);\n  }\n\n  zoomBy(factor: number) {\n    this.zoomFactor.value *= factor;\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function removeChildren(element: HTMLElement) {\n  while (true) {\n    let child = element.firstChild;\n    if (!child) {\n      break;\n    }\n    element.removeChild(child);\n  }\n}\n\nexport function removeFromParent(element: HTMLElement) {\n  let {parentElement} = element;\n  if (parentElement) {\n    parentElement.removeChild(element);\n    return true;\n  }\n  return false;\n}\n\nexport function updateInputFieldWidth(\n    element: HTMLInputElement, length = Math.max(1, element.value.length)) {\n  const newWidth = `${length}ch`;\n  if (element.style.width !== newWidth) {\n    // Force additional reflow to work around Chrome bug.\n    element.style.width = '0px';\n    element.offsetWidth;\n    element.style.width = newWidth;\n  }\n}\n\nexport function updateChildren(element: HTMLElement, children: Iterable<HTMLElement>) {\n  let nextChild = element.firstElementChild;\n  for (const child of children) {\n    if (child !== nextChild) {\n      element.insertBefore(child, nextChild);\n    }\n    nextChild = child.nextElementSibling;\n  }\n  while (nextChild !== null) {\n    let next = nextChild.nextElementSibling;\n    element.removeChild(nextChild);\n    nextChild = next;\n  }\n}\n\nexport function isInputTextTarget(target: EventTarget|null) {\n  if (!(target instanceof HTMLElement)) return false;\n  if ((target instanceof HTMLInputElement) || (target instanceof HTMLTextAreaElement) ||\n      target.isContentEditable) {\n    return true;\n  }\n  return false;\n}\n\nexport function measureElementClone(element: HTMLElement) {\n  const clone = element.cloneNode(/*deep=*/true) as HTMLElement;\n  clone.style.position = 'absolute';\n  document.body.appendChild(clone);\n  return clone.getBoundingClientRect();\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {WatchableValue} from 'neuroglancer/trackable_value';\nimport {RPC} from 'neuroglancer/worker_rpc';\nimport {SharedObject} from 'neuroglancer/worker_rpc';\n\n/**\n * Numeric value specifying a visibility or prefetch priority.\n *\n * A value of `Number.POSITIVE_INFINITY` means visible.\n *\n * Any other finite value means not visible, and specifies the prefetch priority (higher means\n * higher priority); this should always be a small integer.\n *\n * A value of `Number.NEGATIVE_INFINITY` means ignored (not visible, and not prefetched).\n */\nexport type VisibilityPriority = number;\n\nexport class WatchableVisibilityPriority extends WatchableValue<VisibilityPriority> {\n  constructor(value = Number.NEGATIVE_INFINITY) {\n    super(value);\n  }\n\n  static VISIBLE = Number.POSITIVE_INFINITY;\n  static IGNORED = Number.NEGATIVE_INFINITY;\n  get visible() {\n    return this.value === Number.POSITIVE_INFINITY;\n  }\n\n  get ignored() {\n    return this.value === Number.NEGATIVE_INFINITY;\n  }\n}\n\nexport interface VisibilityPrioritySpecification { visibility: WatchableVisibilityPriority; }\n\n/**\n * Maintains the maximum value of multiple WatchableVisibilityPriority values.\n */\nexport class VisibilityPriorityAggregator extends WatchableVisibilityPriority {\n  private contributors = new Map<() => void, WatchableVisibilityPriority>();\n\n  /**\n   * Registers `x` to be included in the set of values to be aggregated.\n   *\n   * @returns A disposer function that unregisters the specified value.\n   */\n  add(x: WatchableVisibilityPriority) {\n    const {contributors} = this;\n    const changedDisposer = x.changed.add(() => {\n      this.update();\n    });\n    const disposer = () => {\n      contributors.delete(disposer);\n      changedDisposer();\n      this.update();\n    };\n    contributors.set(disposer, x);\n    this.update();\n    return disposer;\n  }\n\n  private update() {\n    let priority = Number.NEGATIVE_INFINITY;\n    for (const x of this.contributors.values()) {\n      priority = Math.max(priority, x.value);\n    }\n    this.value = priority;\n  }\n}\n\n/**\n * Mixin that adds a `visibility` property which is shared with the counterpart.\n */\nexport function withSharedVisibility<T extends{new (...args: any[]): SharedObject}>(Base: T) {\n  return class extends Base {\n    visibility = new VisibilityPriorityAggregator();\n\n    initializeCounterpart(rpc: RPC, options: any = {}) {\n      // Backend doesn't need to own a reference to SharedWatchableValue because frontend, which is\n      // the owner of this SharedObject, owns a reference.\n      options['visibility'] =\n          this.registerDisposer(SharedWatchableValue.makeFromExisting(rpc, this.visibility)).rpcId;\n      super.initializeCounterpart(rpc, options);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {animationFrameDebounce} from 'neuroglancer/util/animation_frame_debounce';\nimport {RefCounted} from 'neuroglancer/util/disposable';\nimport {removeChildren} from 'neuroglancer/util/dom';\nimport {WatchableVisibilityPriority} from 'neuroglancer/visibility_priority/frontend';\n\nexport class DependentViewContext extends RefCounted {\n  constructor(public redraw: () => void) {\n    super();\n  }\n}\n\nexport class DependentViewWidget<T> extends RefCounted {\n  element = document.createElement('div');\n\n  private generation = -1;\n  private currentViewDisposer: RefCounted|undefined = undefined;\n  private debouncedUpdateView =\n      this.registerCancellable(animationFrameDebounce(() => this.updateView()));\n\n  constructor(\n      public model: WatchableValueInterface<T>,\n      public render: (value: T, parent: HTMLElement, context: DependentViewContext) => void,\n      public visibility = new WatchableVisibilityPriority(WatchableVisibilityPriority.VISIBLE)) {\n    super();\n    this.element.style.display = 'contents';\n    this.registerDisposer(model.changed.add(this.debouncedUpdateView));\n    this.registerDisposer(visibility.changed.add(() => {\n      if (this.visible) this.debouncedUpdateView();\n    }));\n    this.updateView();\n  }\n\n  get visible() {\n    return this.visibility.visible;\n  }\n\n  private updateView() {\n    if (!this.visible) return;\n    const {model} = this;\n    const generation = model.changed.count;\n    if (generation === this.generation) return;\n    this.disposeCurrentView();\n    const currentViewDisposer = this.currentViewDisposer =\n        new DependentViewContext(this.debouncedUpdateView);\n    this.render(model.value, this.element, currentViewDisposer);\n  }\n\n  private disposeCurrentView() {\n    let {currentViewDisposer} = this;\n    if (currentViewDisposer !== undefined) {\n      currentViewDisposer.dispose();\n    }\n    removeChildren(this.element);\n  }\n\n  disposed() {\n    this.disposeCurrentView();\n    super.disposed();\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Tabbed view widget.\n */\n\nimport 'neuroglancer/widget/tab_view.css';\n\nimport {WatchableValueChangeInterface, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {animationFrameDebounce} from 'neuroglancer/util/animation_frame_debounce';\nimport {Owned, RefCounted} from 'neuroglancer/util/disposable';\nimport {removeChildren, removeFromParent} from 'neuroglancer/util/dom';\nimport {NullarySignal, Signal} from 'neuroglancer/util/signal';\nimport {Trackable} from 'neuroglancer/util/trackable';\nimport {WatchableVisibilityPriority} from 'neuroglancer/visibility_priority/frontend';\n\nexport class Tab extends RefCounted {\n  element = document.createElement('div');\n\n  get visible() {\n    return this.visibility.visible;\n  }\n\n  constructor(\n      public visibility = new WatchableVisibilityPriority(WatchableVisibilityPriority.VISIBLE)) {\n    super();\n    const {element} = this;\n    element.classList.add('neuroglancer-tab-content');\n  }\n\n  disposed() {\n    removeFromParent(this.element);\n    super.disposed();\n  }\n}\n\nexport class OptionSpecification<T> extends RefCounted implements Trackable {\n  changed = new NullarySignal();\n  options = new Map<string, T>();\n  optionsChanged = new NullarySignal();\n\n  private selectedValue: string|undefined = undefined;\n  private defaultValue: string|undefined = undefined;\n\n  get value() {\n    const {selectedValue} = this;\n    if (selectedValue !== undefined) {\n      return selectedValue;\n    }\n    return this.defaultValue;\n  }\n\n  set default(value: string|undefined) {\n    if (this.defaultValue !== value) {\n      this.defaultValue = value;\n      this.changed.dispatch();\n    }\n  }\n\n  get default() {\n    return this.defaultValue;\n  }\n\n  set value(value: string|undefined) {\n    if (value !== undefined && this.ready_ && !this.options.has(value)) {\n      value = undefined;\n    }\n    const {selectedValue} = this;\n    if (selectedValue !== value) {\n      this.selectedValue = value;\n      this.changed.dispatch();\n    }\n  }\n\n  get validValue() {\n    const value = this.selectedValue;\n    if (value === undefined || !this.options.has(value)) {\n      return this.defaultValue;\n    }\n    return value;\n  }\n\n  add(id: string, value: T) {\n    const {options} = this;\n    if (options.has(id)) {\n      throw new Error(`Option already defined: ${JSON.stringify(id)}.`);\n    }\n    options.set(id, value);\n    this.optionsChanged.dispatch();\n    if (this.defaultValue === undefined) {\n      this.default = id;\n    }\n  }\n\n  remove(id: string) {\n    const {options} = this;\n    if (!options.has(id)) {\n      throw new Error(`Option is not defined: ${JSON.stringify(id)}.`);\n    }\n    options.delete(id);\n    this.optionsChanged.dispatch();\n  }\n\n  toJSON() {\n    const {value, defaultValue} = this;\n    if (value === defaultValue) {\n      return undefined;\n    }\n    return value;\n  }\n\n  reset() {\n    this.value = undefined;\n  }\n\n  ready_ = true;\n\n  /**\n   * When `ready` is `false`, the selected `value` may be set to an unknown option.\n   */\n  get ready() {\n    return this.ready_;\n  }\n\n  set ready(value: boolean) {\n    if (value !== this.ready_) {\n      this.ready_ = value;\n      if (value) {\n        this.value = this.value;\n      }\n      this.changed.dispatch();\n    }\n  }\n\n  restoreState(obj: any) {\n    if (typeof obj !== 'string') {\n      obj = undefined;\n    }\n    this.value = obj;\n  }\n}\n\nexport class StackView<TabId, TabType extends Tab = Tab> extends RefCounted {\n  element = document.createElement('div');\n  tabs = new Map<TabId, Owned<TabType>>();\n  tabVisibilityChanged = new Signal<(id: TabId, visible: boolean) => void>();\n\n  private displayedTab: TabId|undefined;\n\n  get visible() {\n    return this.visibility.visible;\n  }\n\n  private debouncedUpdateSelectedTab =\n      this.registerCancellable(animationFrameDebounce(() => this.updateSelectedTab()));\n\n  flush() {\n    this.debouncedUpdateSelectedTab.flush();\n  }\n\n  constructor(\n      public getter: (id: TabId) => Owned<TabType>,\n      public selected: WatchableValueInterface<TabId|undefined>,\n      public visibility = new WatchableVisibilityPriority(WatchableVisibilityPriority.VISIBLE),\n      public invalidateByDefault = false) {\n    super();\n\n    const {element} = this;\n    element.className = 'neuroglancer-stack-view';\n    this.registerDisposer(visibility.changed.add(this.debouncedUpdateSelectedTab));\n    this.registerDisposer(selected.changed.add(this.debouncedUpdateSelectedTab));\n    this.updateSelectedTab();\n  }\n\n  invalidate(id: TabId) {\n    const {tabs} = this;\n    const tab = tabs.get(id);\n    if (tab === undefined) {\n      return;\n    }\n    tab.dispose();\n    tabs.delete(id);\n    if (id === this.displayedTab) {\n      this.displayedTab = undefined;\n      this.debouncedUpdateSelectedTab();\n    }\n  }\n\n  private hideTab(id: TabId) {\n    const tab = this.tabs.get(id);\n    if (tab !== undefined) {\n      tab.visibility.value = WatchableVisibilityPriority.IGNORED;\n      tab.element.style.display = 'none';\n    }\n    this.tabVisibilityChanged.dispatch(id, false);\n  }\n\n  private showTab(id: TabId) {\n    const {tabs} = this;\n    let tab = tabs.get(id);\n    if (tab === undefined) {\n      tab = this.getter(id);\n      this.element.appendChild(tab.element);\n      tabs.set(id, tab);\n    }\n    tab.element.style.display = '';\n    tab.visibility.value = WatchableVisibilityPriority.VISIBLE;\n    this.tabVisibilityChanged.dispatch(id, true);\n  }\n\n  private updateSelectedTab() {\n    const {displayedTab} = this;\n    const newTab = this.visible ? this.selected.value : undefined;\n    if (newTab === displayedTab && (newTab === undefined || this.tabs.has(newTab))) {\n      return;\n    }\n    if (displayedTab !== undefined) {\n      this.hideTab(displayedTab);\n    }\n    if (this.invalidateByDefault) {\n      this.invalidateAll();\n    }\n    this.displayedTab = newTab;\n    if (newTab === undefined) {\n      return;\n    }\n    this.showTab(newTab);\n  }\n\n  invalidateAll(predicate: ((id: TabId) => boolean) | undefined = undefined) {\n    const {tabs} = this;\n    for (const [id, tab] of tabs) {\n      if (predicate !== undefined && predicate(id)) continue;\n      tabs.delete(id);\n      tab.dispose();\n    }\n    this.debouncedUpdateSelectedTab();\n  }\n\n  disposed() {\n    this.invalidateAll();\n    removeFromParent(this.element);\n    super.disposed();\n  }\n}\n\nexport class TabSpecification extends\n    OptionSpecification<{label: string, order?: number, getter: () => Owned<Tab>, hidden?: WatchableValueInterface<boolean>}> {}\n\nfunction updateTabLabelVisibilityStyle(labelElement: HTMLElement, visible: boolean) {\n  const className = 'neuroglancer-selected-tab-label';\n  if (visible) {\n    labelElement.classList.add(className);\n  } else {\n    labelElement.classList.remove(className);\n  }\n}\n\nexport interface TabViewOptions {\n  makeTab: (id: string) => Tab;\n  selectedTab: WatchableValueInterface<string|undefined>;\n  tabs: WatchableValueChangeInterface<{id: string, label: string, hidden: boolean}[]>;\n  handleTabElement?: (id: string, element: HTMLElement) => void;\n}\n\nexport class TabView extends RefCounted {\n  element = document.createElement('div');\n  tabBar = document.createElement('div');\n\n  tabs: WatchableValueChangeInterface<{id: string, label: string, hidden: boolean}[]>;\n  selectedTab: WatchableValueInterface<string|undefined>;\n  private handleTabElement: ((id: string, element: HTMLElement) => void)|undefined;\n\n  private stack: StackView<string>;\n  private tabLabels = new Map<string, HTMLElement>();\n  private tabsGeneration = -1;\n\n  get visible() {\n    return this.visibility.visible;\n  }\n\n  private debouncedUpdateView =\n      this.registerCancellable(animationFrameDebounce(() => this.updateTabs()));\n\n  constructor(\n      options: TabViewOptions,\n      public visibility = new WatchableVisibilityPriority(WatchableVisibilityPriority.VISIBLE)) {\n    super();\n    this.tabs = options.tabs;\n    this.selectedTab = options.selectedTab;\n    this.handleTabElement = options.handleTabElement;\n    const {element, tabBar} = this;\n    element.className = 'neuroglancer-tab-view';\n    tabBar.className = 'neuroglancer-tab-view-bar';\n    element.appendChild(tabBar);\n    this.registerDisposer(visibility.changed.add(this.debouncedUpdateView));\n    const stack = this.stack = this.registerDisposer(new StackView<string>(\n        options.makeTab, options.selectedTab, this.visibility));\n    element.appendChild(stack.element);\n    this.registerDisposer(options.tabs.changed.add(this.debouncedUpdateView));\n    let prevSelectedId = this.selectedTab.value;\n    this.registerDisposer(options.selectedTab.changed.add(() => {\n      const tabs = this.tabs.value;\n      const prevSelectedTab = tabs.find(({id}) => id === prevSelectedId);\n      if (prevSelectedTab?.hidden) {\n        // hide hidden tab label when it is deselected\n        this.tabs.changed.count++;\n        this.debouncedUpdateView();\n      } else {\n        this.updateTabLabelStyles();\n      }\n      prevSelectedId = this.selectedTab.value;\n    }));\n    this.updateTabs();\n  }\n\n  private updateTabLabelStyles() {\n    const selectedId = this.selectedTab.value;\n    for (const [id, element] of this.tabLabels) {\n      updateTabLabelVisibilityStyle(element, id === selectedId);\n    }\n  }\n\n  private updateTabs() {\n    if (this.tabsGeneration !== this.tabs.changed.count) {\n      this.destroyTabs();\n      if (this.visible) {\n        this.makeTabs();\n      }\n    }\n  }\n\n  private destroyTabs() {\n    if (this.tabsGeneration === -1) {\n      return;\n    }\n    this.tabLabels.clear();\n    if (!this.visible) {\n      this.stack.invalidateAll();\n    } else {\n      const tabs = this.tabs.value;\n      this.stack.invalidateAll(existingId => tabs.find(({id}) => id === existingId) !== undefined);\n    }\n    removeChildren(this.tabBar);\n    this.tabsGeneration = -1;\n  }\n\n  private makeTabs() {\n    const {tabBar, tabLabels, handleTabElement} = this;\n    for (const {id, label, hidden} of this.tabs.value) {\n      if (hidden && id !== this.selectedTab.value) continue;\n      const labelElement = document.createElement('div');\n      labelElement.classList.add('neuroglancer-tab-label');\n      labelElement.textContent = label;\n      labelElement.addEventListener('click', () => {\n        this.selectedTab.value = id;\n      });\n      if (handleTabElement !== undefined) {\n        handleTabElement(id, labelElement);\n      }\n      tabLabels.set(id, labelElement);\n      tabBar.appendChild(labelElement);\n    }\n    this.updateTabLabelStyles();\n    this.tabsGeneration = this.tabs.changed.count;\n  }\n\n  disposed() {\n    removeChildren(this.tabBar);\n    this.tabLabels.clear();\n    removeFromParent(this.element);\n    super.disposed();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VisibleSegmentsState} from 'neuroglancer/segmentation_display_state/base';\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {Disposer, Owned, RefCounted} from 'neuroglancer/util/disposable';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {RenderLayer } from 'neuroglancer/renderlayer';\nimport { ChunkManager } from 'neuroglancer/chunk_manager/frontend';\nimport { SegmentationDisplayState3D } from 'neuroglancer/segmentation_display_state/frontend';\nimport { SegmentationUserLayer } from 'neuroglancer/segmentation_user_layer';\nimport { DependentViewContext, DependentViewWidget } from 'neuroglancer/widget/dependent_view_widget';\nimport { Tab } from 'neuroglancer/widget/tab_view';\n\nexport enum VisibleSegmentEquivalencePolicy {\n  MIN_REPRESENTATIVE = 0, // defafult, representative elmement is the minimum element in equivalence set\n  MAX_REPRESENTATIVE = 1, // representative elmement is the maximum element in equivalence set\n  REPRESENTATIVE_EXCLUDED = 1 << 1, // filter out the representative element when iterating over visible segments\n  NONREPRESENTATIVE_EXCLUDED = 1 << 2, // filter out non representative elements when iterating over visible segments\n}\n\nexport class SegmentationGraphSourceTab extends Tab {\n  constructor(public layer: SegmentationUserLayer) {\n    super();\n    const {element} = this;\n    element.appendChild(\n      this.registerDisposer(new DependentViewWidget(\n                                layer.displayState.segmentationGroupState.value.graph,\n                                (graph, parent, context) => {\n                                  if (graph?.tabContents) {\n                                    parent.appendChild(graph.tabContents(layer, context, this));\n                                  }\n                                }))\n        .element);\n\n  }\n}\n\nexport abstract class SegmentationGraphSource {\n  abstract connect(layer: SegmentationUserLayer): Owned<SegmentationGraphSourceConnection>;\n  abstract merge(a: Uint64, b: Uint64): Promise<Uint64>;\n  abstract split(include: Uint64, exclude: Uint64): Promise<{include: Uint64, exclude: Uint64}>;\n  abstract trackSegment(id: Uint64, callback: (id: Uint64|null) => void): () => void;\n  abstract get visibleSegmentEquivalencePolicy(): VisibleSegmentEquivalencePolicy;\n  tabContents?(layer: SegmentationUserLayer, context: DependentViewContext, tab: SegmentationGraphSourceTab): HTMLDivElement;\n}\n\nexport interface ComputedSplit {\n  // New representative id of retained segment.  May be fake.\n  includeRepresentative: Uint64;\n  // Base segment ids in retained segment.\n  includeBaseSegments: Uint64[];\n  // New representative id of split-off segment.  May be fake.\n  excludeRepresentative: Uint64;\n  // Base segments in split-off segment.\n  excludeBaseSegments: Uint64[];\n}\n\nexport abstract class SegmentationGraphSourceConnection<\n    SourceType extends SegmentationGraphSource = SegmentationGraphSource> extends RefCounted {\n  constructor(public graph: SourceType, public segmentsState: VisibleSegmentsState) {\n    super();\n  }\n  abstract computeSplit(include: Uint64, exclude: Uint64): ComputedSplit|undefined;\n\n  createRenderLayers(\n      chunkManager: ChunkManager,\n      displayState: SegmentationDisplayState3D,\n      localPosition: WatchableValueInterface<Float32Array>): RenderLayer[] {\n    chunkManager;\n    displayState;\n    localPosition;\n    return [];\n  };\n}\n\nexport function trackWatchableValueSegment(\n    graph: SegmentationGraphSource,\n    watchable: WatchableValueInterface<Uint64|undefined>): Disposer {\n  let lastId: Uint64|null|undefined;\n  let watchDisposer: undefined|(() => void) = undefined;\n  const handleLocalChange = () => {\n    const {value} = watchable;\n    if (value === undefined) {\n      if (watchDisposer !== undefined) {\n        watchDisposer();\n        watchDisposer = undefined;\n        lastId = undefined;\n      }\n      return;\n    }\n    if (lastId != null && Uint64.equal(lastId, value)) {\n      return;\n    }\n    if (watchDisposer !== undefined) {\n      watchDisposer();\n      watchDisposer = undefined;\n      lastId = undefined;\n    }\n    watchDisposer = graph.trackSegment(value, newId => {\n      lastId = newId;\n      watchable.value = newId ?? undefined;\n    });\n  };\n  handleLocalChange();\n  const signalDisposer = watchable.changed.add(handleLocalChange);\n  const disposer = () => {\n    signalDisposer();\n    if (watchDisposer !== undefined) {\n      watchDisposer();\n      watchDisposer = undefined;\n    }\n  };\n  return disposer;\n}\n\n// Returns `true` if `segmentId` is a base segment id, rather than a segment id added to the graph.\nexport function isBaseSegmentId(segmentId: Uint64) {\n  return (segmentId.high >>> 31) ? false : true;\n}\n\nexport const UNKNOWN_NEW_SEGMENT_ID = new Uint64(0xffffffff, 0xffffffff);\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WatchableValue, WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {VisibleSegmentEquivalencePolicy} from 'neuroglancer/segmentation_graph/source';\n\nconst rankSymbol = Symbol('disjoint_sets:rank');\nconst parentSymbol = Symbol('disjoint_sets:parent');\nconst nextSymbol = Symbol('disjoint_sets:next');\nconst prevSymbol = Symbol('disjoint_sets:prev');\n\nfunction findRepresentative(v: any): any {\n  // First pass: find the root, which will be stored in ancestor.\n  let old = v;\n  let ancestor = v[parentSymbol];\n  while (ancestor !== v) {\n    v = ancestor;\n    ancestor = v[parentSymbol];\n  }\n  // Second pass: set all of the parent pointers along the path from the\n  // original element `old' to refer directly to the root `ancestor'.\n  v = old[parentSymbol];\n  while (ancestor !== v) {\n    old[parentSymbol] = ancestor;\n    old = v;\n    v = old[parentSymbol];\n  }\n  return ancestor;\n}\n\nfunction linkUnequalSetRepresentatives(i: any, j: any): any {\n  let iRank = i[rankSymbol];\n  let jRank = j[rankSymbol];\n  if (iRank > jRank) {\n    j[parentSymbol] = i;\n    return i;\n  }\n\n  i[parentSymbol] = j;\n  if (iRank === jRank) {\n    j[rankSymbol] = jRank + 1;\n  }\n  return j;\n}\n\nfunction spliceCircularLists(i: any, j: any) {\n  let iPrev = i[prevSymbol];\n  let jPrev = j[prevSymbol];\n\n  // Connect end of i to beginning of j.\n  j[prevSymbol] = iPrev;\n  iPrev[nextSymbol] = j;\n\n  // Connect end of j to beginning of i.\n  i[prevSymbol] = jPrev;\n  jPrev[nextSymbol] = i;\n}\n\n\n\nfunction* setElementIterator(i: any) {\n  let j = i;\n  do {\n    yield j;\n    j = j[nextSymbol];\n  } while (j !== i);\n}\n\nfunction initializeElement(v: any) {\n  v[parentSymbol] = v;\n  v[rankSymbol] = 0;\n  v[nextSymbol] = v[prevSymbol] = v;\n}\n\nconst minSymbol = Symbol('disjoint_sets:min');\n\nfunction isRootElement(v: any) {\n  return v[parentSymbol] === v;\n}\n\n/**\n * Represents a collection of disjoint sets of Uint64 values.\n *\n * Supports merging sets, retrieving the minimum Uint64 value contained in a set (the representative\n * value), and iterating over the elements contained in a set.\n */\nexport class DisjointUint64Sets {\n  private map = new Map<string, Uint64>();\n  visibleSegmentEquivalencePolicy: WatchableValueInterface<VisibleSegmentEquivalencePolicy> = new WatchableValue<VisibleSegmentEquivalencePolicy>(VisibleSegmentEquivalencePolicy.MIN_REPRESENTATIVE);\n  generation = 0;\n\n  has(x: Uint64): boolean {\n    let key = x.toString();\n    let element = this.map.get(key);\n    return element !== undefined;\n  }\n\n  get(x: Uint64): Uint64 {\n    let key = x.toString();\n    let element = this.map.get(key);\n    if (element === undefined) {\n      return x;\n    }\n    return findRepresentative(element)[minSymbol];\n  }\n\n  isMinElement(x: Uint64) {\n    let y = this.get(x);\n    return (y === x || Uint64.equal(y, x));\n  }\n\n  private makeSet(x: Uint64): Uint64 {\n    let key = x.toString();\n    let {map} = this;\n    let element = map.get(key);\n    if (element === undefined) {\n      element = x.clone();\n      initializeElement(element);\n      (<any>element)[minSymbol] = element;\n      map.set(key, element);\n      return element;\n    }\n    return findRepresentative(element);\n  }\n\n  /**\n   * Union the sets containing `a` and `b`.\n   * @returns `false` if `a` and `b` are already in the same set, otherwise `true`.\n   */\n  link(a: Uint64, b: Uint64): boolean {\n    a = this.makeSet(a);\n    b = this.makeSet(b);\n    if (a === b) {\n      return false;\n    }\n    this.generation++;\n    let newNode = linkUnequalSetRepresentatives(a, b);\n    spliceCircularLists(a, b);\n    let aMin = (<any>a)[minSymbol];\n    let bMin = (<any>b)[minSymbol];\n    const isMax = (this.visibleSegmentEquivalencePolicy.value & VisibleSegmentEquivalencePolicy.MAX_REPRESENTATIVE) !== 0;\n    newNode[minSymbol] = Uint64.less(aMin, bMin) === isMax ? bMin : aMin;\n    return true;\n  }\n\n  linkAll(ids: Uint64[]) {\n    for (let i = 1, length = ids.length; i < length; ++i) {\n      this.link(ids[0], ids[i]);\n    }\n  }\n\n  /**\n   * Unlinks all members of the specified set.\n   */\n  deleteSet(x: Uint64) {\n    const {map} = this;\n    let changed = false;\n    for (const y of this.setElements(x)) {\n      map.delete(y.toString());\n      changed = true;\n    }\n    if (changed) {\n      ++this.generation;\n    }\n    return changed;\n  }\n\n  * setElements(a: Uint64): IterableIterator<Uint64> {\n    let key = a.toString();\n    let element = this.map.get(key);\n    if (element === undefined) {\n      yield a;\n    } else {\n      yield* setElementIterator(element);\n    }\n  }\n\n  clear() {\n    let {map} = this;\n    if (map.size === 0) {\n      return false;\n    }\n    ++this.generation;\n    map.clear();\n    return true;\n  }\n\n  get size() {\n    return this.map.size;\n  }\n\n  * mappings(temp = <[Uint64, Uint64]>new Array<Uint64>(2)) {\n    for (let element of this.map.values()) {\n      temp[0] = element;\n      temp[1] = findRepresentative(element)[minSymbol];\n      yield temp;\n    }\n  }\n\n  * roots() {\n    for (let element of this.map.values()) {\n      if (isRootElement(element)) {\n        yield element;\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.mappings();\n  }\n\n  /**\n   * Returns an array of arrays of strings, where the arrays contained in the outer array correspond\n   * to the disjoint sets, and the strings are the base-10 string representations of the members of\n   * each set.  The members are sorted in numerical order, and the sets are sorted in numerical\n   * order of their smallest elements.\n   */\n  toJSON(): string[][] {\n    let sets = new Array<Uint64[]>();\n    for (let element of this.map.values()) {\n      if (isRootElement(element)) {\n        let members = new Array<Uint64>();\n        for (let member of setElementIterator(element)) {\n          members.push(member);\n        }\n        members.sort(Uint64.compare);\n        sets.push(members);\n      }\n    }\n    sets.sort((a, b) => Uint64.compare(a[0], b[0]));\n    return sets.map(set => set.map(element => element.toString()));\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {DisjointUint64Sets} from 'neuroglancer/util/disjoint_sets';\nimport {parseArray} from 'neuroglancer/util/json';\nimport {NullarySignal} from 'neuroglancer/util/signal';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\nimport {VisibleSegmentEquivalencePolicy} from 'neuroglancer/segmentation_graph/source';\n\nconst RPC_TYPE_ID = 'DisjointUint64Sets';\nconst ADD_METHOD_ID = 'DisjointUint64Sets.add';\nconst CLEAR_METHOD_ID = 'DisjointUint64Sets.clear';\nconst HIGH_BIT_REPRESENTATIVE_CHANGED_ID = 'DisjointUint64Sets.highBitRepresentativeChanged';\nconst DELETE_SET_METHOD_ID = 'DisjointUint64Sets.deleteSet';\n\n@registerSharedObject(RPC_TYPE_ID)\nexport class SharedDisjointUint64Sets extends SharedObjectCounterpart implements\n    WatchableValueInterface<SharedDisjointUint64Sets> {\n  disjointSets = new DisjointUint64Sets();\n  changed = new NullarySignal();\n\n  /**\n   * For compatibility with `WatchableValueInterface`.\n   */\n  get value() {\n    return this;\n  }\n\n  static makeWithCounterpart(rpc: RPC, highBitRepresentative: WatchableValueInterface<VisibleSegmentEquivalencePolicy>) {\n    let obj = new this();\n    obj.disjointSets.visibleSegmentEquivalencePolicy = highBitRepresentative;\n    obj.registerDisposer(highBitRepresentative.changed.add(() => {\n      updateHighBitRepresentative(obj);\n    }));\n    obj.initializeCounterpart(rpc);\n    if (highBitRepresentative.value) {\n      updateHighBitRepresentative(obj);\n    }\n    return obj;\n  }\n\n  disposed() {\n    this.disjointSets = <any>undefined;\n    this.changed = <any>undefined;\n    super.disposed();\n  }\n\n  link(a: Uint64, b: Uint64) {\n    if (this.disjointSets.link(a, b)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke(\n            ADD_METHOD_ID,\n            {'id': this.rpcId, 'al': a.low, 'ah': a.high, 'bl': b.low, 'bh': b.high});\n      }\n      this.changed.dispatch();\n      return true;\n    }\n    return false;\n  }\n\n  linkAll(ids: Uint64[]) {\n    for (let i = 1, length = ids.length; i < length; ++i) {\n      this.link(ids[0], ids[i]);\n    }\n  }\n\n  has(x: Uint64): boolean {\n    return this.disjointSets.has(x);\n  }\n\n  get(x: Uint64): Uint64 {\n    return this.disjointSets.get(x);\n  }\n\n  clear() {\n    if (this.disjointSets.clear()) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke(CLEAR_METHOD_ID, {'id': this.rpcId});\n      }\n      this.changed.dispatch();\n    }\n  }\n\n  setElements(a: Uint64) {\n    return this.disjointSets.setElements(a);\n  }\n\n  deleteSet(x: Uint64) {\n    if (this.disjointSets.deleteSet(x)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke(DELETE_SET_METHOD_ID, {'id': this.rpcId, 'l': x.low, 'h': x.high});\n      }\n      this.changed.dispatch();\n    }\n  }\n\n  get size() {\n    return this.disjointSets.size;\n  }\n\n  toJSON() {\n    return this.disjointSets.toJSON();\n  }\n\n  /**\n   * Restores the state from a JSON representation.\n   */\n  restoreState(obj: any) {\n    if (obj !== undefined) {\n      let ids = [new Uint64(), new Uint64()];\n      parseArray(obj, z => {\n        parseArray(z, (s, index) => {\n          ids[index % 2].parseString(String(s), 10);\n          if (index !== 0) {\n            this.link(ids[0], ids[1]);\n          }\n        });\n      });\n    }\n  }\n\n  assignFrom(other: SharedDisjointUint64Sets|DisjointUint64Sets) {\n    this.clear();\n    if (other instanceof SharedDisjointUint64Sets) {\n      other = other.disjointSets;\n    }\n    for (const [a, b] of other) {\n      this.link(a, b);\n    }\n  }\n}\n\nconst tempA = new Uint64();\nconst tempB = new Uint64();\n\nregisterRPC(ADD_METHOD_ID, function(x) {\n  let obj = <SharedDisjointUint64Sets>this.get(x['id']);\n  tempA.low = x['al'];\n  tempA.high = x['ah'];\n  tempB.low = x['bl'];\n  tempB.high = x['bh'];\n  if (obj.disjointSets.link(tempA, tempB)) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC(CLEAR_METHOD_ID, function(x) {\n  let obj = <SharedDisjointUint64Sets>this.get(x['id']);\n  if (obj.disjointSets.clear()) {\n    obj.changed.dispatch();\n  }\n});\n\nfunction updateHighBitRepresentative(obj: SharedDisjointUint64Sets) {\n  obj.rpc!.invoke(\n      HIGH_BIT_REPRESENTATIVE_CHANGED_ID,\n      {'id': obj.rpcId, 'value': obj.disjointSets.visibleSegmentEquivalencePolicy.value});\n}\n\nregisterRPC(HIGH_BIT_REPRESENTATIVE_CHANGED_ID, function(x) {\n  let obj = this.get(x['id']) as SharedDisjointUint64Sets;\n  obj.disjointSets.visibleSegmentEquivalencePolicy.value = x['value'];\n});\n\nregisterRPC(DELETE_SET_METHOD_ID, function(x) {\n  let obj = <SharedDisjointUint64Sets>this.get(x['id']);\n  tempA.low = x['l'];\n  tempA.high = x['h'];\n  if (obj.disjointSets.deleteSet(tempA)) {\n    obj.changed.dispatch();\n  }\n});\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst k1 = 0xcc9e2d51;\nconst k2 = 0x1b873593;\n\n// MurmurHash excluding the final mixing steps.\nexport function hashCombine(state: number, value: number) {\n  value >>>= 0;\n  state >>>= 0;\n\n  value = Math.imul(value, k1) >>> 0;\n  value = ((value << 15) | (value >>> 17)) >>> 0;\n  value = Math.imul(value, k2) >>> 0;\n  state = (state ^ value) >>> 0;\n  state = ((state << 13) | (state >>> 19)) >>> 0;\n  state = ((state * 5) + 0xe6546b64) >>> 0;\n  return state;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {hashCombine} from 'neuroglancer/gpu_hash/hash_function';\nimport {getRandomValues} from 'neuroglancer/util/random';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport const NUM_ALTERNATIVES = 3;\n\n// For 3 hash functions, a DEFAULT_LOAD_FACTOR of 0.8 reliably avoids\n// expensive rehashing caused by unresolvable collisions.\nconst DEFAULT_LOAD_FACTOR = 0.8;\n\nconst DEBUG = false;\n\n// Key that needs to be inserted.  Temporary variables used during insert.  These can safely be\n// global because control never leaves functions defined in this module while these are in use.\nlet pendingLow = 0, pendingHigh = 0, backupPendingLow = 0, backupPendingHigh = 0;\n\nexport abstract class HashTableBase {\n  loadFactor = DEFAULT_LOAD_FACTOR;\n  size = 0;\n  table: Uint32Array;\n  tableSize: number;\n  emptyLow = 4294967295;\n  emptyHigh = 4294967295;\n  maxRehashAttempts = 5;\n  maxAttempts = 5;\n  capacity: number;\n\n  /**\n   * Number of uint32 elements per entry in hash table.\n   */\n  entryStride: number;\n\n  generation = 0;\n\n  mungedEmptyKey = -1;\n\n  constructor(public hashSeeds = HashTableBase.generateHashSeeds(NUM_ALTERNATIVES)) {\n    // Minimum size must be greater than 2 * hashSeeds.length.  Otherwise, tableWithMungedEmptyKey\n    // may loop infinitely.\n    let initialSize = 8;\n    while (initialSize < 2 * hashSeeds.length) {\n      initialSize *= 2;\n    }\n    this.allocate(initialSize);\n  }\n\n  private updateHashFunctions(numHashes: number) {\n    this.hashSeeds = HashTableBase.generateHashSeeds(numHashes);\n    this.mungedEmptyKey = -1;\n  }\n\n  /**\n   * Invokes callback with a modified version of the hash table data array.\n   *\n   * Replaces all slots that appear to be valid entries for (emptyLow, emptyHigh), i.e. slots that\n   * contain (emptyLow, emptyHigh) and to which (emptyLow, emptyHigh) hashes, with (mungedEmptyKey,\n   * mungedEmptyKey).\n   *\n   * mungedEmptyKey is chosen to be a 32-bit value with the property that the 64-bit value\n   * (mungedEmptyKey, mungedEmptyKey) does not hash to any of the same slots as (emptyLow,\n   * emptyHigh).\n   *\n   * This allows the modified data array to be used for lookups without special casing the empty\n   * key.\n   */\n  tableWithMungedEmptyKey(callback: (table: Uint32Array) => void) {\n    const numHashes = this.hashSeeds.length;\n    const emptySlots = new Array<number>(numHashes);\n    for (let i = 0; i < numHashes; ++i) {\n      emptySlots[i] = this.getHash(i, this.emptyLow, this.emptyHigh);\n    }\n    let {mungedEmptyKey} = this;\n    if (mungedEmptyKey === -1) {\n      chooseMungedEmptyKey: while (true) {\n        mungedEmptyKey = (Math.random() * 0x1000000) >>> 0;\n        for (let i = 0; i < numHashes; ++i) {\n          let h = this.getHash(i, mungedEmptyKey, mungedEmptyKey);\n          for (let j = 0; j < numHashes; ++j) {\n            if (emptySlots[j] === h) {\n              continue chooseMungedEmptyKey;\n            }\n          }\n        }\n        this.mungedEmptyKey = mungedEmptyKey;\n        break;\n      }\n    }\n    let {table, emptyLow, emptyHigh} = this;\n    for (let i = 0; i < numHashes; ++i) {\n      let h = emptySlots[i];\n      if (table[h] === emptyLow && table[h + 1] === emptyHigh) {\n        table[h] = mungedEmptyKey;\n        table[h + 1] = mungedEmptyKey;\n      }\n    }\n    try {\n      callback(table);\n    } finally {\n      for (let i = 0; i < numHashes; ++i) {\n        let h = emptySlots[i];\n        if (table[h] === mungedEmptyKey && table[h + 1] === mungedEmptyKey) {\n          table[h] = emptyLow;\n          table[h + 1] = emptyHigh;\n        }\n      }\n    }\n  }\n\n  static generateHashSeeds(numAlternatives = NUM_ALTERNATIVES) {\n    return getRandomValues(new Uint32Array(numAlternatives));\n  }\n\n  getHash(hashIndex: number, low: number, high: number) {\n    let hash = this.hashSeeds[hashIndex];\n    hash = hashCombine(hash, low);\n    hash = hashCombine(hash, high);\n    return this.entryStride * (hash & (this.tableSize - 1));\n  }\n\n  /**\n   * Iterates over the Uint64 keys contained in the hash set.\n   *\n   * Creates a new Uint64 object at every iteration (otherwise spread and Array.from() fail)\n   */\n  * keys() {\n    let {emptyLow, emptyHigh, entryStride} = this;\n    let {table} = this;\n    for (let i = 0, length = table.length; i < length; i += entryStride) {\n      let low = table[i], high = table[i + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        yield new Uint64(low, high);\n      }\n    }\n  }\n\n  /**\n   * Iterates over the Uint64 keys contained in the hash set.\n   *\n   * The same temp value will be modified and yielded at every iteration.\n   */\n  * unsafeKeys(temp = new Uint64()) {\n    let {emptyLow, emptyHigh, entryStride} = this;\n    let {table} = this;\n    for (let i = 0, length = table.length; i < length; i += entryStride) {\n      let low = table[i], high = table[i + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        temp.low = low;\n        temp.high = high;\n        yield temp;\n      }\n    }\n  }\n\n  indexOfPair(low: number, high: number) {\n    let {table, emptyLow, emptyHigh} = this;\n    if (low === emptyLow && high === emptyHigh) {\n      return -1;\n    }\n    for (let i = 0, numHashes = this.hashSeeds.length; i < numHashes; ++i) {\n      let h = this.getHash(i, low, high);\n      if (table[h] === low && table[h + 1] === high) {\n        return h;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the offset into the hash table of the specified element, or -1 if the element is not\n   * present.\n   */\n  indexOf(x: Uint64) {\n    return this.indexOfPair(x.low, x.high);\n  }\n\n  /**\n   * Changes the empty key to a value that is not equal to the current empty key and is not present\n   * in the table.\n   *\n   * This is called when an attempt is made to insert the empty key.\n   */\n  private chooseAnotherEmptyKey() {\n    let {emptyLow, emptyHigh, table, entryStride} = this;\n    let newLow: number, newHigh: number;\n    while (true) {\n      newLow = (Math.random() * 0x100000000) >>> 0;\n      newHigh = (Math.random() * 0x100000000) >>> 0;\n      if (newLow === emptyLow && newHigh === emptyHigh) {\n        continue;\n      }\n      if (this.hasPair(newLow, newHigh)) {\n        continue;\n      }\n      break;\n    }\n\n    this.emptyLow = newLow;\n    this.emptyHigh = newHigh;\n\n    // Replace empty keys in the table.\n    for (let h = 0, length = table.length; h < length; h += entryStride) {\n      if (table[h] === emptyLow && table[h + 1] === emptyHigh) {\n        table[h] = newLow;\n        table[h + 1] = newHigh;\n      }\n    }\n  }\n\n  /**\n   * Returns true iff the specified element is present.\n   */\n  has(x: Uint64) {\n    return this.indexOf(x) !== -1;\n  }\n\n  /**\n   * Returns true iff the specified element is present.\n   */\n  hasPair(low: number, high: number) {\n    return this.indexOfPair(low, high) !== -1;\n  }\n\n  delete(x: Uint64) {\n    let index = this.indexOf(x);\n    if (index !== -1) {\n      let {table} = this;\n      table[index] = this.emptyLow;\n      table[index + 1] = this.emptyHigh;\n      ++this.generation;\n      this.size--;\n      return true;\n    }\n    return false;\n  }\n\n  private clearTable() {\n    let {table, entryStride, emptyLow, emptyHigh} = this;\n    let length = table.length;\n\n    for (let h = 0; h < length; h += entryStride) {\n      table[h] = emptyLow;\n      table[h + 1] = emptyHigh;\n    }\n  }\n\n  clear() {\n    if (this.size === 0) {\n      return false;\n    }\n    this.size = 0;\n    ++this.generation;\n    this.clearTable();\n    return true;\n  }\n\n  reserve(x: number) {\n    if (x > this.capacity) {\n      this.backupPending();\n      this.grow(x);\n      this.restorePending();\n      return true;\n    }\n    return false;\n  }\n\n  protected swapPending(table: Uint32Array, offset: number) {\n    let tempLow = pendingLow, tempHigh = pendingHigh;\n    this.storePending(table, offset);\n    table[offset] = tempLow;\n    table[offset + 1] = tempHigh;\n  }\n\n  protected storePending(table: Uint32Array, offset: number) {\n    pendingLow = table[offset];\n    pendingHigh = table[offset + 1];\n  }\n\n  protected backupPending() {\n    backupPendingLow = pendingLow;\n    backupPendingHigh = pendingHigh;\n  }\n\n  protected restorePending() {\n    pendingLow = backupPendingLow;\n    pendingHigh = backupPendingHigh;\n  }\n\n  private tryToInsert() {\n    if (DEBUG) {\n      console.log(`tryToInsert: ${pendingLow}, ${pendingHigh}`);\n    }\n    let attempt = 0;\n    let {emptyLow, emptyHigh, maxAttempts, table} = this;\n    let numHashes = this.hashSeeds.length;\n\n    let tableIndex = Math.floor(Math.random() * numHashes);\n    while (true) {\n      let h = this.getHash(tableIndex, pendingLow, pendingHigh);\n      this.swapPending(table, h);\n      if (pendingLow === emptyLow && pendingHigh === emptyHigh) {\n        return true;\n      }\n      if (++attempt === maxAttempts) {\n        break;\n      }\n      tableIndex = (tableIndex + Math.floor(Math.random() * (numHashes - 1)) + 1) % numHashes;\n    }\n    return false;\n  }\n\n  private allocate(tableSize: number) {\n    this.tableSize = tableSize;\n    let {entryStride} = this;\n    this.table = new Uint32Array(tableSize * entryStride);\n    this.maxAttempts = tableSize;\n    this.clearTable();\n    this.capacity = tableSize * this.loadFactor;\n    this.mungedEmptyKey = -1;\n  }\n\n  private rehash(oldTable: Uint32Array, tableSize: number) {\n    if (DEBUG) {\n      console.log('rehash begin');\n    }\n    this.allocate(tableSize);\n    this.updateHashFunctions(this.hashSeeds.length);\n    let {emptyLow, emptyHigh, entryStride} = this;\n    for (let h = 0, length = oldTable.length; h < length; h += entryStride) {\n      let low = oldTable[h], high = oldTable[h + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        this.storePending(oldTable, h);\n        if (!this.tryToInsert()) {\n          if (DEBUG) {\n            console.log('rehash failed');\n          }\n          return false;\n        }\n      }\n    }\n    if (DEBUG) {\n      console.log('rehash end');\n    }\n    return true;\n  }\n\n  private grow(desiredTableSize: number) {\n    if (DEBUG) {\n      console.log(`grow: ${desiredTableSize}`);\n    }\n    let oldTable = this.table;\n    let {tableSize} = this;\n    while (tableSize < desiredTableSize) {\n      tableSize *= 2;\n    }\n    while (true) {\n      for (let rehashAttempt = 0; rehashAttempt < this.maxRehashAttempts; ++rehashAttempt) {\n        if (this.rehash(oldTable, tableSize)) {\n          if (DEBUG) {\n            console.log(`grow end`);\n          }\n          return;\n        }\n      }\n      tableSize *= 2;\n    }\n  }\n\n  protected insertInternal() {\n    ++this.generation;\n\n    if (pendingLow === this.emptyLow && pendingHigh === this.emptyHigh) {\n      this.chooseAnotherEmptyKey();\n    }\n\n    if (++this.size > this.capacity) {\n      this.backupPending();\n      this.grow(this.tableSize * 2);\n      this.restorePending();\n    }\n\n    while (!this.tryToInsert()) {\n      this.backupPending();\n      this.grow(this.tableSize);\n      this.restorePending();\n    }\n  }\n}\n\nexport class HashSetUint64 extends HashTableBase {\n  add(x: Uint64) {\n    let {low, high} = x;\n    if (this.hasPair(low, high)) {\n      return false;\n    }\n    if (DEBUG) {\n      console.log(`add: ${low},${high}`);\n    }\n    pendingLow = low;\n    pendingHigh = high;\n    this.insertInternal();\n    return true;\n  }\n\n  /**\n   * Iterates over the keys.\n   * Creates a new Uint64 object at every iteration (otherwise spread and Array.from() fail)\n   */\n  [Symbol.iterator]() {\n    return this.unsafeKeys();\n  }\n}\nHashSetUint64.prototype.entryStride = 2;\n\n// Value that needs to be inserted.  Temporary variables used during insert.  These can safely be\n// global because control never leaves functions defined in this module while these are in use.\nlet pendingValueLow = 0, pendingValueHigh = 0, backupPendingValueLow = 0,\n    backupPendingValueHigh = 0;\n\nexport class HashMapUint64 extends HashTableBase {\n  set(key: Uint64, value: Uint64) {\n    let {low, high} = key;\n    if (this.hasPair(low, high)) {\n      return false;\n    }\n    if (DEBUG) {\n      console.log(`add: ${low},${high} -> ${value.low},${value.high}`);\n    }\n    pendingLow = low;\n    pendingHigh = high;\n    pendingValueLow = value.low;\n    pendingValueHigh = value.high;\n    this.insertInternal();\n    return true;\n  }\n\n  get(key: Uint64, value: Uint64): boolean {\n    let h = this.indexOf(key);\n    if (h === -1) {\n      return false;\n    }\n    let {table} = this;\n    value.low = table[h + 2];\n    value.high = table[h + 3];\n    return true;\n  }\n\n  protected swapPending(table: Uint32Array, offset: number) {\n    let tempLow = pendingValueLow, tempHigh = pendingValueHigh;\n    super.swapPending(table, offset);\n    table[offset + 2] = tempLow;\n    table[offset + 3] = tempHigh;\n  }\n\n  protected storePending(table: Uint32Array, offset: number) {\n    super.storePending(table, offset);\n    pendingValueLow = table[offset + 2];\n    pendingValueHigh = table[offset + 3];\n  }\n\n  protected backupPending() {\n    super.backupPending();\n    backupPendingValueLow = pendingValueLow;\n    backupPendingValueHigh = pendingValueHigh;\n  }\n\n  protected restorePending() {\n    super.restorePending();\n    pendingValueLow = backupPendingValueLow;\n    pendingValueHigh = backupPendingValueHigh;\n  }\n\n  /**\n   * Iterates over entries.  The same temporary value will be modified and yielded at every\n   * iteration.\n   */\n  [Symbol.iterator]() {\n    return this.unsafeEntries();\n  }\n\n  /**\n   * Iterates over entries.\n   * Creates new Uint64 objects at every iteration (otherwise spread and Array.from() fail)\n   */\n  * entries() {\n    let {emptyLow, emptyHigh, entryStride} = this;\n    let {table} = this;\n    for (let i = 0, length = table.length; i < length; i += entryStride) {\n      let low = table[i], high = table[i + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        let key = new Uint64(low, high);\n        let value = new Uint64(table[i + 2], table[i + 3]);\n        yield [key, value];\n      }\n    }\n  }\n\n  /**\n   * Iterates over entries.  The same temporary value will be modified and yielded at every\n   * iteration.\n   */\n  * unsafeEntries(temp: [Uint64, Uint64] = [new Uint64(), new Uint64()]) {\n    let {emptyLow, emptyHigh, entryStride} = this;\n    let {table} = this;\n    let [key, value] = temp;\n    for (let i = 0, length = table.length; i < length; i += entryStride) {\n      let low = table[i], high = table[i + 1];\n      if (low !== emptyLow || high !== emptyHigh) {\n        key.low = low;\n        key.high = high;\n        value.low = table[i + 2];\n        value.high = table[i + 3];\n        yield temp;\n      }\n    }\n  }\n}\nHashMapUint64.prototype.entryStride = 4;\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {HashSetUint64} from 'neuroglancer/gpu_hash/hash_table';\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {Signal} from 'neuroglancer/util/signal';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\n@registerSharedObject('Uint64Set')\nexport class Uint64Set extends SharedObjectCounterpart implements\n    WatchableValueInterface<Uint64Set> {\n  hashTable = new HashSetUint64();\n  changed = new Signal<(x: Uint64|Uint64[]|null, add: boolean) => void>();\n\n  get value() {\n    return this;\n  }\n\n  static makeWithCounterpart(rpc: RPC) {\n    let obj = new Uint64Set();\n    obj.initializeCounterpart(rpc);\n    return obj;\n  }\n\n  set(x: Uint64|Uint64[], value: boolean) {\n    if (!value) {\n      this.delete(x);\n    } else {\n      this.add(x);\n    }\n  }\n\n  reserve_(x: number) {\n    return this.hashTable.reserve(x);\n  }\n\n  reserve(x: number) {\n    if (this.reserve_(x)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.reserve', {'id': this.rpcId, 'value': x});\n      }\n    }\n  }\n\n  add_(x: Uint64[]) {\n    let changed = false;\n    for (const v of x) {\n      changed = this.hashTable.add(v) || changed;\n    }\n    return changed;\n  }\n\n  add(x: Uint64|Uint64[]) {\n    const tmp = Array<Uint64>().concat(x);\n    if (this.add_(tmp)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.add', {'id': this.rpcId, 'value': tmp});\n      }\n      this.changed.dispatch(x, true);\n    }\n  }\n\n  has(x: Uint64) {\n    return this.hashTable.has(x);\n  }\n\n  [Symbol.iterator]() {\n    return this.hashTable.keys();\n  }\n\n  unsafeKeys() {\n    return this.hashTable.unsafeKeys();\n  }\n\n  delete_(x: Uint64[]) {\n    let changed = false;\n    for (const v of x) {\n      changed = this.hashTable.delete(v) || changed;\n    }\n    return changed;\n  }\n\n  delete(x: Uint64|Uint64[]) {\n    const tmp = Array<Uint64>().concat(x);\n    if (this.delete_(Array<Uint64>().concat(x))) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.delete', {'id': this.rpcId, 'value': tmp});\n      }\n      this.changed.dispatch(x, false);\n    }\n  }\n\n  get size() {\n    return this.hashTable.size;\n  }\n\n  clear() {\n    if (this.hashTable.clear()) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.clear', {'id': this.rpcId});\n      }\n      this.changed.dispatch(null, false);\n    }\n  }\n\n  toJSON() {\n    let result = new Array<string>();\n    for (let id of this.unsafeKeys()) {\n      result.push(id.toString());\n    }\n    // Need to sort entries, otherwise serialization changes every time.\n    result.sort();\n    return result;\n  }\n\n  assignFrom(other: Uint64Set) {\n    this.clear();\n    for (const key of other.unsafeKeys()) {\n      this.add(key);\n    }\n  }\n}\n\nregisterRPC('Uint64Set.reserve', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.reserve_(x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Set.add', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.add_(x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Set.delete', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.delete_(x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Set.clear', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.hashTable.clear()) {\n    obj.changed.dispatch();\n  }\n});\n", "/**\n * @license\n * This work is a derivative of the Google Neuroglancer project,\n * Copyright 2016 Google Inc.\n * The Derivative Work is covered by\n * Copyright 2019 Howard Hughes Medical Institute\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {HashMapUint64} from 'neuroglancer/gpu_hash/hash_table';\nimport {WatchableValueInterface} from 'neuroglancer/trackable_value';\nimport {Signal} from 'neuroglancer/util/signal';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\n@registerSharedObject('Uint64Map')\nexport class Uint64Map extends SharedObjectCounterpart implements\n    WatchableValueInterface<Uint64Map> {\n  hashTable = new HashMapUint64();\n  changed = new Signal<(x: Uint64|null, add: boolean) => void>();\n\n  get value() {\n    return this;\n  }\n\n  static makeWithCounterpart(rpc: RPC) {\n    let obj = new Uint64Map();\n    obj.initializeCounterpart(rpc);\n    return obj;\n  }\n\n  set_(key: Uint64, value: Uint64) {\n    return this.hashTable.set(key, value);\n  }\n\n  set(key: Uint64, value: Uint64) {\n    if (this.set_(key, value)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Map.set', {'id': this.rpcId, 'key': key, 'value': value});\n      }\n      this.changed.dispatch(key, true);\n    }\n  }\n\n  has(key: Uint64) {\n    return this.hashTable.has(key);\n  }\n\n  get(key: Uint64, value: Uint64): boolean {\n    return this.hashTable.get(key, value);\n  }\n\n  [Symbol.iterator]() {\n    return this.hashTable.entries();\n  }\n\n  unsafeEntries() {\n    return this.hashTable.unsafeEntries();\n  }\n\n  delete_(key: Uint64) {\n    return this.hashTable.delete(key);\n  }\n\n  delete(key: Uint64) {\n    if (this.delete_(key)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Map.delete', {'id': this.rpcId, 'key': key});\n      }\n      this.changed.dispatch(key, false);\n    }\n  }\n\n  get size() {\n    return this.hashTable.size;\n  }\n\n  assignFrom(other: Uint64Map) {\n    this.clear();\n    for (const [key, value] of other.unsafeEntries()) {\n      this.set(key, value);\n    }\n  }\n\n  clear() {\n    if (this.hashTable.clear()) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Map.clear', {'id': this.rpcId});\n      }\n      this.changed.dispatch(null, false);\n    }\n  }\n\n  toJSON() {\n    let result: {[key: string]: string} = {};\n    for (let [key, value] of this.hashTable.unsafeEntries()) {\n      result[key.toString()] = value.toString();\n    }\n    return result;\n  }\n}\n\nregisterRPC('Uint64Map.set', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.set_(x['key'], x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Map.delete', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.delete_(x['key'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Map.clear', function(x) {\n  let obj = this.get(x['id']);\n  if (obj.hashTable.clear()) {\n    obj.changed.dispatch();\n  }\n});\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SharedDisjointUint64Sets} from 'neuroglancer/shared_disjoint_sets';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {Uint64Set} from 'neuroglancer/uint64_set';\nimport {RefCounted} from 'neuroglancer/util/disposable';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {VisibleSegmentEquivalencePolicy} from 'neuroglancer/segmentation_graph/source';\n\nexport interface VisibleSegmentsState {\n  visibleSegments: Uint64Set;\n  segmentEquivalences: SharedDisjointUint64Sets;\n\n  // Specifies a temporary/alternative set of segments/equivalences to use for display purposes,\n  // used for previewing a merge/split.\n  temporaryVisibleSegments: Uint64Set;\n  temporarySegmentEquivalences: SharedDisjointUint64Sets;\n  useTemporaryVisibleSegments: SharedWatchableValue<boolean>;\n  useTemporarySegmentEquivalences: SharedWatchableValue<boolean>;\n}\n\nexport const VISIBLE_SEGMENTS_STATE_PROPERTIES: (keyof VisibleSegmentsState)[] = [\n  'visibleSegments',\n  'segmentEquivalences',\n  'temporaryVisibleSegments',\n  'temporarySegmentEquivalences',\n  'useTemporaryVisibleSegments',\n  'useTemporarySegmentEquivalences',\n];\n\nexport function onVisibleSegmentsStateChanged(\n    context: RefCounted, state: VisibleSegmentsState, callback: () => void) {\n  context.registerDisposer(state.visibleSegments.changed.add(callback));\n  context.registerDisposer(state.segmentEquivalences.changed.add(callback));\n}\n\nexport function onTemporaryVisibleSegmentsStateChanged(\n    context: RefCounted, state: VisibleSegmentsState, callback: () => void) {\n  context.registerDisposer(state.temporaryVisibleSegments.changed.add(callback));\n  context.registerDisposer(state.temporarySegmentEquivalences.changed.add(callback));\n  context.registerDisposer(state.useTemporaryVisibleSegments.changed.add(callback));\n  context.registerDisposer(state.useTemporarySegmentEquivalences.changed.add(callback));\n}\n\n/**\n * Returns a string key for identifying a uint64 object id.  This is faster than\n * Uint64.prototype.toString().\n */\nexport function getObjectKey(objectId: Uint64): string {\n  return `${objectId.low},${objectId.high}`;\n}\n\nfunction isHighBitSegment(segmentId: Uint64): boolean {\n  return (segmentId.high >>> 31) ? true : false;\n}\n\nexport function getVisibleSegments(state: VisibleSegmentsState) {\n  return state.useTemporaryVisibleSegments.value ? state.temporaryVisibleSegments :\n                                                   state.visibleSegments;\n}\n\nexport function getSegmentEquivalences(state: VisibleSegmentsState) {\n  return state.useTemporarySegmentEquivalences.value ? state.temporarySegmentEquivalences :\n                                                       state.segmentEquivalences;\n}\n\nexport function forEachVisibleSegment(\n    state: VisibleSegmentsState, callback: (objectId: Uint64, rootObjectId: Uint64) => void) {\n  const visibleSegments = getVisibleSegments(state);\n  const segmentEquivalences = getSegmentEquivalences(state);\n  const equivalencePolicy = segmentEquivalences.disjointSets.visibleSegmentEquivalencePolicy.value;\n  for (let rootObjectId of visibleSegments.unsafeKeys()) {\n    if (equivalencePolicy & VisibleSegmentEquivalencePolicy.NONREPRESENTATIVE_EXCLUDED) {\n      const rootObjectId2 = segmentEquivalences.get(rootObjectId);\n      callback(rootObjectId, rootObjectId2);\n    } else {\n      // TODO(jbms): Remove this check if logic is added to ensure that it always holds.\n      if (!segmentEquivalences.disjointSets.isMinElement(rootObjectId)) {\n        continue;\n      }\n      for (let objectId of segmentEquivalences.setElements(rootObjectId)) {\n        if (equivalencePolicy & VisibleSegmentEquivalencePolicy.REPRESENTATIVE_EXCLUDED &&\n            equivalencePolicy & VisibleSegmentEquivalencePolicy.MAX_REPRESENTATIVE &&\n            isHighBitSegment(objectId)) {\n          continue;\n        }\n        callback(objectId, rootObjectId);\n      }\n    }\n  }\n}\n\nexport interface IndexedSegmentProperty {\n  id: string;\n  type: 'string';\n  description: string|undefined;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Import to register the shared object types.\nimport 'neuroglancer/shared_disjoint_sets';\nimport 'neuroglancer/uint64_set';\nimport 'neuroglancer/uint64_map';\n\nimport {ChunkRequester, ChunkSource} from 'neuroglancer/chunk_manager/backend';\nimport {RenderLayerTransformOrError} from 'neuroglancer/render_coordinate_transform';\nimport { IndexedSegmentProperty, onTemporaryVisibleSegmentsStateChanged, onVisibleSegmentsStateChanged, VisibleSegmentsState, VISIBLE_SEGMENTS_STATE_PROPERTIES} from 'neuroglancer/segmentation_display_state/base';\nimport {SharedDisjointUint64Sets} from 'neuroglancer/shared_disjoint_sets';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {Uint64Set} from 'neuroglancer/uint64_set';\nimport {AnyConstructor} from 'neuroglancer/util/mixin';\nimport {RPC} from 'neuroglancer/worker_rpc';\n\nexport function receiveVisibleSegmentsState(\n    rpc: RPC, options: any,\n    target: VisibleSegmentsState = {} as VisibleSegmentsState): VisibleSegmentsState {\n  // No need to increase the reference count of these properties since our owner will hold a\n  // reference to their owners.\n  for (const property of VISIBLE_SEGMENTS_STATE_PROPERTIES) {\n    target[property] = rpc.get(options[property]);\n  }\n  return target;\n}\n\nexport const withSegmentationLayerBackendState =\n    <TBase extends AnyConstructor<ChunkRequester>>(Base: TBase) =>\n        class SegmentationLayerState extends Base implements VisibleSegmentsState {\n  visibleSegments: Uint64Set;\n  segmentEquivalences: SharedDisjointUint64Sets;\n  temporaryVisibleSegments: Uint64Set;\n  temporarySegmentEquivalences: SharedDisjointUint64Sets;\n  useTemporaryVisibleSegments: SharedWatchableValue<boolean>;\n  useTemporarySegmentEquivalences: SharedWatchableValue<boolean>;\n  transform: SharedWatchableValue<RenderLayerTransformOrError>;\n  renderScaleTarget: SharedWatchableValue<number>;\n  constructor(...args: any[]) {\n    const [rpc, options] = args as [RPC, any];\n    super(rpc, options);\n    receiveVisibleSegmentsState(rpc, options, this);\n    this.transform = rpc.get(options['transform']);\n    this.renderScaleTarget = rpc.get(options['renderScaleTarget']);\n\n    const scheduleUpdateChunkPriorities = () => {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    };\n    onTemporaryVisibleSegmentsStateChanged(this, this, scheduleUpdateChunkPriorities);\n    onVisibleSegmentsStateChanged(this, this, scheduleUpdateChunkPriorities);\n    this.registerDisposer(this.transform.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(this.renderScaleTarget.changed.add(scheduleUpdateChunkPriorities));\n  }\n};\n\nexport class IndexedSegmentPropertySourceBackend extends ChunkSource {\n  properties: readonly Readonly<IndexedSegmentProperty>[];\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.properties = options.properties;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Annotation, AnnotationId, fixAnnotationAfterStructuredCloning, SerializedAnnotations} from 'neuroglancer/annotation';\nimport {ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID, ANNOTATION_COMMIT_UPDATE_RPC_ID, ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID, ANNOTATION_PERSPECTIVE_RENDER_LAYER_UPDATE_SOURCES_RPC_ID, ANNOTATION_REFERENCE_ADD_RPC_ID, ANNOTATION_REFERENCE_DELETE_RPC_ID, ANNOTATION_RENDER_LAYER_RPC_ID, ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID, ANNOTATION_SPATIALLY_INDEXED_RENDER_LAYER_RPC_ID, ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID, AnnotationGeometryChunkSpecification, forEachVisibleAnnotationChunk} from 'neuroglancer/annotation/base';\nimport {Chunk, ChunkManager, ChunkRenderLayerBackend, ChunkSource, withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {DisplayDimensionRenderInfo, displayDimensionRenderInfosEqual} from 'neuroglancer/navigation_state';\nimport {RenderedViewBackend, RenderLayerBackend, RenderLayerBackendAttachment} from 'neuroglancer/render_layer_backend';\nimport {receiveVisibleSegmentsState} from 'neuroglancer/segmentation_display_state/backend';\nimport {forEachVisibleSegment, getObjectKey, onTemporaryVisibleSegmentsStateChanged, onVisibleSegmentsStateChanged, VisibleSegmentsState} from 'neuroglancer/segmentation_display_state/base';\nimport {SharedWatchableValue} from 'neuroglancer/shared_watchable_value';\nimport {deserializeTransformedSources, SCALE_PRIORITY_MULTIPLIER, SliceViewChunk, SliceViewChunkSourceBackend} from 'neuroglancer/sliceview/backend';\nimport {TransformedSource} from 'neuroglancer/sliceview/base';\nimport {registerNested, WatchableValue} from 'neuroglancer/trackable_value';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {getBasePriority, getPriorityTier, withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerRPC, registerSharedObject, RPC, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst ANNOTATION_METADATA_CHUNK_PRIORITY = 200;\nconst ANNOTATION_SEGMENT_FILTERED_CHUNK_PRIORITY = 60;\n\nexport class AnnotationMetadataChunk extends Chunk {\n  annotation: Annotation|undefined|null;\n  freeSystemMemory() {\n    this.annotation = undefined;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg.annotation = this.annotation;\n  }\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes = 0;\n    super.downloadSucceeded();\n  }\n}\n\nexport class AnnotationGeometryData implements SerializedAnnotations {\n  data: Uint8Array;\n  typeToOffset: number[];\n  typeToIds: string[][];\n  typeToIdMaps: Map<string, number>[];\n\n  serialize(msg: any, transfers: any[]) {\n    msg.data = this.data;\n    msg.typeToOffset = this.typeToOffset;\n    msg.typeToIds = this.typeToIds;\n    msg.typeToIdMaps = this.typeToIdMaps;\n    transfers.push(this.data.buffer);\n  }\n\n  get numBytes() {\n    return this.data.byteLength;\n  }\n}\n\nfunction GeometryChunkMixin<TBase extends {new (...args: any[]): Chunk}>(Base: TBase) {\n  class C extends Base {\n    data: AnnotationGeometryData|undefined;\n    serialize(msg: any, transfers: any[]) {\n      super.serialize(msg, transfers);\n      const {data} = this;\n      if (data !== undefined) {\n        data.serialize(msg, transfers);\n        this.data = undefined;\n      }\n    }\n\n    downloadSucceeded() {\n      const {data} = this;\n      this.systemMemoryBytes = this.gpuMemoryBytes = data === undefined ? 0 : data.numBytes;\n      super.downloadSucceeded();\n    }\n\n    freeSystemMemory() {\n      this.data = undefined;\n    }\n  }\n  return C;\n}\n\nexport class AnnotationGeometryChunk extends GeometryChunkMixin\n(SliceViewChunk) {\n  source: AnnotationGeometryChunkSourceBackend;\n}\n\nexport class AnnotationSubsetGeometryChunk extends GeometryChunkMixin\n(Chunk) {\n  source: AnnotationSubsetGeometryChunkSource;\n  objectId: Uint64;\n}\n\n@registerSharedObject(ANNOTATION_METADATA_CHUNK_SOURCE_RPC_ID)\nclass AnnotationMetadataChunkSource extends ChunkSource {\n  parent: Borrowed<AnnotationSource>|undefined = undefined;\n  getChunk(id: string) {\n    const {chunks} = this;\n    let chunk = chunks.get(id);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(AnnotationMetadataChunk);\n      chunk.initialize(id);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  download(chunk: AnnotationMetadataChunk, cancellationToken: CancellationToken) {\n    return this.parent!.downloadMetadata(chunk, cancellationToken);\n  }\n}\n\nexport class AnnotationGeometryChunkSourceBackend extends\n    SliceViewChunkSourceBackend<AnnotationGeometryChunkSpecification, AnnotationGeometryChunk> {\n  parent: Borrowed<AnnotationSource>;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.parent = rpc.get(options.parent);\n  }\n}\nAnnotationGeometryChunkSourceBackend.prototype.chunkConstructor = AnnotationGeometryChunk;\n\n\n@registerSharedObject(ANNOTATION_SUBSET_GEOMETRY_CHUNK_SOURCE_RPC_ID)\nclass AnnotationSubsetGeometryChunkSource extends ChunkSource {\n  parent: Borrowed<AnnotationSource>|undefined = undefined;\n  chunks: Map<string, AnnotationSubsetGeometryChunk>;\n  relationshipIndex: number;\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    const {chunks} = this;\n    let chunk = chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(AnnotationSubsetGeometryChunk);\n      chunk.initialize(key);\n      chunk.objectId = objectId.clone();\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n  download(chunk: AnnotationSubsetGeometryChunk, cancellationToken: CancellationToken) {\n    return this.parent!.downloadSegmentFilteredGeometry(\n        chunk, this.relationshipIndex, cancellationToken);\n  }\n}\n\nexport interface AnnotationSource {\n  // TODO(jbms): Move this declaration to class definition below and declare abstract once\n  // TypeScript supports mixins with abstract classes.\n  downloadMetadata(chunk: AnnotationMetadataChunk, cancellationToken: CancellationToken):\n      Promise<void>;\n  downloadSegmentFilteredGeometry(\n      chunk: AnnotationSubsetGeometryChunk, relationshipIndex: number,\n      cancellationToken: CancellationToken): Promise<void>;\n}\n\nexport class AnnotationSource extends SharedObjectCounterpart {\n  references = new Set<AnnotationId>();\n  chunkManager: Borrowed<ChunkManager>;\n  metadataChunkSource: AnnotationMetadataChunkSource;\n  segmentFilteredSources: AnnotationSubsetGeometryChunkSource[];\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    const chunkManager = this.chunkManager = <ChunkManager>rpc.get(options.chunkManager);\n    const metadataChunkSource = this.metadataChunkSource = this.registerDisposer(\n        rpc.getRef<AnnotationMetadataChunkSource>(options.metadataChunkSource));\n    this.segmentFilteredSources = (options.segmentFilteredSource as any[]).map((x, i) => {\n      const source = this.registerDisposer(rpc.getRef<AnnotationSubsetGeometryChunkSource>(x));\n      source.parent = this;\n      source.relationshipIndex = i;\n      return source;\n    });\n    metadataChunkSource.parent = this;\n    this.registerDisposer(\n        chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));\n  }\n\n  private recomputeChunkPriorities() {\n    const {chunkManager, metadataChunkSource} = this;\n    for (const id of this.references) {\n      chunkManager.requestChunk(\n          metadataChunkSource.getChunk(id), ChunkPriorityTier.VISIBLE,\n          ANNOTATION_METADATA_CHUNK_PRIORITY);\n    }\n  }\n\n  add(annotation: Annotation): Promise<AnnotationId> {\n    annotation;\n    throw new Error('Not implemented');\n  }\n  delete(id: AnnotationId): Promise<void> {\n    id;\n    throw new Error('Not implemented');\n  }\n  update(id: AnnotationId, newAnnotation: Annotation): Promise<void> {\n    id;\n    newAnnotation;\n    throw new Error('Not implemented');\n  }\n}\n\nregisterRPC(ANNOTATION_REFERENCE_ADD_RPC_ID, function(x: any) {\n  const obj = <AnnotationSource>this.get(x.id);\n  obj.references.add(x.annotation);\n  obj.chunkManager.scheduleUpdateChunkPriorities();\n});\n\nregisterRPC(ANNOTATION_REFERENCE_DELETE_RPC_ID, function(x: any) {\n  const obj = <AnnotationSource>this.get(x.id);\n  obj.references.delete(x.annotation);\n  obj.chunkManager.scheduleUpdateChunkPriorities();\n});\n\nregisterRPC(ANNOTATION_COMMIT_UPDATE_RPC_ID, function(x: any) {\n  const obj = <AnnotationSource>this.get(x.id);\n  const annotationId: AnnotationId|undefined = x.annotationId;\n  const newAnnotation: Annotation|null = fixAnnotationAfterStructuredCloning(x.newAnnotation);\n\n  let promise: Promise<Annotation|null>;\n  if (annotationId === undefined) {\n    promise = obj.add(newAnnotation!).then(id => ({...newAnnotation!, id}));\n  } else if (newAnnotation === null) {\n    promise = obj.delete(annotationId).then(() => null);\n  } else {\n    promise = obj.update(annotationId, newAnnotation).then(() => newAnnotation);\n  }\n  // FIXME: Handle new chunks requested prior to update but not yet sent to frontend.\n  promise.then(\n      result => {\n        if (!obj.wasDisposed) {\n          this.invoke(ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID, {\n            id: obj.rpcId,\n            annotationId: annotationId || newAnnotation!.id,\n            newAnnotation: result\n          });\n        }\n      },\n      (error: Error) => {\n        if (!obj.wasDisposed) {\n          this.invoke(ANNOTATION_COMMIT_UPDATE_RESULT_RPC_ID, {\n            id: obj.rpcId,\n            annotationId: annotationId || (newAnnotation && newAnnotation.id),\n            error: error.message\n          });\n        }\n      });\n});\n\ninterface AnnotationRenderLayerAttachmentState {\n  displayDimensionRenderInfo: DisplayDimensionRenderInfo;\n  transformedSources: TransformedSource<\n      AnnotationSpatiallyIndexedRenderLayerBackend, AnnotationGeometryChunkSourceBackend>[][];\n}\n\n@registerSharedObject(ANNOTATION_SPATIALLY_INDEXED_RENDER_LAYER_RPC_ID)\nclass AnnotationSpatiallyIndexedRenderLayerBackend extends withChunkManager\n(RenderLayerBackend) {\n  localPosition: SharedWatchableValue<Float32Array>;\n  renderScaleTarget: SharedWatchableValue<number>;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.renderScaleTarget = rpc.get(options.renderScaleTarget);\n    this.localPosition = rpc.get(options.localPosition);\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    this.registerDisposer(this.localPosition.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(this.renderScaleTarget.changed.add(scheduleUpdateChunkPriorities));\n    this.registerDisposer(\n        this.chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));\n  }\n\n  attach(\n      attachment:\n          RenderLayerBackendAttachment<RenderedViewBackend, AnnotationRenderLayerAttachmentState>) {\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    const {view} = attachment;\n    attachment.registerDisposer(scheduleUpdateChunkPriorities);\n    attachment.registerDisposer(\n        view.projectionParameters.changed.add(scheduleUpdateChunkPriorities));\n    attachment.registerDisposer(view.visibility.changed.add(scheduleUpdateChunkPriorities));\n    attachment.state = {\n      displayDimensionRenderInfo: view.projectionParameters.value.displayDimensionRenderInfo,\n      transformedSources: [],\n    };\n  }\n\n  private recomputeChunkPriorities() {\n    this.chunkManager.registerLayer(this);\n    for (const attachment of this.attachments.values()) {\n      const {view} = attachment;\n      const visibility = view.visibility.value;\n      if (visibility === Number.NEGATIVE_INFINITY) {\n        continue;\n      }\n      const attachmentState = attachment.state! as AnnotationRenderLayerAttachmentState;\n      const {transformedSources, displayDimensionRenderInfo} = attachmentState;\n      if (transformedSources.length === 0) continue;\n      const viewDisplayDimensionRenderInfo =\n          view.projectionParameters.value.displayDimensionRenderInfo;\n      if (displayDimensionRenderInfo !== viewDisplayDimensionRenderInfo) {\n        if (!displayDimensionRenderInfosEqual(\n                displayDimensionRenderInfo, viewDisplayDimensionRenderInfo)) {\n          continue;\n        }\n        attachmentState.displayDimensionRenderInfo = viewDisplayDimensionRenderInfo;\n      }\n      const priorityTier = getPriorityTier(visibility);\n      const basePriority = getBasePriority(visibility);\n\n      const projectionParameters = view.projectionParameters.value;\n\n      const {chunkManager} = this;\n      forEachVisibleAnnotationChunk(\n          projectionParameters, this.localPosition.value, this.renderScaleTarget.value,\n          transformedSources[0], () => {}, (tsource, scaleIndex) => {\n            const chunk = (tsource.source as AnnotationGeometryChunkSourceBackend)\n                              .getChunk(tsource.curPositionInChunks);\n            ++this.numVisibleChunksNeeded;\n            // FIXME: calculate priority\n            if (chunk.state === ChunkState.GPU_MEMORY) {\n              ++this.numVisibleChunksAvailable;\n            }\n            let priority = 0;\n            chunkManager.requestChunk(\n                chunk, priorityTier,\n                basePriority + priority + SCALE_PRIORITY_MULTIPLIER * scaleIndex);\n          });\n    }\n  }\n}\nAnnotationSpatiallyIndexedRenderLayerBackend;\n\nregisterRPC(ANNOTATION_PERSPECTIVE_RENDER_LAYER_UPDATE_SOURCES_RPC_ID, function(x) {\n  const view = this.get(x.view) as RenderedViewBackend;\n  const layer = this.get(x.layer) as AnnotationSpatiallyIndexedRenderLayerBackend;\n  const attachment = layer.attachments.get(view)! as\n      RenderLayerBackendAttachment<RenderedViewBackend, AnnotationRenderLayerAttachmentState>;\n  attachment.state!.transformedSources = deserializeTransformedSources<\n      AnnotationGeometryChunkSourceBackend, AnnotationSpatiallyIndexedRenderLayerBackend>(\n      this, x.sources, layer);\n  attachment.state!.displayDimensionRenderInfo = x.displayDimensionRenderInfo;\n  layer.chunkManager.scheduleUpdateChunkPriorities();\n});\n\ntype AnnotationLayerSegmentationState = VisibleSegmentsState|undefined|null;\n\n\n@registerSharedObject(ANNOTATION_RENDER_LAYER_RPC_ID)\nclass AnnotationLayerSharedObjectCounterpart extends withSharedVisibility\n(withChunkManager(ChunkRenderLayerBackend)) {\n  source: AnnotationSource;\n\n  segmentationStates: WatchableValue<AnnotationLayerSegmentationState[]|undefined>;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = rpc.get(options.source);\n    this.segmentationStates =\n        new WatchableValue(this.getSegmentationState(options.segmentationStates));\n\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    this.registerDisposer(registerNested((context, states) => {\n      if (states === undefined) return;\n      for (const state of states) {\n        if (state == null) continue;\n        onVisibleSegmentsStateChanged(context, state, scheduleUpdateChunkPriorities);\n        onTemporaryVisibleSegmentsStateChanged(context, state, scheduleUpdateChunkPriorities);\n      }\n      scheduleUpdateChunkPriorities();\n    }, this.segmentationStates));\n    this.registerDisposer(\n        this.chunkManager.recomputeChunkPriorities.add(() => this.recomputeChunkPriorities()));\n  }\n\n  private recomputeChunkPriorities() {\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const {segmentationStates: {value: states}, source: {segmentFilteredSources}} = this;\n    if (states === undefined) return;\n    const {chunkManager} = this;\n    chunkManager.registerLayer(this);\n    const numRelationships = states.length;\n    for (let i = 0; i < numRelationships; ++i) {\n      const state = states[i];\n      if (state == null) {\n        continue;\n      }\n      const priorityTier = getPriorityTier(visibility);\n      const basePriority = getBasePriority(visibility);\n      const source = segmentFilteredSources[i];\n      forEachVisibleSegment(state, objectId => {\n        const chunk = source.getChunk(objectId);\n        ++this.numVisibleChunksNeeded;\n        if (chunk.state === ChunkState.GPU_MEMORY) {\n          ++this.numVisibleChunksAvailable;\n        }\n        chunkManager.requestChunk(\n            chunk, priorityTier, basePriority + ANNOTATION_SEGMENT_FILTERED_CHUNK_PRIORITY);\n      });\n    }\n  }\n\n  getSegmentationState(msg: any[]|undefined): AnnotationLayerSegmentationState[]|undefined {\n    if (msg === undefined) return undefined;\n    return msg.map(x => {\n      if (x == null) {\n        return x as (undefined | null);\n      }\n      return receiveVisibleSegmentsState(this.rpc!, x);\n    });\n  }\n}\nAnnotationLayerSharedObjectCounterpart;\n\nregisterRPC(ANNOTATION_RENDER_LAYER_UPDATE_SEGMENTATION_RPC_ID, function(x) {\n  const obj = <AnnotationLayerSharedObjectCounterpart>this.get(x.id);\n  obj.segmentationStates.value = obj.getSegmentationState(x.segmentationStates);\n});\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Generic facility for providing authentication/authorization credentials.\n */\n\nimport {CancellationToken, MultipleConsumerCancellationTokenSource} from 'neuroglancer/util/cancellation';\nimport {Owned, RefCounted} from 'neuroglancer/util/disposable';\nimport {StringMemoize} from 'neuroglancer/util/memoize';\n\n/**\n * Wraps an arbitrary JSON credentials object with a generation number.\n *\n * The generation number is used for tracking whether the credentials have been updated/renewed.\n */\nexport interface CredentialsWithGeneration<T> {\n  generation: number;\n  credentials: T;\n}\n\nexport abstract class CredentialsProvider<Credentials> extends RefCounted {\n  /**\n   * Request valid credentials.  If `invalidCredentials` is specified, it indicates that the\n   * specified credentials are invalid.\n   *\n   * This method can be conveniently defined using the `makeCredentialsGetter` function.\n   */\n  abstract get:\n      (invalidCredentials?: CredentialsWithGeneration<Credentials>,\n       cancellationToken?: CancellationToken) => Promise<CredentialsWithGeneration<Credentials>>;\n}\n\nexport function makeCachedCredentialsGetter<Credentials>(\n    getUncached: (\n        invalidCredentials: CredentialsWithGeneration<Credentials>|undefined,\n        cancellationToken: CancellationToken) => Promise<CredentialsWithGeneration<Credentials>>) {\n  let cachedCredentials: CredentialsWithGeneration<Credentials>|undefined;\n  let pendingCredentials: Promise<CredentialsWithGeneration<Credentials>>|undefined;\n  let pendingCancellationToken: MultipleConsumerCancellationTokenSource|undefined;\n  return (invalidCredentials?: CredentialsWithGeneration<Credentials>,\n          cancellationToken?: CancellationToken) => {\n    if (pendingCredentials !== undefined &&\n        (cachedCredentials === undefined || invalidCredentials === undefined ||\n         cachedCredentials.generation !== invalidCredentials.generation)) {\n      if (cachedCredentials === undefined) {\n        pendingCancellationToken!.addConsumer(cancellationToken);\n      }\n      return pendingCredentials;\n    }\n    cachedCredentials = undefined;\n    pendingCancellationToken = new MultipleConsumerCancellationTokenSource();\n    pendingCredentials = getUncached(invalidCredentials, pendingCancellationToken)\n                             .then(\n                                 credentials => {\n                                   cachedCredentials = credentials;\n                                   pendingCancellationToken = undefined;\n                                   return credentials;\n                                 },\n                                 reason => {\n                                   if (pendingCancellationToken!.isCanceled) {\n                                     pendingCancellationToken = undefined;\n                                     pendingCredentials = undefined;\n                                   }\n                                   throw reason;\n                                 });\n    return pendingCredentials;\n  };\n}\n\nexport function makeCredentialsGetter<Credentials>(\n    getWithoutGeneration: (cancellationToken: CancellationToken) => Promise<Credentials>) {\n  let generation = 0;\n  return makeCachedCredentialsGetter<Credentials>(\n      (_invalidCredentials, cancellationToken) =>\n          getWithoutGeneration(cancellationToken)\n              .then(credentials => ({generation: ++generation, credentials})));\n}\n\n/**\n * Interface for obtaining a CredentialsProvider based on a string key.\n */\nexport interface CredentialsManager {\n  getCredentialsProvider<Credentials>(key: string, parameters?: any):\n      Owned<CredentialsProvider<Credentials>>;\n}\n\nexport type ProviderGetter<Credentials> =\n    (parameters: any, credentialsManager: CredentialsManager) =>\n        Owned<CredentialsProvider<Credentials>>;\n\n/**\n * CredentialsManager that supports registration.\n */\nexport class MapBasedCredentialsManager implements CredentialsManager {\n  providers = new Map<\n      string,\n      (parameters: any, credentialsManager: CredentialsManager) =>\n          Owned<CredentialsProvider<any>>>();\n  topLevelManager: CredentialsManager = this;\n  register<Credentials>(key: string, providerGetter: ProviderGetter<Credentials>) {\n    this.providers.set(key, providerGetter);\n  }\n\n  getCredentialsProvider<Credentials>(key: string, parameters?: any):\n      Owned<CredentialsProvider<Credentials>> {\n    const getter = this.providers.get(key);\n    if (getter === undefined) {\n      throw new Error(`No registered credentials provider: ${JSON.stringify(key)}`);\n    }\n    return getter(parameters, this.topLevelManager);\n  }\n}\n\n/**\n * CredentialsManager that wraps another and caches the CredentialsProvider objects.\n */\nexport class CachingCredentialsManager<Base extends CredentialsManager> extends RefCounted\n    implements CredentialsManager {\n  memoize = new StringMemoize();\n\n  constructor(public base: Base) {\n    super();\n  }\n\n  getCredentialsProvider<Credentials>(key: string, parameters?: any):\n      Owned<CredentialsProvider<Credentials>> {\n    return this.memoize.get(\n        {key, parameters},\n        () => this.registerDisposer(\n            this.base.getCredentialsProvider<Credentials>(key, parameters).addRef()));\n  }\n}\n\nexport class CachingMapBasedCredentialsManager extends\n    CachingCredentialsManager<MapBasedCredentialsManager> {\n  constructor() {\n    super(new MapBasedCredentialsManager());\n    this.base.topLevelManager = this;\n  }\n\n  register<Credentials>(key: string, providerGetter: ProviderGetter<Credentials>) {\n    this.base.register(key, providerGetter);\n  }\n}\n\nexport type MaybeOptionalCredentialsProvider<T> =\n    T extends undefined ? undefined : CredentialsProvider<Exclude<T, undefined>>;\n\nexport class AnonymousFirstCredentialsProvider<T> extends CredentialsProvider<T> {\n  private anonymous = true;\n  constructor(private baseProvider: CredentialsProvider<T>, private anonymousCredentials: T) {\n    super();\n  }\n\n  get = makeCachedCredentialsGetter((invalidCredentials?: CredentialsWithGeneration<T>) => {\n    if (this.anonymous && invalidCredentials === undefined) {\n      return Promise.resolve({generation: -10, credentials: this.anonymousCredentials});\n    }\n    this.anonymous = false;\n    return this.baseProvider.get(invalidCredentials);\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport const CREDENTIALS_PROVIDER_RPC_ID = 'CredentialsProvider';\nexport const CREDENTIALS_PROVIDER_GET_RPC_ID = 'CredentialsProvider.get';\n\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Defines a CredentialsProvider that forwards requests to a SharedCredentialsProvider on\n * another thread.\n */\n\nimport {CredentialsProvider, CredentialsWithGeneration, makeCachedCredentialsGetter, MaybeOptionalCredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {CREDENTIALS_PROVIDER_GET_RPC_ID, CREDENTIALS_PROVIDER_RPC_ID} from 'neuroglancer/credentials_provider/shared_common';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {registerSharedObject, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\n\n@registerSharedObject(CREDENTIALS_PROVIDER_RPC_ID)\nexport class SharedCredentialsProviderCounterpart<Credentials> extends SharedObjectCounterpart\n    implements CredentialsProvider<Credentials> {\n  get = makeCachedCredentialsGetter(\n      (invalidCredentials?: CredentialsWithGeneration<Credentials>,\n       cancellationToken?: CancellationToken) =>\n          this.rpc!.promiseInvoke(\n              CREDENTIALS_PROVIDER_GET_RPC_ID,\n              {providerId: this.rpcId, invalidCredentials: invalidCredentials}, cancellationToken));\n}\n\nexport function WithSharedCredentialsProviderCounterpart<Credentials>() {\n  return function<TBase extends{new (...args: any[]): SharedObjectCounterpart}>(Base: TBase) {\n    return class extends Base {\n      credentialsProvider: MaybeOptionalCredentialsProvider<Credentials>;\n      constructor(...args: any[]) {\n        super(...args);\n        const options = args[1];\n        this.credentialsProvider =\n            this.rpc!.getOptionalRef<\n                SharedCredentialsProviderCounterpart<Exclude<Credentials, undefined>>>(\n                options['credentialsProvider']) as any;\n      }\n    };\n  };\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CANCELED, CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport class HttpError extends Error {\n  url: string;\n  status: number;\n  statusText: string;\n  response?: Response;\n\n  constructor(url: string, status: number, statusText: string, response?: Response) {\n    let message = `Fetching ${JSON.stringify(url)} resulted in HTTP error ${status}`;\n    if (statusText) {\n      message += `: ${statusText}`;\n    }\n    message += '.';\n    super(message);\n    this.name = 'HttpError';\n    this.message = message;\n    this.url = url;\n    this.status = status;\n    this.statusText = statusText;\n    if (response) {\n      this.response = response;\n    }\n  }\n\n  static fromResponse(response: Response) {\n    return new HttpError(response.url, response.status, response.statusText, response);\n  }\n\n  static fromRequestError(input: RequestInfo, error: unknown) {\n    if (error instanceof TypeError) {\n      let url: string;\n      if (typeof input === 'string') {\n        url = input;\n      } else {\n        url = input.url;\n      }\n      return new HttpError(url, 0, 'Network or CORS error');\n    }\n    return error;\n  }\n}\n\nconst maxAttempts = 32;\nconst minDelayMilliseconds = 500;\nconst maxDelayMilliseconds = 10000;\n\nexport function pickDelay(attemptNumber: number): number {\n  // If `attemptNumber == 0`, delay is a random number of milliseconds between\n  // `[minDelayMilliseconds, minDelayMilliseconds*2]`.  The lower and upper bounds of the interval\n  // double with each successive attempt, up to the limit of\n  // `[maxDelayMilliseconds/2,maxDelayMilliseconds]`.\n  return Math.min(2 ** attemptNumber * minDelayMilliseconds, maxDelayMilliseconds / 2) *\n      (1 + Math.random());\n}\n\n/**\n * Issues a `fetch` request.\n *\n * If the request fails due to an HTTP status outside `[200, 300)`, throws an `HttpError`.  If the\n * request fails due to a network or CORS restriction, throws an `HttpError` with a `status` of `0`.\n *\n * If the request fails due to a transient error (429, 503, 504), retry.\n */\nexport async function fetchOk(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  for (let requestAttempt = 0;;) {\n    if (init?.signal?.aborted) {\n      throw CANCELED;\n    }\n    let response: Response;\n    try {\n      response = await fetch(input, init);\n    } catch (error) {\n      throw HttpError.fromRequestError(input, error);\n    }\n    if (!response.ok) {\n      const {status} = response;\n      if (status === 429 || status === 503 || status === 504) {\n        // 429: Too Many Requests.  Retry.\n        // 503: Service unavailable.  Retry.\n        // 504: Gateway timeout.  Can occur if the server takes too long to reply.  Retry.\n        if (++requestAttempt !== maxAttempts) {\n          await new Promise(resolve => setTimeout(resolve, pickDelay(requestAttempt - 1)));\n          continue;\n        }\n      }\n      throw HttpError.fromResponse(response);\n    }\n    return response;\n  }\n}\n\nexport function responseArrayBuffer(response: Response): Promise<ArrayBuffer> {\n  return response.arrayBuffer();\n}\n\nexport function responseJson(response: Response): Promise<any> {\n  return response.json();\n}\n\nexport type ResponseTransform<T> = (response: Response) => Promise<T>;\n\n/**\n * Issues a `fetch` request in the same way as `fetchOk`, and returns the result of the promise\n * returned by `transformResponse`.\n *\n * Additionally, the request may be cancelled through `cancellationToken`.\n *\n * The `transformResponse` function should not do anything with the `Response` object after its\n * result becomes ready; otherwise, cancellation may not work as expected.\n */\nexport async function cancellableFetchOk<T>(\n    input: RequestInfo, init: RequestInit, transformResponse: ResponseTransform<T>,\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  if (cancellationToken === uncancelableToken) {\n    const response = await fetchOk(input, init);\n    return await transformResponse(response);\n  }\n  const abortController = new AbortController();\n  const unregisterCancellation = cancellationToken.add(() => abortController.abort());\n  try {\n    const response = await fetchOk(input, {...init, signal: abortController.signal});\n    return await transformResponse(response);\n  } finally {\n    unregisterCancellation();\n  }\n}\n\nconst tempUint64 = new Uint64();\n\nexport function getByteRangeHeader(startOffset: Uint64|number, endOffset: Uint64|number) {\n  let endOffsetStr: string;\n  if (typeof endOffset === 'number') {\n    endOffsetStr = `${endOffset - 1}`;\n  } else {\n    Uint64.decrement(tempUint64, endOffset);\n    endOffsetStr = tempUint64.toString();\n  }\n  return {'Range': `bytes=${startOffset}-${endOffsetStr}`};\n}\n\nexport function parseUrl(url: string): {protocol: string, host: string, path: string} {\n  const urlProtocolPattern = /^([^:\\/]+):\\/\\/([^\\/]+)((?:\\/.*)?)$/;\n  let match = url.match(urlProtocolPattern);\n  if (match === null) {\n    throw new Error(`Invalid URL: ${JSON.stringify(url)}`);\n  }\n  return {protocol: match[1], host: match[2], path: match[3]};\n}\n\nexport function isNotFoundError(e: any) {\n  if (!(e instanceof HttpError)) return false;\n  // Treat CORS errors (0) or 403 as not found.  S3 returns 403 if the file does not exist because\n  // permissions are per-file.\n  return (e.status === 0 || e.status === 403 || e.status === 404);\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider, CredentialsWithGeneration} from 'neuroglancer/credentials_provider';\nimport {CancellationToken, throwIfCanceled, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {cancellableFetchOk, HttpError, pickDelay, ResponseTransform} from 'neuroglancer/util/http_request';\n\nconst maxCredentialsAttempts = 3;\n\nexport async function fetchWithCredentials<Credentials, T>(\n    credentialsProvider: CredentialsProvider<Credentials>,\n    input: RequestInfo|((credentials: Credentials) => RequestInfo), init: RequestInit,\n    transformResponse: ResponseTransform<T>,\n    applyCredentials: (credentials: Credentials, requestInit: RequestInit) => RequestInit,\n    errorHandler: (httpError: HttpError, credentials: Credentials) => 'refresh',\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  let credentials: CredentialsWithGeneration<Credentials>|undefined;\n  credentialsLoop: for (let credentialsAttempt = 0;;) {\n    throwIfCanceled(cancellationToken);\n    if (credentialsAttempt > 1) {\n      // Don't delay on the first attempt, and also don't delay on the second attempt, since if the\n      // credentials have expired and there is no problem on the server there is no reason to delay\n      // requesting new credentials.\n      await new Promise(resolve => setTimeout(resolve, pickDelay(credentialsAttempt - 2)));\n    }\n    credentials = await credentialsProvider.get(credentials, cancellationToken);\n    try {\n      return await cancellableFetchOk(\n          typeof input === 'function' ? input(credentials.credentials) : input,\n          applyCredentials(credentials.credentials, init), transformResponse, cancellationToken);\n    } catch (error) {\n      if (error instanceof HttpError) {\n        if (errorHandler(error, credentials.credentials) === 'refresh') {\n          if (++credentialsAttempt === maxCredentialsAttempts) throw error;\n          continue credentialsLoop;\n        }\n      }\n      throw error;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {fetchWithCredentials} from 'neuroglancer/credentials_provider/http_request';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {cancellableFetchOk, ResponseTransform} from 'neuroglancer/util/http_request';\n\n\n/**\n * OAuth2 token\n */\nexport interface OAuth2Credentials {\n  tokenType: string;\n  accessToken: string;\n  email?: string;\n}\n\nexport function fetchWithOAuth2Credentials<T>(\n    credentialsProvider: CredentialsProvider<OAuth2Credentials>|undefined, input: RequestInfo,\n    init: RequestInit, transformResponse: ResponseTransform<T>,\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  if (credentialsProvider === undefined) {\n    return cancellableFetchOk(input, init, transformResponse, cancellationToken);\n  }\n  return fetchWithCredentials(\n      credentialsProvider, input, init, transformResponse,\n      (credentials, init) => {\n        if (!credentials.accessToken) return init;\n        const headers = new Headers(init.headers);\n        headers.set('Authorization', `${credentials.tokenType} ${credentials.accessToken}`);\n        return {...init, headers};\n      },\n      (error, credentials) => {\n        const {status} = error;\n        if (status === 401) {\n          // 401: Authorization needed.  OAuth2 token may have expired.\n          return 'refresh';\n        } else if (status === 403 && !credentials.accessToken) {\n          // Anonymous access denied.  Request credentials.\n          return 'refresh';\n        }\n        if (error instanceof Error && credentials.email !== undefined) {\n          error.message += `  (Using credentials for ${JSON.stringify(credentials.email)})`;\n        }\n        throw error;\n      },\n      cancellationToken);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {fetchWithOAuth2Credentials, OAuth2Credentials} from 'neuroglancer/credentials_provider/oauth2';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {responseArrayBuffer, responseJson} from 'neuroglancer/util/http_request';\n\nexport type {OAuth2Credentials};\n\nexport type BrainmapsCredentialsProvider = CredentialsProvider<OAuth2Credentials>;\n\n/**\n * Key used for retrieving the CredentialsProvider from a CredentialsManager.\n */\nexport const credentialsKey = 'google-brainmaps';\n\nexport interface BrainmapsInstance {\n  description: string;\n  /**\n   * One or more server URLs to use to connect to the instance.\n   */\n  serverUrl: string;\n}\n\n/**\n * API-related interfaces.\n */\n\nexport interface ChangeSpecPayload {\n  change_stack_id?: string;\n  time_stamp?: number;\n  skip_equivalences?: boolean;\n}\n\nexport interface ChangeStackAwarePayload {\n  change_spec?: ChangeSpecPayload;\n}\n\nexport interface GeometryPayload {\n  corner: string;\n  size: string;\n  scale: number;\n}\n\nexport interface GeometryAwarePayload {\n  geometry: GeometryPayload;\n}\n\nexport interface ImageFormatOptionsPayload {\n  image_format?: 'AUTO'|'JPEG'|'PNG'|'JSON';\n  jpeg_quality?: number;\n  compressed_segmentation_block_size?: string;\n}\n\nexport interface SubvolumePayload extends ChangeStackAwarePayload, GeometryAwarePayload {\n  image_format_options?: ImageFormatOptionsPayload;\n  subvolume_format?: 'RAW'|'SINGLE_IMAGE';\n}\n\nexport interface SkeletonPayload extends ChangeStackAwarePayload {\n  object_id: string;\n}\n\nexport interface MeshFragmentPayload extends ChangeStackAwarePayload {\n  fragment_key: string;\n  object_id: string;\n}\n\nexport interface BatchMeshFragment {\n  object_id: string;\n  fragment_keys: string[];\n}\n\nexport interface BatchMeshFragmentPayload {\n  volume_id: string;\n  mesh_name: string;\n  batches: BatchMeshFragment[];\n}\n\nexport interface HttpCall {\n  method: 'GET'|'POST';\n  path: string;\n  payload?: string;\n}\n\nexport function makeRequest(\n    instance: BrainmapsInstance, credentialsProvider: BrainmapsCredentialsProvider,\n    httpCall: HttpCall&{responseType: 'arraybuffer'},\n    cancellationToken?: CancellationToken): Promise<ArrayBuffer>;\nexport function makeRequest(\n    instance: BrainmapsInstance, credentialsProvider: BrainmapsCredentialsProvider,\n    httpCall: HttpCall&{responseType: 'json'}, cancellationToken?: CancellationToken): Promise<any>;\n\nexport function makeRequest(\n    instance: BrainmapsInstance, credentialsProvider: BrainmapsCredentialsProvider,\n    httpCall: HttpCall&{responseType: XMLHttpRequestResponseType},\n    cancellationToken: CancellationToken = uncancelableToken): any {\n  return fetchWithOAuth2Credentials(\n      credentialsProvider, `${instance.serverUrl}${httpCall.path}`,\n      {method: httpCall.method, body: httpCall.payload},\n      httpCall.responseType === 'json' ? responseJson : responseArrayBuffer, cancellationToken);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BrainmapsInstance} from 'neuroglancer/datasource/brainmaps/api';\nimport {vec3} from 'neuroglancer/util/geom';\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  JPEG,\n  COMPRESSED_SEGMENTATION\n}\n\nexport class ChangeSpec {\n  changeStackId: string;\n  /**\n   * Apply changes prior to this timestamp (in milliseconds since epoch).  If 0, no changes should\n   * be applied.  If negative, all changes should be applied.\n   */\n  timeStamp?: number;\n  skipEquivalences?: boolean;\n}\n\nexport class VolumeSourceParameters {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  scaleIndex: number;\n  encoding: VolumeChunkEncoding;\n  jpegQuality: number|undefined;\n  changeSpec: ChangeSpec|undefined;\n\n  static RPC_ID = 'brainmaps/VolumeChunkSource';\n}\n\nexport interface SingleMeshInfo {\n  name: string;\n  type: string;\n}\n\nexport interface MultiscaleMeshLOD {\n  info: SingleMeshInfo;\n  scale: number;\n\n  /**\n   * Shape of the chunk for this level of detail, as a multiple of the base chunk shape.\n   */\n  relativeBlockShape: vec3;\n\n  /**\n   * Size of chunk grid, in chunks.\n   */\n  gridShape: Uint32Array;\n}\n\nexport interface MultiscaleMeshInfo {\n  /**\n   * Prefix\n   */\n  key: string;\n\n  /**\n   * Chunk shape in spatial units (nm) for lod 0.\n   */\n  chunkShape: vec3;\n\n  lods: MultiscaleMeshLOD[];\n}\n\nexport class MultiscaleMeshSourceParameters {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  info: MultiscaleMeshInfo;\n  changeSpec: ChangeSpec|undefined;\n\n  static RPC_ID = 'brainmaps/MultiscaleMeshSource';\n}\n\nexport class MeshSourceParameters  {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  meshName: string;\n  changeSpec: ChangeSpec|undefined;\n  \n  static RPC_ID = 'brainmaps/MeshSource';\n}\n\nexport class SkeletonSourceParameters  {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  meshName: string;\n  changeSpec: ChangeSpec|undefined;\n  \n  static RPC_ID = 'brainmaps/SkeletonSource';\n}\n\nexport class AnnotationSourceParameters {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  changestack: string;\n  upperVoxelBound: Float32Array;\n\n  static RPC_ID = 'brainmaps/Annotation';\n}\n\nexport class AnnotationSpatialIndexSourceParameters {\n  instance: BrainmapsInstance;\n  volumeId: string;\n  changestack: string;\n\n  static RPC_ID = 'brainmaps/AnnotationSpatialIndex';\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const MESH_LAYER_RPC_ID = 'mesh/MeshLayer';\nexport const MULTISCALE_MESH_LAYER_RPC_ID = 'mesh/MultiscaleMeshLayer';\nexport const FRAGMENT_SOURCE_RPC_ID = 'mesh/FragmentSource';\n\nexport const MULTISCALE_FRAGMENT_SOURCE_RPC_ID = 'mesh/MultiscaleFragmentSource';\n\nexport type EncodedVertexPositions = Float32Array|Uint32Array|Uint16Array;\nexport type MeshVertexIndices = Uint16Array|Uint32Array;\nexport type OctahedronVertexNormals = Uint8Array;\n\nexport interface EncodedMeshData {\n  vertexPositions: EncodedVertexPositions;\n  vertexNormals: OctahedronVertexNormals;\n  indices: MeshVertexIndices;\n  strips: boolean;\n}\n\nexport interface MultiscaleFragmentFormat {\n  /**\n   * If `true`, vertex positions are specified relative to the fragment bounds, meaning (0, 0, 0) is\n   * the start corner of the fragment and (1, 1, 1) is the end corner.\n   *\n   * If `false`, vertex positions are in \"model\" coordinates.\n   */\n  fragmentRelativeVertices: boolean;\n\n  vertexPositionFormat: VertexPositionFormat;\n}\n\nexport enum VertexPositionFormat {\n  float32,\n  uint10,\n  uint16,\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport function getOctreeChildIndex(x: number, y: number, z: number) {\n  return (x & 1) | ((y << 1) & 2) | ((z << 2) & 4);\n}\n\n/**\n * Decodes a \"compressed\" 3-d morton index.\n *\n * Decoded bit `i` of `x`, `y`, and `z` is at bit `i + min(i, yBits) + min(i, zBits)`, `i + min(i +\n * 1, xBits) + min(i, zBits)`, and `i + min(i + 1, xBits) + min(i + 1, zBits)` of `zindex`,\n * respectively, for `i` in `[0, xBits)`, `[0, yBits)`, `[0, zBits)`, respectively.\n */\nexport function decodeZIndexCompressed(\n    zindex: Uint64, xBits: number, yBits: number, zBits: number): Uint32Array {\n  const maxCoordBits = Math.max(xBits, yBits, zBits);\n  let inputBit = 0;\n  let inputValue = zindex.low;\n  let x = 0, y = 0, z = 0;\n  for (let coordBit = 0; coordBit < maxCoordBits; ++coordBit) {\n    if (coordBit < xBits) {\n      const bit = (inputValue >>> inputBit) & 1;\n      x |= (bit << coordBit);\n      if (inputBit === 31) {\n        inputBit = 0;\n        inputValue = zindex.high;\n      } else {\n        ++inputBit;\n      }\n    }\n    if (coordBit < yBits) {\n      const bit = (inputValue >>> inputBit) & 1;\n      y |= (bit << coordBit);\n      if (inputBit === 31) {\n        inputBit = 0;\n        inputValue = zindex.high;\n      } else {\n        ++inputBit;\n      }\n    }\n    if (coordBit < zBits) {\n      const bit = (inputValue >>> inputBit) & 1;\n      z |= (bit << coordBit);\n      if (inputBit === 31) {\n        inputBit = 0;\n        inputValue = zindex.high;\n      } else {\n        ++inputBit;\n      }\n    }\n  }\n  return Uint32Array.of(x, y, z);\n}\n\nexport function encodeZIndexCompressed3d(\n    zindex: Uint64, xBits: number, yBits: number, zBits: number, x: number, y: number,\n    z: number): Uint64 {\n  const maxBits = Math.max(xBits, yBits, zBits);\n  let outputBit = 0;\n  let outputNum = 0;\n  let isHigh = false;\n  function writeBit(b: number): void {\n    outputNum |= (b & 1) << outputBit;\n    if (++outputBit === 32) {\n      zindex.low = (outputNum >>> 0);\n      outputNum = 0;\n      outputBit = 0;\n      isHigh = true;\n    }\n  }\n  for (let bit = 0; bit < maxBits; ++bit) {\n    if (bit < xBits) {\n      writeBit((x >> bit) & 1);\n    }\n    if (bit < yBits) {\n      writeBit((y >> bit) & 1);\n    }\n    if (bit < zBits) {\n      writeBit((z >> bit) & 1);\n    }\n  }\n  if (isHigh) {\n    zindex.high = (outputNum >>> 0);\n  } else {\n    zindex.high = 0;\n    zindex.low = (outputNum >>> 0);\n  }\n  return zindex;\n}\n\nexport function encodeZIndexCompressed(\n    zindex: Uint64, position: TypedArray, shape: TypedArray): Uint64 {\n  let outputBit = 0;\n  const rank = position.length;\n  let outputNum = 0;\n  let isHigh = false;\n  function writeBit(b: number): void {\n    outputNum |= (b & 1) << outputBit;\n    if (++outputBit === 32) {\n      zindex.low = (outputNum >>> 0);\n      outputNum = 0;\n      outputBit = 0;\n      isHigh = true;\n    }\n  }\n\n  for (let bit = 0; bit < 32; ++bit) {\n    for (let dim = 0; dim < rank; ++dim) {\n      if ((shape[dim] - 1) >>> bit) {\n        writeBit(position[dim] >>> bit);\n      }\n    }\n  }\n  if (isHigh) {\n    zindex.high = (outputNum >>> 0);\n  } else {\n    zindex.high = 0;\n    zindex.low = (outputNum >>> 0);\n  }\n  return zindex;\n}\n\nfunction lessMsb(a: number, b: number) {\n  return a < b && a < (a ^ b);\n}\n\n/**\n * Returns `true` if `(x0, y0, z0)` occurs before `(x1, y1, z1)` in Z-curve order.\n */\nexport function zorder3LessThan(\n    x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): boolean {\n  let mostSignificant0 = z0, mostSignificant1 = z1;\n\n  if (lessMsb(mostSignificant0 ^ mostSignificant1, y0 ^ y1)) {\n    mostSignificant0 = y0;\n    mostSignificant1 = y1;\n  }\n\n  if (lessMsb(mostSignificant0 ^ mostSignificant1, x0 ^ x1)) {\n    mostSignificant0 = x0;\n    mostSignificant1 = x1;\n  }\n\n  return mostSignificant0 < mostSignificant1;\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isAABBVisible, mat4, vec3} from 'neuroglancer/util/geom';\nimport {getOctreeChildIndex} from 'neuroglancer/util/zorder';\n\nconst DEBUG_CHUNKS_TO_DRAW = false;\n\nexport interface MultiscaleMeshManifest {\n  /**\n   * Size of finest-resolution (base) chunk in object coordinates.\n   */\n  chunkShape: vec3;\n\n  /**\n   * Starting corner position of (0, 0, 0) chunk in object coordinates.\n   */\n  chunkGridSpatialOrigin: vec3;\n\n  /**\n   * Axis-aligned bounding box lower bound of object in object coordinates to use for clipping and\n   * level-of-detail calculations.\n   */\n  clipLowerBound: vec3;\n\n  /**\n   * Axis-aligned bounding box upper bound of object in object coordinates to use for clipping and\n   * level-of-detail calculations.\n   */\n  clipUpperBound: vec3;\n\n  /**\n   * Specifies the number of levels of detail (as `lodScales.length`), and the resolution in object\n   * coordinates for each level of detail.  If `lodScales[lod] === 0`, then level-of-detail `lod`\n   * does not exist.\n   *\n   * Level of detail `0` is the finest resolution.\n   *\n   * The non-zero values must be non-decreasing.\n   *\n   * For each chunk, the chosen `lod` is the largest value such that\n   * `lodScales[lod] <= detailCutoff * pixelSize`, where `pixelSize` is the maximum spatial distance\n   * spanned by a single viewport pixel within the projected image of the chunk.\n   */\n  lodScales: Float32Array;\n\n  /**\n   * C order `[numLods, 3]` array specifying the xyz vertex position offset in object coordinates\n   * for each level of detail.\n   */\n  vertexOffsets: Float32Array;\n\n  /**\n   * Row-major `[n, 5]` array where each row is of the form `[x, y, z, start, end_and_empty]`, where\n   * `x`, `y`, and `z` are the chunk grid coordinates of the entry at a particular level of detail.\n   * Row `n-1` corresponds to level of detail `lodScales.length - 1`, the root of the octree.  Given\n   * a row corresponding to an octree node at level of detail `lod`, bits `start` specifies the row\n   * number of the first child octree node at level of detail `lod-1`, and bits `[0,30]` of\n   * `end_and_empty` specify one past the row number of the last child octree node.  Bit `31` of\n   * `end_and_empty` is set to `1` if the mesh for the octree node is empty and should not be\n   * requested/rendered.\n   */\n  octree: Uint32Array;\n}\n\n/**\n * @param detailCutoff Factor by which the spatial resolution of the mesh may be worse than the\n *     spatial resolution of a single viewport pixel.  For example, a value of 10 means that if a\n *     given portion of the object will be rendered such that a pixel corresponds to 50 nm, then a\n *     mesh level of detail down to 500 nm will be requested for that portion of the object.\n */\nexport function getDesiredMultiscaleMeshChunks(\n    manifest: MultiscaleMeshManifest, modelViewProjection: mat4, clippingPlanes: Float32Array,\n    detailCutoff: number, viewportWidth: number, viewportHeight: number,\n    callback: (lod: number, row: number, renderScale: number, empty: number) => void) {\n  const {octree, lodScales, chunkGridSpatialOrigin, chunkShape} = manifest;\n  const maxLod = lodScales.length - 1;\n  const m00 = modelViewProjection[0], m01 = modelViewProjection[4], m02 = modelViewProjection[8],\n        m10 = modelViewProjection[1], m11 = modelViewProjection[5], m12 = modelViewProjection[9],\n        m30 = modelViewProjection[3], m31 = modelViewProjection[7], m32 = modelViewProjection[11],\n        m33 = modelViewProjection[15];\n\n  const minWXcoeff = m30 > 0 ? 0 : 1;\n  const minWYcoeff = m31 > 0 ? 0 : 1;\n  const minWZcoeff = m32 > 0 ? 0 : 1;\n\n\n  const nearA = clippingPlanes[4 * 4], nearB = clippingPlanes[4 * 4 + 1],\n        nearC = clippingPlanes[4 * 4 + 2], nearD = clippingPlanes[4 * 4 + 3];\n\n  function getPointW(x: number, y: number, z: number) {\n    return m30 * x + m31 * y + m32 * z + m33;\n  }\n\n  function getBoxW(\n      xLower: number, yLower: number, zLower: number, xUpper: number, yUpper: number,\n      zUpper: number) {\n    return getPointW(\n        xLower + minWXcoeff * (xUpper - xLower), yLower + minWYcoeff * (yUpper - yLower),\n        zLower + minWZcoeff * (zUpper - zLower));\n  }\n\n  /**\n   * Minimum value of w within clipping frustrum (under the assumption that the minimum value occurs\n   * on the near clipping plane).\n   */\n  const minWClip = getPointW(-nearD * nearA, -nearD * nearB, -nearD * nearC);\n\n  const objectXLower = manifest.clipLowerBound[0], objectYLower = manifest.clipLowerBound[1],\n        objectZLower = manifest.clipLowerBound[2];\n  const objectXUpper = manifest.clipUpperBound[0], objectYUpper = manifest.clipUpperBound[1],\n        objectZUpper = manifest.clipUpperBound[2];\n\n  const xScale = Math.sqrt((m00 * viewportWidth) ** 2 + (m10 * viewportHeight) ** 2);\n  const yScale = Math.sqrt((m01 * viewportWidth) ** 2 + (m11 * viewportHeight) ** 2);\n  const zScale = Math.sqrt((m02 * viewportWidth) ** 2 + (m12 * viewportHeight) ** 2);\n\n  const scaleFactor = Math.max(xScale, yScale, zScale);\n\n  function handleChunk(lod: number, row: number, priorLodScale: number) {\n    const size = 1 << lod;\n    const rowOffset = row * 5;\n    const gridX = octree[rowOffset], gridY = octree[rowOffset + 1], gridZ = octree[rowOffset + 2],\n          childBegin = octree[rowOffset + 3], childEndAndEmpty = octree[rowOffset + 4];\n    let xLower = gridX * size * chunkShape[0] + chunkGridSpatialOrigin[0],\n        yLower = gridY * size * chunkShape[1] + chunkGridSpatialOrigin[1],\n        zLower = gridZ * size * chunkShape[2] + chunkGridSpatialOrigin[2];\n    let xUpper = xLower + size * chunkShape[0], yUpper = yLower + size * chunkShape[1],\n        zUpper = zLower + size * chunkShape[2];\n    xLower = Math.max(xLower, objectXLower);\n    yLower = Math.max(yLower, objectYLower);\n    zLower = Math.max(zLower, objectZLower);\n    xUpper = Math.min(xUpper, objectXUpper);\n    yUpper = Math.min(yUpper, objectYUpper);\n    zUpper = Math.min(zUpper, objectZUpper);\n\n    if (isAABBVisible(xLower, yLower, zLower, xUpper, yUpper, zUpper, clippingPlanes)) {\n      const minW = Math.max(minWClip, getBoxW(xLower, yLower, zLower, xUpper, yUpper, zUpper));\n      const pixelSize = minW / scaleFactor;\n\n      if (priorLodScale === 0 || pixelSize * detailCutoff < priorLodScale) {\n        const lodScale = lodScales[lod];\n        if (lodScale !== 0) {\n          callback(lod, row, lodScale / pixelSize, (childEndAndEmpty >>> 31));\n        }\n\n        if (lod > 0 && (lodScale === 0 || pixelSize * detailCutoff < lodScale)) {\n          const nextPriorLodScale = lodScale === 0 ? priorLodScale : lodScale;\n          const childEnd = (childEndAndEmpty & 0x7FFFFFFF) >>> 0;\n          for (let childRow = childBegin; childRow < childEnd; ++childRow) {\n            handleChunk(lod - 1, childRow, nextPriorLodScale);\n          }\n        }\n      }\n    }\n  }\n  handleChunk(maxLod, octree.length / 5 - 1, 0);\n}\n\nexport function getMultiscaleChunksToDraw(\n    manifest: MultiscaleMeshManifest, modelViewProjection: mat4, clippingPlanes: Float32Array,\n    detailCutoff: number, viewportWidth: number, viewportHeight: number,\n    hasChunk: (lod: number, row: number, renderScale: number) => boolean,\n    callback: (\n        lod: number, row: number, subChunkBegin: number, subChunkEnd: number,\n        renderScale: number) => void) {\n  const {lodScales} = manifest;\n  let maxLod = 0;\n  while (maxLod + 1 < lodScales.length && lodScales[maxLod + 1] !== 0) {\n    ++maxLod;\n  }\n\n  const stackEntryStride = 3;\n\n  // [row, parentSubChunkIndex, renderScale]\n  const stack: number[] = [];\n  let stackDepth = 0;\n  let priorSubChunkIndex = 0;\n  function emitChunksUpTo(targetStackIndex: number, subChunkIndex: number) {\n    if (DEBUG_CHUNKS_TO_DRAW) {\n      console.log(`emitChunksUpTo: stackDepth=${stackDepth}, targetStackIndex=${\n          targetStackIndex}, subChunkIndex=${subChunkIndex}, priorSubChunkIndex=${\n          priorSubChunkIndex}`);\n    }\n    while (true) {\n      if (stackDepth === 0) return;\n\n      // Finish last chunk of last (finest) lod.\n      const stackIndex = stackDepth - 1;\n      const entryLod = maxLod - stackIndex;\n      const entryRow = stack[stackIndex * stackEntryStride];\n      const numSubChunks = entryLod === 0 ? 1 : 8;\n      const entrySubChunkIndex = stack[stackIndex * stackEntryStride + 1];\n      const entryRenderScale = stack[stackIndex * stackEntryStride + 2];\n      if (targetStackIndex === stackDepth) {\n        const endSubChunk = subChunkIndex & (numSubChunks - 1);\n\n        if (priorSubChunkIndex !== endSubChunk && entryRow !== -1) {\n          if (DEBUG_CHUNKS_TO_DRAW) {\n            console.log(`  drawing chunk because priorSubChunkIndex (${\n                priorSubChunkIndex}) != endSubChunk (${endSubChunk})`);\n          }\n          callback(entryLod, entryRow, priorSubChunkIndex, endSubChunk, entryRenderScale);\n        }\n        priorSubChunkIndex = endSubChunk + 1;\n        return;\n      }\n      if (priorSubChunkIndex !== numSubChunks && entryRow !== -1) {\n        callback(entryLod, entryRow, priorSubChunkIndex, numSubChunks, entryRenderScale);\n      }\n      priorSubChunkIndex = entrySubChunkIndex + 1;\n      --stackDepth;\n    }\n  }\n\n  let priorMissingLod = 0;\n  if (DEBUG_CHUNKS_TO_DRAW) {\n    console.log('');\n    console.log('Starting to draw');\n  }\n  const {octree} = manifest;\n  getDesiredMultiscaleMeshChunks(\n      manifest, modelViewProjection, clippingPlanes, detailCutoff, viewportWidth, viewportHeight,\n      (lod, row, renderScale, empty) => {\n        if (!empty && !hasChunk(lod, row, renderScale)) {\n          priorMissingLod = Math.max(lod, priorMissingLod);\n          return;\n        }\n        if (lod < priorMissingLod) {\n          // A parent chunk (containing chunk at coarser level-of-detail) is missing.  We can't draw\n          // chunks at this level-of-detail because we would not be able to fill in gaps.\n          return;\n        }\n        priorMissingLod = 0;\n        const rowOffset = row * 5;\n        const x = octree[rowOffset], y = octree[rowOffset + 1], z = octree[rowOffset + 2];\n        const subChunkIndex = getOctreeChildIndex(x, y, z);\n        const stackIndex = maxLod - lod;\n        emitChunksUpTo(stackIndex, subChunkIndex);\n        const stackOffset = stackIndex * stackEntryStride;\n        stack[stackOffset] = empty ? -1 : row;\n        stack[stackOffset + 1] = subChunkIndex;\n        stack[stackOffset + 2] = renderScale;\n        if (DEBUG_CHUNKS_TO_DRAW) {\n          console.log(`Adding to stack: lod=${lod}, row=${stack[stackOffset]}, subChunkIndex=${\n              subChunkIndex}`);\n        }\n        priorSubChunkIndex = 0;\n        stackDepth = stackIndex + 1;\n      });\n\n  emitChunksUpTo(0, 0);\n}\n\nexport function validateOctree(octree: Uint32Array) {\n  if (octree.length % 5 !== 0) {\n    throw new Error('Invalid length');\n  }\n  const numNodes = octree.length / 5;\n  const seenNodes = new Set<number>();\n  function exploreNode(node: number) {\n    if (seenNodes.has(node)) {\n      throw new Error('Previously seen node');\n    }\n    seenNodes.add(node);\n    if (node < 0 || node >= numNodes) {\n      throw new Error('Invalid node reference');\n    }\n    const x = octree[node * 5], y = octree[node * 5 + 1], z = octree[node * 5 + 2],\n          beginChild = octree[node * 5 + 3], endChild = octree[node * 5 + 4];\n    if (beginChild < 0 || endChild < 0 || endChild < beginChild || endChild > numNodes ||\n        beginChild + 8 < endChild) {\n      throw new Error('Invalid child references');\n    }\n    for (let child = beginChild; child < endChild; ++child) {\n      const childX = octree[child * 5], childY = octree[child * 5 + 1],\n            childZ = octree[child * 5 + 2];\n      if ((childX >>> 1) !== x || (childY >>> 1) !== y || (childZ >>> 1) != z) {\n        throw new Error('invalid child');\n      }\n      exploreNode(child);\n    }\n  }\n  if (numNodes === 0) return;\n  exploreNode(numNodes - 1);\n  if (seenNodes.size !== numNodes) {\n    throw new Error('Orphan nodes in octree');\n  }\n}\n\nexport function getMultiscaleFragmentKey(objectKey: string, lod: number, chunkIndex: number) {\n  return `${objectKey}/${lod}:${chunkIndex}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Conversion from independent triangles to triangle strips.\n *\n * http://www.codercorner.com/Strips.htm\n */\n\nimport {hashCombine} from 'neuroglancer/gpu_hash/hash_function';\nimport {MeshVertexIndices} from 'neuroglancer/mesh/base';\n\nconst DEBUG_TIMING = false;\n\n/**\n * Sorts the vertex indices for each triangle in ascending order.\n *\n * This ensures later edge comparisons can be done more efficiently.  This can reverse face\n * orientations, which would normally be a problem, but since we render all faces as double-sided it\n * isn't an issue.\n */\nfunction normalizeTriangleVertexOrder(indices: MeshVertexIndices) {\n  let maxVertex = 0;\n  for (let i = 0, length = indices.length; i < length; i += 3) {\n    let a = indices[i], b = indices[i + 1], c = indices[i + 2];\n    let t: number;\n    if (a > b) {\n      t = a;\n      a = b;\n      b = t;\n    }\n    if (b > c) {\n      t = b;\n      b = c;\n      c = t;\n    }\n    if (a > b) {\n      t = a;\n      a = b;\n      b = t;\n    }\n    indices[i] = a;\n    indices[i + 1] = b;\n    indices[i + 2] = c;\n    if (c > maxVertex) maxVertex = c;\n  }\n  return maxVertex;\n}\n\nlet collisions = 0;\nfunction hashTableInsert(\n    table: Uint32Array, numBuckets: number, value: number, emptyValue: number, hashCode: number,\n    equals: (x: number) => boolean) {\n  const mask = (numBuckets - 1) >>> 0;\n  let bucket = (hashCode & mask) >>> 0;\n  for (let probe = 0; true; ++probe) {\n    const x = table[bucket];\n    if (x === emptyValue) {\n      table[bucket] = value;\n      return value;\n    }\n    if (equals(x)) {\n      return x;\n    }\n    ++collisions;\n    bucket = ((bucket + probe + 1) & mask) >>> 0;\n  }\n}\n\nfunction hashEdge(a: number, b: number) {\n  return hashCombine(hashCombine(0, a), b);\n}\n\n// edgeIndex: 0, 1, 2\n// vertexA:   0  0  1   <-  bit 1\n// vertexB:   1  2  2   <-  1 + bit 1  of (edgeIndex + 1)\n// vertexC:   2  1  0   <-  2 - edgeIndex\n\n// BC         2  2  1\n// BC flipped 0  1  1\n// AC         1  0  0\n// AC flipped 0  0  1\n\n// Lookup table, where the 3 bits starting at (edgeIndex * 3 + flipped * 12) specify the new value\n// of `edgeIndexAndFlipped`.\nconst nextEdgeTable = 0b1_00_0_00_0_01_000_1_01_1_10_0_10;\n\n/**\n * Computes the edge index and flipped state in a triangle strip for the next edge after the given\n * edge.\n *\n * @param edgeIndexAndFlipped Bits 0,1 specify the `edgeIndex` in the range `[0, 2]` corresponding\n *     to the last edge that was traversed.  Bit 2 specifies the `flipped` state.  If `flipped` is\n *     equal to 0, the last two emitted vertices are B and C relative to `edgeIndex`.  If `flipped`\n *     is equal to 1, the last two emitted vertices are A and C relative to `edgeIndex`.\n * @returns The next `edgeIndexAndFlipped` value specifying `nextEdgeIndex` and `nextFlipped`.  If\n *     `flipped == 0`, `nextEdgeIndex` corresponds to the B-C edge relative to `edgeIndex`; if\n *     `flipped == 1`, `nextEdgeIndex` correspond to the A-C edge relative to `edgeIndex`.  The\n *     `nextFlipped` value is equal to 1 iff `vertexCIndex(edgeIndex) ==\n *     vertexAIndex(nextEdgeIndex)`.\n */\nexport function getNextEdge(edgeIndexAndFlipped: number) {\n  return (nextEdgeTable >>> (edgeIndexAndFlipped * 3)) & 7;\n}\n\nexport function getBaseIndex(entry: number) {\n  return (entry >>> 2) * 3;\n}\n\nexport function getEdgeIndex(entry: number) {\n  return entry & 3;\n}\n\n/**\n * Computes the first vertex offset for the given edge.\n *\n * @returns `[0, 0, 1][edgeIndex]`\n */\nexport function vertexAIndex(edgeIndex: number) {\n  return edgeIndex >>> 1;\n}\n\n/**\n * Computes the second vertex offset for the given edge.\n *\n * @returns `[1, 2, 2][edgeIndex]`\n */\nexport function vertexBIndex(edgeIndex: number) {\n  return 1 + ((edgeIndex + 1) >>> 1);\n}\n\n/**\n * Computes the opposite vertex offset for the given edge.\n *\n * @returns `[2, 1, 0][edgeIndex]`\n */\nexport function vertexCIndex(edgeIndex: number) {\n  return 2 - edgeIndex;\n}\n\nexport function getEdgeMapSize(numIndices: number) {\n  const numEdges = numIndices;\n\n  // Choose quadratic probing hash table size to be the smallest power of 2 greater than `numEdges`.\n  const edgeMapSize = 2 ** Math.ceil(Math.log2(numEdges));\n  return edgeMapSize * 4;\n}\n\nfunction computeTriangleAdjacencies(\n    triangleAdjacencies: Uint32Array, indices: MeshVertexIndices,\n    edgeMap: Uint32Array): Uint32Array {\n  const numTriangles = indices.length / 3;\n  // Row-major array of shape `[numTriangles, 3]` specifying the triangles adjacent to each\n  // triangle.  The triangle index `i` corresponds to elements `[i * 3, (i + 1) * 3)` of the\n  // `indices` array.  For each triangle, columns 0 to 2 are the indices of the triangles adjacent\n  // to edge 0-1, edge 0-2, and edge 1-2, respectively.\n\n  const edgeMapSize = edgeMap.length;\n  const emptyEntry = 0xFFFFFFFF;\n  triangleAdjacencies.fill(emptyEntry);\n  edgeMap.fill(emptyEntry);\n\n  // Insert edges\n  for (let triangle = 0; triangle < numTriangles; ++triangle) {\n    const baseIndex = triangle * 3;\n    for (let edgeIndex = 0; edgeIndex < 3; ++edgeIndex) {\n      const vertexA0 = indices[baseIndex + vertexAIndex(edgeIndex)];\n      const vertexB0 = indices[baseIndex + vertexBIndex(edgeIndex)];\n      const newEntry = (triangle << 2) | edgeIndex;\n      const existingEntry = hashTableInsert(\n          edgeMap, edgeMapSize, newEntry, emptyEntry, hashEdge(vertexA0, vertexB0), x => {\n            const otherBaseIndex = getBaseIndex(x);\n            const otherEdgeIndex = getEdgeIndex(x);\n            const vertexA1 = indices[otherBaseIndex + vertexAIndex(otherEdgeIndex)];\n            const vertexB1 = indices[otherBaseIndex + vertexBIndex(otherEdgeIndex)];\n            // console.log('checking equality', vertexA0, vertexA1, vertexB0, vertexB1);\n            return vertexA0 === vertexA1 && vertexB0 === vertexB1;\n          });\n      if (existingEntry !== newEntry) {\n        const otherBaseIndex = getBaseIndex(existingEntry);\n        const otherEdgeIndex = getEdgeIndex(existingEntry);\n        triangleAdjacencies[otherBaseIndex + otherEdgeIndex] = newEntry;\n        triangleAdjacencies[baseIndex + edgeIndex] = existingEntry;\n      }\n    }\n  }\n\n  return triangleAdjacencies;\n}\n\nfunction emitTriangleStrips(\n    indices: MeshVertexIndices, triangleAdjacencies: Uint32Array, output: MeshVertexIndices,\n    outputIndex: number): number {\n  const invalidVertex = ~0 >>> (32 - 8 * output.BYTES_PER_ELEMENT);\n  const numIndices = indices.length;\n  const numTriangles = numIndices / 3;\n  const emptyEntry = 0xFFFFFFFF;\n\n  // Extract strips\n  startNewStrip: for (let triangle = 0; triangle < numTriangles; ++triangle) {\n    let baseIndex = triangle * 3;\n    if (indices[baseIndex] === invalidVertex) {\n      // Triangle was already emitted.\n      continue;\n    }\n    for (let edgeIndex = 0; edgeIndex < 3; ++edgeIndex) {\n      let entry = triangleAdjacencies[baseIndex + edgeIndex];\n      if (entry === emptyEntry) continue;\n      let otherBaseIndex = getBaseIndex(entry);\n      if (indices[otherBaseIndex] === invalidVertex) continue;\n      let otherEdgeIndex = getEdgeIndex(entry);\n      output[outputIndex++] = indices[baseIndex + vertexCIndex(edgeIndex)];\n      output[outputIndex++] = indices[baseIndex + vertexAIndex(edgeIndex)];\n      output[outputIndex++] = indices[baseIndex + vertexBIndex(edgeIndex)];\n\n      let edgeIndexAndFlipped = otherEdgeIndex;\n\n      while (true) {\n        indices[baseIndex] = invalidVertex;\n        baseIndex = otherBaseIndex;\n        output[outputIndex++] = indices[baseIndex + vertexCIndex(edgeIndexAndFlipped & 3)];\n\n        edgeIndexAndFlipped = getNextEdge(edgeIndexAndFlipped);\n\n        entry = triangleAdjacencies[baseIndex + (edgeIndexAndFlipped & 3)];\n        if (entry === emptyEntry ||\n            indices[(otherBaseIndex = getBaseIndex(entry))] === invalidVertex) {\n          // console.log(stripLength);\n          // End of strip.  Emit restart index.\n          output[outputIndex++] = invalidVertex;\n          indices[baseIndex] = invalidVertex;\n          continue startNewStrip;\n        }\n        edgeIndexAndFlipped = getEdgeIndex(entry) | (edgeIndexAndFlipped & 4);\n      }\n    }\n    // Emit isolated triangle.\n    output[outputIndex++] = indices[baseIndex];\n    output[outputIndex++] = indices[baseIndex + 1];\n    output[outputIndex++] = indices[baseIndex + 2];\n    indices[baseIndex] = invalidVertex;\n    output[outputIndex++] = invalidVertex;\n  }\n  return outputIndex;\n}\n\nexport function computeTriangleStrips<T extends MeshVertexIndices>(\n    indices: T, subChunkOffsets?: Uint32Array): MeshVertexIndices {\n  if (indices.length === 0) return indices;\n  collisions = 0;\n  if (subChunkOffsets === undefined) {\n    subChunkOffsets = Uint32Array.of(0, indices.length);\n  }\n  let adjacenciesElapsed = 0;\n  let emitElapsed = 0;\n  let startTime = 0, midTime = 0, endTime = 0;\n\n  const maxVertexIndex = normalizeTriangleVertexOrder(indices);\n  const outputBufferSize = indices.length / 3 * 4;\n  const output = maxVertexIndex >= 65535 ? new Uint32Array(outputBufferSize) :\n                                           new Uint16Array(outputBufferSize);\n  let outputIndex = 0;\n\n  let maxSubChunkIndices = 0;\n  const numSubChunks = subChunkOffsets.length - 1;\n  for (let subChunk = 0; subChunk < numSubChunks; ++subChunk) {\n    maxSubChunkIndices =\n        Math.max(maxSubChunkIndices, subChunkOffsets[subChunk + 1] - subChunkOffsets[subChunk]);\n  }\n\n  const triangleAdjacencies = new Uint32Array(maxSubChunkIndices);\n  const edgeMap = new Uint32Array(getEdgeMapSize(maxSubChunkIndices));\n\n  let subChunkOffset = subChunkOffsets[0];\n  for (let subChunk = 0; subChunk < numSubChunks; ++subChunk) {\n    subChunkOffsets[subChunk] = outputIndex;\n    const subChunkEnd = subChunkOffsets[subChunk + 1];\n    const subIndices = indices.subarray(subChunkOffset, subChunkEnd);\n    if (DEBUG_TIMING) startTime = Date.now();\n    computeTriangleAdjacencies(triangleAdjacencies, subIndices, edgeMap);\n    if (DEBUG_TIMING) midTime = Date.now();\n    outputIndex = emitTriangleStrips(subIndices, triangleAdjacencies, output, outputIndex);\n    if (DEBUG_TIMING) {\n      endTime = Date.now();\n      adjacenciesElapsed += (midTime - startTime);\n      emitElapsed += (endTime - midTime);\n    }\n    subChunkOffset = subChunkEnd;\n  }\n  --outputIndex;\n  subChunkOffsets[numSubChunks] = outputIndex;\n  const shrunkOutput: T = new (output.constructor as any)(outputIndex);\n  shrunkOutput.set(output.subarray(0, outputIndex));\n  if (DEBUG_TIMING) {\n    console.log(`reduced from ${indices.byteLength}(${indices.BYTES_PER_ELEMENT}) -> ${\n        shrunkOutput.byteLength}(${shrunkOutput.BYTES_PER_ELEMENT}): adj=${\n        adjacenciesElapsed}, emit=${emitElapsed}, ${collisions}/${indices.length} collisions`);\n  }\n  return shrunkOutput;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Chunk, ChunkSource, withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {EncodedMeshData, EncodedVertexPositions, FRAGMENT_SOURCE_RPC_ID, MESH_LAYER_RPC_ID, MeshVertexIndices, MULTISCALE_FRAGMENT_SOURCE_RPC_ID, MULTISCALE_MESH_LAYER_RPC_ID, MultiscaleFragmentFormat, VertexPositionFormat} from 'neuroglancer/mesh/base';\nimport {getDesiredMultiscaleMeshChunks, MultiscaleMeshManifest} from 'neuroglancer/mesh/multiscale';\nimport {computeTriangleStrips} from 'neuroglancer/mesh/triangle_strips';\nimport {PerspectiveViewBackend, PerspectiveViewRenderLayerBackend} from 'neuroglancer/perspective_view/backend';\nimport {get3dModelToDisplaySpaceMatrix} from 'neuroglancer/render_coordinate_transform';\nimport {RenderLayerBackendAttachment} from 'neuroglancer/render_layer_backend';\nimport {withSegmentationLayerBackendState} from 'neuroglancer/segmentation_display_state/backend';\nimport {getObjectKey} from 'neuroglancer/segmentation_display_state/base';\nimport {forEachVisibleSegment} from 'neuroglancer/segmentation_display_state/base';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {getFrustrumPlanes, mat4, vec3} from 'neuroglancer/util/geom';\nimport {verifyObject, verifyObjectProperty, verifyStringArray} from 'neuroglancer/util/json';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {zorder3LessThan} from 'neuroglancer/util/zorder';\nimport {getBasePriority, getPriorityTier} from 'neuroglancer/visibility_priority/backend';\nimport {withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerSharedObject, RPC} from 'neuroglancer/worker_rpc';\n\nconst MESH_OBJECT_MANIFEST_CHUNK_PRIORITY = 100;\nconst MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY = 50;\n\nconst CONVERT_TO_TRIANGLE_STRIPS = false;\n\nexport type FragmentId = string;\n\n// Chunk that contains the list of fragments that make up a single object.\nexport class ManifestChunk extends Chunk {\n  objectId = new Uint64();\n  fragmentIds: FragmentId[]|null;\n\n  constructor() {\n    super();\n  }\n  // We can't save a reference to objectId, because it may be a temporary\n  // object.\n  initializeManifestChunk(key: string, objectId: Uint64) {\n    super.initialize(key);\n    this.objectId.assign(objectId);\n  }\n\n  freeSystemMemory() {\n    this.fragmentIds = null;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg.fragmentIds = this.fragmentIds;\n  }\n\n  downloadSucceeded() {\n    // We can't easily determine the memory usage of the JSON manifest.  Just use 100 bytes as a\n    // default value.\n    this.systemMemoryBytes = 100;\n    this.gpuMemoryBytes = 0;\n    super.downloadSucceeded();\n    if (this.priorityTier < ChunkPriorityTier.RECENT) {\n      this.source!.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  }\n\n  toString() {\n    return this.objectId.toString();\n  }\n}\n\nexport interface RawMeshData {\n  vertexPositions: Float32Array|Uint32Array;\n  indices: MeshVertexIndices;\n}\n\nexport interface RawPartitionedMeshData extends RawMeshData {\n  subChunkOffsets: Uint32Array;\n}\n\nfunction serializeMeshData(data: EncodedMeshData, msg: any, transfers: any[]) {\n  const {vertexPositions, indices, vertexNormals, strips} = data;\n  msg['vertexPositions'] = vertexPositions;\n  msg['indices'] = indices;\n  msg['strips'] = strips;\n  msg['vertexNormals'] = vertexNormals;\n  let vertexPositionsBuffer = vertexPositions!.buffer;\n  transfers.push(vertexPositionsBuffer);\n  let indicesBuffer = indices!.buffer;\n  if (indicesBuffer !== vertexPositionsBuffer) {\n    transfers.push(indicesBuffer);\n  }\n  transfers.push(vertexNormals!.buffer);\n}\n\nfunction getMeshDataSize(data: EncodedMeshData) {\n  let {vertexPositions, indices, vertexNormals} = data;\n  return vertexPositions!.byteLength + indices!.byteLength + vertexNormals!.byteLength;\n}\n\n/**\n * Chunk that contains the mesh for a single fragment of a single object.\n */\nexport class FragmentChunk extends Chunk {\n  manifestChunk: ManifestChunk|null = null;\n  fragmentId: FragmentId|null = null;\n  meshData: EncodedMeshData|null = null;\n  constructor() {\n    super();\n  }\n  initializeFragmentChunk(key: string, manifestChunk: ManifestChunk, fragmentId: FragmentId) {\n    super.initialize(key);\n    this.manifestChunk = manifestChunk;\n    this.fragmentId = fragmentId;\n  }\n  freeSystemMemory() {\n    this.manifestChunk = null;\n    this.meshData = null;\n    this.fragmentId = null;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    serializeMeshData(this.meshData!, msg, transfers);\n    this.meshData = null;\n  }\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes = getMeshDataSize(this.meshData!);\n    super.downloadSucceeded();\n  }\n}\n\n/**\n * Assigns chunk.fragmentKeys to response[keysPropertyName].\n *\n * Verifies that response[keysPropertyName] is an array of strings.\n */\nexport function decodeJsonManifestChunk(\n    chunk: ManifestChunk, response: any, keysPropertyName: string) {\n  verifyObject(response);\n  chunk.fragmentIds = verifyObjectProperty(response, keysPropertyName, verifyStringArray);\n}\n\n/**\n * Computes normal vectors for each vertex of a triangular mesh.\n *\n * The normal vector for each triangle with vertices (v0, v1, v2) is computed as the (normalized)\n * cross product of (v1 - v0, v2 - v1).  The normal vector for each vertex is obtained by averaging\n * the normal vector of each of the triangles that contains it.\n *\n * @param positions The vertex positions in [x0, y0, z0, x1, y1, z1, ...] format.\n * @param indices The indices of the triangle vertices.  Each triplet of consecutive values\n *     specifies a triangle.\n */\nexport function computeVertexNormals(\n    positions: Float32Array|Uint8Array|Uint16Array|Uint32Array,\n    indices: Uint8Array|Uint16Array|Uint32Array) {\n  const faceNormal = vec3.create();\n  const v1v0 = vec3.create();\n  const v2v1 = vec3.create();\n  let vertexNormals = new Float32Array(positions.length);\n  let numIndices = indices.length;\n  for (let i = 0; i < numIndices; i += 3) {\n    let i0 = indices[i] * 3, i1 = indices[i + 1] * 3, i2 = indices[i + 2] * 3;\n    for (let j = 0; j < 3; ++j) {\n      v1v0[j] = positions[i1 + j] - positions[i0 + j];\n      v2v1[j] = positions[i2 + j] - positions[i1 + j];\n    }\n    vec3.cross(faceNormal, v1v0, v2v1);\n    vec3.normalize(faceNormal, faceNormal);\n\n    for (let k = 0; k < 3; ++k) {\n      let index = indices[i + k];\n      let offset = index * 3;\n      for (let j = 0; j < 3; ++j) {\n        vertexNormals[offset + j] += faceNormal[j];\n      }\n    }\n  }\n  // Normalize all vertex normals.\n  let numVertices = vertexNormals.length;\n  for (let i = 0; i < numVertices; i += 3) {\n    let vec = <vec3>vertexNormals.subarray(i, i + 3);\n    vec3.normalize(vec, vec);\n  }\n  return vertexNormals;\n}\n\n/**\n * Converts a floating-point number in the range `[-1, 1]` to an integer in the range `[-127, 127]`.\n */\nfunction snorm8(x: number) {\n  return Math.min(Math.max(-127, x * 127 + 0.5), 127) >>> 0;\n}\n\nfunction signNotZero(x: number) {\n  return x < 0 ? -1 : 1;\n}\n\n/**\n * Encodes normal vectors represented as 3x32-bit floating vectors into a 2x8-bit octahedron\n * representation.\n *\n * Zina H. Cigolle, Sam Donow, Daniel Evangelakos, Michael Mara, Morgan McGuire, and Quirin Meyer,\n * Survey of Efficient Representations for Independent Unit Vectors, Journal of Computer Graphics\n * Techniques (JCGT), vol. 3, no. 2, 1-30, 2014\n *\n * Available online http://jcgt.org/published/0003/02/01/\n *\n * @param out[out] Row-major array of shape `[n, 2]` set to octahedron representation.\n * @param normals[in] Row-major array of shape `[n, 3]` specifying unit normal vectors.\n */\nexport function encodeNormals32fx3ToOctahedron8x2(out: Uint8Array, normals: Float32Array) {\n  const length = normals.length;\n  let outIndex = 0;\n  for (let i = 0; i < length; i += 3) {\n    const x = normals[i], y = normals[i + 1], z = normals[i + 2];\n\n    const invL1Norm = 1 / (Math.abs(x) + Math.abs(y) + Math.abs(z));\n\n    if (z < 0) {\n      out[outIndex] = snorm8((1 - Math.abs(y * invL1Norm)) * signNotZero(x));\n      out[outIndex + 1] = snorm8((1 - Math.abs(x * invL1Norm)) * signNotZero(y));\n    } else {\n      out[outIndex] = snorm8(x * invL1Norm);\n      out[outIndex + 1] = snorm8(y * invL1Norm);\n    }\n    outIndex += 2;\n  }\n}\n\n/**\n * Extracts vertex positions and indices of the specified endianness from `data'.\n *\n * The vertexByteOffset specifies the byte offset into `data' of the start of the vertex position\n * data.  The vertex data must consist of verticesPerPrimitive * numVertices 32-bit float values.\n *\n * If indexByteOffset is not specified, it defaults to the end of the vertex position data.  If\n * numPrimitives is not specified, it is assumed that the index data continues until the end of the\n * array.\n */\nexport function decodeVertexPositionsAndIndices(\n    verticesPerPrimitive: number, data: ArrayBuffer, endianness: Endianness,\n    vertexByteOffset: number, numVertices: number, indexByteOffset?: number,\n    numPrimitives?: number): RawMeshData {\n  let vertexPositions = new Float32Array(data, vertexByteOffset, numVertices * 3);\n  convertEndian32(vertexPositions, endianness);\n\n  if (indexByteOffset === undefined) {\n    indexByteOffset = vertexByteOffset + 12 * numVertices;\n  }\n\n  let numIndices: number|undefined;\n  if (numPrimitives !== undefined) {\n    numIndices = numPrimitives * verticesPerPrimitive;\n  }\n\n  // For compatibility with Firefox, length argument must not be undefined.\n  let indices = numIndices === undefined ? new Uint32Array(data, indexByteOffset) :\n                                           new Uint32Array(data, indexByteOffset, numIndices);\n  if (indices.length % verticesPerPrimitive !== 0) {\n    throw new Error(\n        `Number of indices is not a multiple of ${verticesPerPrimitive}: ${indices.length}.`);\n  }\n  convertEndian32(indices, endianness);\n\n  return {vertexPositions, indices};\n}\n\n/**\n * Extracts vertex positions and triangle vertex indices of the specified endianness from `data'.\n *\n * Vertex normals are computed.\n *\n * See decodeVertexPositionsAndIndices above.\n */\nexport function decodeTriangleVertexPositionsAndIndices(\n    data: ArrayBuffer, endianness: Endianness, vertexByteOffset: number, numVertices: number,\n    indexByteOffset?: number, numTriangles?: number) {\n  return decodeVertexPositionsAndIndices(\n      /*verticesPerPrimitive=*/ 3, data, endianness, vertexByteOffset, numVertices, indexByteOffset,\n      numTriangles);\n}\n\nexport interface MeshSource {\n  // TODO(jbms): Move this declaration to class definition below and declare abstract once\n  // TypeScript supports mixins with abstract classes.\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken): Promise<void>;\n}\n\nexport class MeshSource extends ChunkSource {\n  fragmentSource: FragmentSource;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    let fragmentSource = this.fragmentSource =\n        this.registerDisposer(rpc.getRef<FragmentSource>(options['fragmentSource']));\n    fragmentSource.meshSource = this;\n  }\n\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    let chunk = <ManifestChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(ManifestChunk);\n      chunk.initializeManifestChunk(key, objectId);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  getFragmentKey(objectKey: string|null, fragmentId: string) {\n    return {key:`${objectKey}/${fragmentId}`, fragmentId: fragmentId};\n  }\n\n  getFragmentChunk(manifestChunk: ManifestChunk, fragmentId: FragmentId) {\n    const fragmentSource = this.fragmentSource;\n    const {key: fragmentKey, fragmentId: parsedFragmentId} = this.getFragmentKey(manifestChunk.key, fragmentId);\n    let chunk = <FragmentChunk>fragmentSource.chunks.get(fragmentKey);\n    if (chunk === undefined) {\n      chunk = fragmentSource.getNewChunk_(FragmentChunk);\n      chunk.initializeFragmentChunk(fragmentKey, manifestChunk, parsedFragmentId);\n      fragmentSource.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(FRAGMENT_SOURCE_RPC_ID)\nexport class FragmentSource extends ChunkSource {\n  meshSource: MeshSource|null = null;\n  download(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    return this.meshSource!.downloadFragment(chunk, cancellationToken);\n  }\n}\n\n@registerSharedObject(MESH_LAYER_RPC_ID)\nexport class MeshLayer extends withSegmentationLayerBackendState\n(withSharedVisibility(withChunkManager(PerspectiveViewRenderLayerBackend))) {\n  source: MeshSource;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<MeshSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  attach(attachment: RenderLayerBackendAttachment<PerspectiveViewBackend>) {\n    const scheduleUpdateChunkPriorities = () => {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    };\n    const {view} = attachment;\n    attachment.registerDisposer(view.visibility.changed.add(scheduleUpdateChunkPriorities));\n    attachment.registerDisposer(scheduleUpdateChunkPriorities);\n    scheduleUpdateChunkPriorities();\n  }\n\n  private updateChunkPriorities() {\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    this.chunkManager.registerLayer(this);\n    const priorityTier = getPriorityTier(visibility);\n    const basePriority = getBasePriority(visibility);\n    const {source, chunkManager} = this;\n    forEachVisibleSegment(this, objectId => {\n      let manifestChunk = source.getChunk(objectId);\n      ++this.numVisibleChunksNeeded;\n      chunkManager.requestChunk(\n          manifestChunk, priorityTier, basePriority + MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);\n      const state = manifestChunk.state;\n      if (state === ChunkState.SYSTEM_MEMORY_WORKER || state === ChunkState.SYSTEM_MEMORY ||\n          state === ChunkState.GPU_MEMORY) {\n        ++this.numVisibleChunksAvailable;\n        for (let fragmentId of manifestChunk.fragmentIds!) {\n          let fragmentChunk = source.getFragmentChunk(manifestChunk, fragmentId);\n          ++this.numVisibleChunksNeeded;\n          chunkManager.requestChunk(\n              fragmentChunk, priorityTier, basePriority + MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY);\n          if (fragmentChunk.state === ChunkState.GPU_MEMORY) {\n            ++this.numVisibleChunksAvailable;\n          }\n        }\n      }\n    });\n  }\n}\n\n\n\n// Chunk that contains the list of fragments that make up a single object.\nexport class MultiscaleManifestChunk extends Chunk {\n  objectId = new Uint64();\n  manifest: MultiscaleMeshManifest|undefined;\n\n  constructor() {\n    super();\n  }\n  // We can't save a reference to objectId, because it may be a temporary\n  // object.\n  initializeManifestChunk(key: string, objectId: Uint64) {\n    super.initialize(key);\n    this.objectId.assign(objectId);\n  }\n\n  freeSystemMemory() {\n    this.manifest = undefined;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg.manifest = this.manifest;\n  }\n\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.manifest!.octree.byteLength;\n    this.gpuMemoryBytes = 0;\n    super.downloadSucceeded();\n    if (this.priorityTier < ChunkPriorityTier.RECENT) {\n      this.source!.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  }\n\n  toString() {\n    return this.objectId.toString();\n  }\n}\n\n/**\n * Chunk that contains the mesh for a single fragment of a single object.\n */\nexport class MultiscaleFragmentChunk extends Chunk {\n  subChunkOffsets: Uint32Array|null = null;\n  meshData: EncodedMeshData|null = null;\n  lod: number = 0;\n  chunkIndex: number = 0;\n  manifestChunk: MultiscaleManifestChunk|null = null;\n  constructor() {\n    super();\n  }\n  freeSystemMemory() {\n    this.meshData = this.subChunkOffsets = null;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    serializeMeshData(this.meshData!, msg, transfers);\n    const {subChunkOffsets} = this;\n    msg['subChunkOffsets'] = subChunkOffsets;\n    transfers.push(subChunkOffsets!.buffer);\n    this.meshData = this.subChunkOffsets = null;\n  }\n  downloadSucceeded() {\n    const {subChunkOffsets} = this;\n    this.systemMemoryBytes = this.gpuMemoryBytes = getMeshDataSize(this.meshData!);\n    this.systemMemoryBytes += subChunkOffsets!.byteLength;\n    super.downloadSucceeded();\n  }\n}\n\n\n\nexport interface MultiscaleMeshSource {\n  // TODO(jbms): Move this declaration to class definition below and declare abstract once\n  // TypeScript supports mixins with abstract classes.\n  downloadFragment(chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken):\n      Promise<void>;\n}\n\nexport class MultiscaleMeshSource extends ChunkSource {\n  fragmentSource: MultiscaleFragmentSource;\n  format: MultiscaleFragmentFormat;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    let fragmentSource = this.fragmentSource =\n        this.registerDisposer(rpc.getRef<MultiscaleFragmentSource>(options['fragmentSource']));\n    this.format = options['format'];\n    fragmentSource.meshSource = this;\n  }\n\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    let chunk = <MultiscaleManifestChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(MultiscaleManifestChunk);\n      chunk.initializeManifestChunk(key, objectId);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  getFragmentChunk(manifestChunk: MultiscaleManifestChunk, lod: number, chunkIndex: number) {\n    let key = `${manifestChunk.key}/${lod}:${chunkIndex}`;\n    let fragmentSource = this.fragmentSource;\n    let chunk = <MultiscaleFragmentChunk>fragmentSource.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = fragmentSource.getNewChunk_(MultiscaleFragmentChunk);\n      chunk.initialize(key);\n      chunk.lod = lod;\n      chunk.chunkIndex = chunkIndex;\n      chunk.manifestChunk = manifestChunk;\n      fragmentSource.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(MULTISCALE_FRAGMENT_SOURCE_RPC_ID)\nexport class MultiscaleFragmentSource extends ChunkSource {\n  meshSource: MultiscaleMeshSource|null = null;\n  download(chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken) {\n    return this.meshSource!.downloadFragment(chunk, cancellationToken);\n  }\n}\n\nconst tempModelMatrix = mat4.create();\n\n@registerSharedObject(MULTISCALE_MESH_LAYER_RPC_ID)\nexport class MultiscaleMeshLayer extends withSegmentationLayerBackendState\n(withSharedVisibility(withChunkManager(PerspectiveViewRenderLayerBackend))) {\n  source: MultiscaleMeshSource;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<MultiscaleMeshSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  attach(attachment: RenderLayerBackendAttachment<PerspectiveViewBackend>) {\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    const {view} = attachment;\n    attachment.registerDisposer(\n        view.projectionParameters.changed.add(scheduleUpdateChunkPriorities));\n    attachment.registerDisposer(view.visibility.changed.add(scheduleUpdateChunkPriorities));\n    attachment.registerDisposer(scheduleUpdateChunkPriorities);\n    scheduleUpdateChunkPriorities();\n  }\n\n  private updateChunkPriorities() {\n    const maxVisibility = this.visibility.value;\n    if (maxVisibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const {transform: {value: transform}} = this;\n    if (transform.error !== undefined) return;\n    const manifestChunks = new Array<MultiscaleManifestChunk>();\n    this.chunkManager.registerLayer(this);\n    {\n      const priorityTier = getPriorityTier(maxVisibility);\n      const basePriority = getBasePriority(maxVisibility);\n      const {source, chunkManager} = this;\n      forEachVisibleSegment(this, objectId => {\n        const manifestChunk = source.getChunk(objectId);\n        ++this.numVisibleChunksNeeded;\n        chunkManager.requestChunk(\n            manifestChunk, priorityTier, basePriority + MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);\n        const state = manifestChunk.state;\n        if (state === ChunkState.SYSTEM_MEMORY_WORKER || state === ChunkState.SYSTEM_MEMORY ||\n            state === ChunkState.GPU_MEMORY) {\n          manifestChunks.push(manifestChunk);\n          ++this.numVisibleChunksAvailable;\n        }\n      });\n    }\n    if (manifestChunks.length === 0) return;\n    const {source, chunkManager} = this;\n    for (const {view} of this.attachments.values()) {\n      const visibility = view.visibility.value;\n      if (visibility === Number.NEGATIVE_INFINITY) {\n        continue;\n      }\n      const priorityTier = getPriorityTier(visibility);\n      const basePriority = getBasePriority(visibility);\n      const projectionParameters = view.projectionParameters.value;\n      const modelViewProjectionMatrix = tempModelMatrix;\n      try {\n        get3dModelToDisplaySpaceMatrix(\n            modelViewProjectionMatrix, projectionParameters.displayDimensionRenderInfo, transform);\n      } catch {\n        continue;\n      }\n      mat4.multiply(\n          modelViewProjectionMatrix, projectionParameters.viewProjectionMat,\n          modelViewProjectionMatrix);\n      const clippingPlanes = getFrustrumPlanes(new Float32Array(24), modelViewProjectionMatrix);\n      const detailCutoff = this.renderScaleTarget.value;\n      for (const manifestChunk of manifestChunks) {\n        const maxLod = manifestChunk.manifest!.lodScales.length - 1;\n        getDesiredMultiscaleMeshChunks(\n            manifestChunk.manifest!, modelViewProjectionMatrix, clippingPlanes, detailCutoff,\n            projectionParameters.width, projectionParameters.height,\n            (lod, chunkIndex, _renderScale, empty) => {\n              if (empty) return;\n              let fragmentChunk = source.getFragmentChunk(manifestChunk, lod, chunkIndex);\n              ++this.numVisibleChunksNeeded;\n              chunkManager.requestChunk(\n                  fragmentChunk, priorityTier,\n                  basePriority + MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY - maxLod + lod);\n              if (fragmentChunk.state === ChunkState.GPU_MEMORY) {\n                ++this.numVisibleChunksAvailable;\n              }\n            });\n      }\n    }\n  }\n}\n\nfunction convertMeshData(\n    data: RawMeshData&{subChunkOffsets?: Uint32Array},\n    vertexPositionFormat: VertexPositionFormat): EncodedMeshData {\n  const normals = computeVertexNormals(data.vertexPositions, data.indices);\n  const encodedNormals = new Uint8Array(normals.length / 3 * 2);\n  encodeNormals32fx3ToOctahedron8x2(encodedNormals, normals);\n  let encodedIndices: MeshVertexIndices;\n  let strips: boolean;\n  if (CONVERT_TO_TRIANGLE_STRIPS) {\n    encodedIndices = computeTriangleStrips(data.indices, data.subChunkOffsets);\n    strips = true;\n  } else {\n    if (data.indices.BYTES_PER_ELEMENT === 4 && data.vertexPositions.length / 3 < 65535) {\n      encodedIndices = new Uint16Array(data.indices.length);\n      encodedIndices.set(data.indices);\n    } else {\n      encodedIndices = data.indices;\n    }\n    strips = false;\n  }\n  let encodedVertexPositions: EncodedVertexPositions;\n  if (vertexPositionFormat === VertexPositionFormat.uint10) {\n    const vertexPositions = data.vertexPositions;\n    const numVertices = vertexPositions.length / 3;\n    encodedVertexPositions = new Uint32Array(numVertices);\n    for (let inputIndex = 0, outputIndex = 0; outputIndex < numVertices;\n         inputIndex += 3, ++outputIndex) {\n      encodedVertexPositions[outputIndex] =\n          ((vertexPositions[inputIndex] & 1023) | ((vertexPositions[inputIndex + 1] & 1023) << 10) |\n           ((vertexPositions[inputIndex + 2] & 1023) << 20));\n    }\n  } else if (vertexPositionFormat === VertexPositionFormat.uint16) {\n    const vertexPositions = data.vertexPositions;\n    if (vertexPositions.BYTES_PER_ELEMENT === 2) {\n      encodedVertexPositions = vertexPositions;\n    } else {\n      encodedVertexPositions = new Uint16Array(vertexPositions.length);\n      encodedVertexPositions.set(vertexPositions);\n    }\n  } else {\n    encodedVertexPositions = data.vertexPositions as Float32Array;\n  }\n  return {\n    vertexPositions: encodedVertexPositions,\n    vertexNormals: encodedNormals,\n    indices: encodedIndices,\n    strips,\n  };\n}\n\nexport function assignMeshFragmentData(\n    chunk: FragmentChunk, data: RawMeshData,\n    vertexPositionFormat: VertexPositionFormat = VertexPositionFormat.float32) {\n  chunk.meshData = convertMeshData(data, vertexPositionFormat);\n}\n\nexport function assignMultiscaleMeshFragmentData(\n    chunk: MultiscaleFragmentChunk, data: RawPartitionedMeshData,\n    vertexPositionFormat: VertexPositionFormat) {\n  chunk.meshData = convertMeshData(data, vertexPositionFormat);\n  chunk.subChunkOffsets = data.subChunkOffsets;\n}\n\nexport function generateHigherOctreeLevel(\n    octree: Uint32Array, priorStart: number, priorEnd: number): number {\n  let curEnd = priorEnd;\n  for (let i = 0; i < 3; ++i) {\n    octree[curEnd * 5 + i] = octree[priorStart * 5 + i] >>> 1;\n  }\n  octree[curEnd * 5 + 3] = priorStart;\n  for (let i = priorStart + 1; i < priorEnd; ++i) {\n    const x = octree[i * 5] >>> 1, y = octree[i * 5 + 1] >>> 1, z = octree[i * 5 + 2] >>> 1;\n    if (x !== octree[curEnd * 5] || y !== octree[curEnd * 5 + 1] || z !== octree[curEnd * 5 + 2]) {\n      octree[curEnd * 5 + 4] = i;\n      ++curEnd;\n      octree[curEnd * 5] = x;\n      octree[curEnd * 5 + 1] = y;\n      octree[curEnd * 5 + 2] = z;\n      octree[curEnd * 5 + 3] = i;\n    }\n  }\n  octree[curEnd * 5 + 4] = priorEnd;\n  ++curEnd;\n  return curEnd;\n}\n\nexport function computeOctreeChildOffsets(\n    octree: Uint32Array, childStart: number, childEnd: number, parentEnd: number) {\n  let childNode = childStart;\n  for (let parentNode = childEnd; parentNode < parentEnd; ++parentNode) {\n    const parentX = octree[parentNode * 5], parentY = octree[parentNode * 5 + 1],\n          parentZ = octree[parentNode * 5 + 2];\n    while (childNode < childEnd) {\n      const childX = octree[childNode * 5] >>> 1, childY = octree[childNode * 5 + 1] >>> 1,\n            childZ = octree[childNode * 5 + 2] >>> 1;\n      if (!zorder3LessThan(childX, childY, childZ, parentX, parentY, parentZ)) {\n        break;\n      }\n      ++childNode;\n    }\n    octree[parentNode * 5 + 3] = childNode;\n    while (childNode < childEnd) {\n      const childX = octree[childNode * 5] >>> 1, childY = octree[childNode * 5 + 1] >>> 1,\n            childZ = octree[childNode * 5 + 2] >>> 1;\n      if (childX != parentX || childY != parentY || childZ != parentZ) {\n        break;\n      }\n      ++childNode;\n    }\n    octree[parentNode * 5 + 4] += childNode;\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DataType} from 'neuroglancer/util/data_type';\n\nexport const SKELETON_LAYER_RPC_ID = 'skeleton/SkeletonLayer';\n\nexport interface VertexAttributeInfo {\n  dataType: DataType;\n  numComponents: number;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Chunk, ChunkRenderLayerBackend, ChunkSource, withChunkManager} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {decodeVertexPositionsAndIndices} from 'neuroglancer/mesh/backend';\nimport {withSegmentationLayerBackendState} from 'neuroglancer/segmentation_display_state/backend';\nimport {forEachVisibleSegment, getObjectKey} from 'neuroglancer/segmentation_display_state/base';\nimport {SKELETON_LAYER_RPC_ID} from 'neuroglancer/skeleton/base';\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {getBasePriority, getPriorityTier} from 'neuroglancer/visibility_priority/backend';\nimport {withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerSharedObject, RPC} from 'neuroglancer/worker_rpc';\n\nconst SKELETON_CHUNK_PRIORITY = 60;\n\n// Chunk that contains the skeleton of a single object.\nexport class SkeletonChunk extends Chunk {\n  objectId = new Uint64();\n  vertexPositions: Float32Array|null = null;\n  vertexAttributes: TypedArray[]|null = null;\n  indices: Uint32Array|null = null;\n  constructor() {\n    super();\n  }\n\n  initializeSkeletonChunk(key: string, objectId: Uint64) {\n    super.initialize(key);\n    this.objectId.assign(objectId);\n  }\n  freeSystemMemory() {\n    this.vertexPositions = this.indices = null;\n  }\n\n  private getVertexAttributeBytes() {\n    let total = this.vertexPositions!.byteLength;\n    const {vertexAttributes} = this;\n    if (vertexAttributes != null) {\n      vertexAttributes.forEach(a => {\n        total += a.byteLength;\n      });\n    }\n    return total;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    const vertexPositions = this.vertexPositions!;\n    const indices = this.indices!;\n    msg['numVertices'] = vertexPositions.length / 3;\n    msg['indices'] = indices;\n    transfers.push(indices.buffer);\n\n    const {vertexAttributes} = this;\n    if (vertexAttributes != null && vertexAttributes.length > 0) {\n      const vertexData = new Uint8Array(this.getVertexAttributeBytes());\n      vertexData.set(new Uint8Array(\n          vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength));\n      let vertexAttributeOffsets = msg['vertexAttributeOffsets'] =\n          new Uint32Array(vertexAttributes.length + 1);\n      vertexAttributeOffsets[0] = 0;\n      let offset = vertexPositions.byteLength;\n      vertexAttributes.forEach((a, i) => {\n        vertexAttributeOffsets[i + 1] = offset;\n        vertexData.set(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), offset);\n        offset += a.byteLength;\n      });\n      transfers.push(vertexData.buffer);\n      msg['vertexAttributes'] = vertexData;\n    } else {\n      msg['vertexAttributes'] = new Uint8Array(\n          vertexPositions.buffer, vertexPositions.byteOffset, vertexPositions.byteLength);\n      msg['vertexAttributeOffsets'] = Uint32Array.of(0);\n      if (vertexPositions.buffer !== transfers[0]) {\n        transfers.push(vertexPositions.buffer);\n      }\n    }\n    this.vertexPositions = this.indices = this.vertexAttributes = null;\n  }\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes =\n        this.indices!.byteLength + this.getVertexAttributeBytes();\n    super.downloadSucceeded();\n  }\n}\n\nexport class SkeletonSource extends ChunkSource {\n  chunks: Map<string, SkeletonChunk>;\n  getChunk(objectId: Uint64) {\n    const key = getObjectKey(objectId);\n    let chunk = this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(SkeletonChunk);\n      chunk.initializeSkeletonChunk(key, objectId);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n}\n\n@registerSharedObject(SKELETON_LAYER_RPC_ID)\nexport class SkeletonLayer extends withSegmentationLayerBackendState\n(withSharedVisibility(withChunkManager(ChunkRenderLayerBackend))) {\n  source: SkeletonSource;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<SkeletonSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  private updateChunkPriorities() {\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    this.chunkManager.registerLayer(this);\n    const priorityTier = getPriorityTier(visibility);\n    const basePriority = getBasePriority(visibility);\n    const {source, chunkManager} = this;\n    forEachVisibleSegment(this, objectId => {\n      const chunk = source.getChunk(objectId);\n      ++this.numVisibleChunksNeeded;\n      if (chunk.state === ChunkState.GPU_MEMORY) {\n        ++this.numVisibleChunksAvailable;\n      }\n      chunkManager.requestChunk(chunk, priorityTier, basePriority + SKELETON_CHUNK_PRIORITY);\n    });\n  }\n}\n\n/**\n * Extracts vertex positions and edge vertex indices of the specified endianness from `data'.\n *\n * See documentation of decodeVertexPositionsAndIndices.\n */\nexport function decodeSkeletonVertexPositionsAndIndices(\n    chunk: SkeletonChunk, data: ArrayBuffer, endianness: Endianness, vertexByteOffset: number,\n    numVertices: number, indexByteOffset?: number, numEdges?: number) {\n  const meshData = decodeVertexPositionsAndIndices(\n      /*verticesPerPrimitive=*/2, data, endianness, vertexByteOffset, numVertices,\n    indexByteOffset, numEdges);\n  chunk.vertexPositions = meshData.vertexPositions as Float32Array;\n  chunk.indices = meshData.indices as Uint32Array;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\n\nexport async function decodeCompressedSegmentationChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  cancellationToken;\n  chunk.data = new Uint32Array(response);\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Interface for defining transcode operations.\n */\n\nexport interface AsyncComputationSpec<Signature extends (...args: any) => any> {\n  id: string;\n  t?: Signature;\n}\n\n/**\n * Declares an asynchronous operation.\n */\nexport function asyncComputation<Signature extends(...args: any) => any>(id: string):\n    AsyncComputationSpec<Signature> {\n  return {id};\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const encodeCompressedSegmentationUint32 = asyncComputation<\n    (rawData: Uint32Array, shape: ArrayLike<number>, blockSize: ArrayLike<number>) => Uint32Array>(\n    'encodeCompressedSegmentationUint32');\n\nexport const encodeCompressedSegmentationUint64 = asyncComputation<\n    (rawData: Uint32Array, shape: ArrayLike<number>, blockSize: ArrayLike<number>) => Uint32Array>(\n    'encodeCompressedSegmentationUint64');\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AsyncComputationSpec} from 'neuroglancer/async_computation';\nimport {CANCELED, CancellationToken} from 'neuroglancer/util/cancellation';\nimport {WORKER_RPC_ID} from 'neuroglancer/worker_rpc';\nimport {rpc} from 'neuroglancer/worker_rpc_context';\n\nconst freeWorkers: (Worker|MessagePort)[] = [];\nconst pendingTasks = new Map<number, {msg: any, transfer: Transferable[] | undefined}>();\nconst tasks = new Map<\n    number, {resolve: (value: any) => void, reject: (error: any) => void, cleanup: () => void}>();\n// On Safari, `navigator.hardwareConcurrency` is not defined.\nconst maxWorkers = typeof navigator.hardwareConcurrency === 'undefined' ?\n    4 :\n    Math.min(12, navigator.hardwareConcurrency);\nlet nextTaskId = 0;\n\nfunction returnWorker(worker: Worker|MessagePort) {\n  for (const [id, task] of pendingTasks) {\n    pendingTasks.delete(id);\n    worker.postMessage(task.msg, task.transfer as Transferable[]);\n    return;\n  }\n  freeWorkers.push(worker);\n}\n\nfunction getNewWorker(): Worker|MessagePort {\n  let port: Worker|MessagePort;\n  if (typeof Worker === 'undefined') {\n    // On Safari, the `Worker` constructor is not available from workers.  Instead, we request the\n    // main thread to create a worker.\n    const channel = new MessageChannel();\n    port = channel.port2;\n    rpc.invoke(\n        WORKER_RPC_ID, {port: channel.port1, path: 'async_computation.bundle.js'}, [channel.port1]);\n  } else {\n    port = new Worker('async_computation.bundle.js');\n  }\n  port.onmessage = msg => {\n    const {id, value, error} = msg.data as {id: number, value?: any, error?: string};\n    returnWorker(port);\n    const callbacks = tasks.get(id)!;\n    tasks.delete(id);\n    if (callbacks === undefined) return;\n    callbacks.cleanup();\n    if (error !== undefined) {\n      callbacks.reject(new Error(error));\n    } else {\n      callbacks.resolve(value);\n    }\n  };\n  return port;\n}\n\nexport function requestAsyncComputation<Signature extends(...args: any) => any>(\n    request: AsyncComputationSpec<Signature>, cancellationToken: CancellationToken,\n    transfer: Transferable[]|undefined,\n    ...args: Parameters<Signature>): Promise<ReturnType<Signature>> {\n  if (cancellationToken.isCanceled) return Promise.reject(CANCELED);\n  const id = nextTaskId++;\n  const msg = {t: request.id, id, args: args};\n  const cleanup = cancellationToken.add(() => {\n    pendingTasks.delete(id);\n    tasks.delete(id);\n  });\n  const promise = new Promise<ReturnType<Signature>>((resolve, reject) => {\n    tasks.set(id, {resolve, reject, cleanup});\n  });\n  if (freeWorkers.length !== 0) {\n    freeWorkers.pop()!.postMessage(msg, transfer as Transferable[]);\n  } else if (tasks.size < maxWorkers) {\n    getNewWorker().postMessage(msg, transfer as Transferable[]);\n  } else {\n    pendingTasks.set(id, {msg, transfer});\n  }\n  return promise;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts raw data volumes to the appropriate format required by the frontend.\n */\n\nimport {encodeCompressedSegmentationUint32, encodeCompressedSegmentationUint64} from 'neuroglancer/async_computation/encode_compressed_segmentation_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {DataType} from 'neuroglancer/sliceview/base';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\n\nexport async function postProcessRawData(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, data: ArrayBufferView) {\n  cancellationToken;\n  const {spec} = chunk.source!;\n  if (spec.compressedSegmentationBlockSize !== undefined) {\n    const {dataType} = spec;\n    const chunkDataSize = chunk.chunkDataSize!;\n    const shape = [chunkDataSize[0], chunkDataSize[1], chunkDataSize[2], chunkDataSize[3] || 1];\n    switch (dataType) {\n      case DataType.UINT32:\n        chunk.data = await requestAsyncComputation(\n            encodeCompressedSegmentationUint32, cancellationToken, [data.buffer],\n            data as Uint32Array, shape, spec.compressedSegmentationBlockSize);\n        break;\n      case DataType.UINT64:\n        chunk.data = await requestAsyncComputation(\n            encodeCompressedSegmentationUint64, cancellationToken, [data.buffer],\n            data as Uint32Array, shape, spec.compressedSegmentationBlockSize);\n        break;\n      default:\n        throw new Error(`Unsupported data type for compressed segmentation: ${DataType[dataType]}`);\n    }\n  } else {\n    chunk.data = data;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const decodeJpeg = asyncComputation<\n    (data: Uint8Array, width: number, height: number, numComponents: number,\n     convertToGrayscale: boolean) => Uint8Array>('decodeJpeg');\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {decodeJpeg} from 'neuroglancer/async_computation/decode_jpeg_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\n\nexport async function decodeJpegChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  const chunkDataSize = chunk.chunkDataSize!;\n  const decoded = await requestAsyncComputation(\n      decodeJpeg, cancellationToken, [response], new Uint8Array(response), chunkDataSize[0],\n      chunkDataSize[1] * chunkDataSize[2], chunkDataSize[3] || 1, false);\n  await postProcessRawData(chunk, cancellationToken, decoded);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {DATA_TYPE_BYTES, makeDataTypeArrayView} from 'neuroglancer/util/data_type';\nimport {convertEndian, Endianness, ENDIANNESS} from 'neuroglancer/util/endian';\nimport * as vector from 'neuroglancer/util/vector';\n\nexport async function decodeRawChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer,\n    endianness: Endianness = ENDIANNESS, byteOffset: number = 0,\n    byteLength: number = response.byteLength) {\n  cancellationToken;\n  let {spec} = chunk.source!;\n  let {dataType} = spec;\n  let numElements = vector.prod(chunk.chunkDataSize!);\n  let bytesPerElement = DATA_TYPE_BYTES[dataType];\n  let expectedBytes = numElements * bytesPerElement;\n  if (expectedBytes !== byteLength) {\n    throw new Error(\n        `Raw-format chunk is ${byteLength} bytes, ` +\n        `but ${numElements} * ${bytesPerElement} = ${expectedBytes} bytes are expected.`);\n  }\n  const data = makeDataTypeArrayView(dataType, response, byteOffset, byteLength);\n  convertEndian(data, endianness, bytesPerElement);\n  await postProcessRawData(chunk, cancellationToken, data);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SliceViewChunk, SliceViewChunkSourceBackend} from 'neuroglancer/sliceview/backend';\nimport {VolumeChunkSource as VolumeChunkSourceInterface, VolumeChunkSpecification} from 'neuroglancer/sliceview/volume/base';\nimport {vec3} from 'neuroglancer/util/geom';\nimport * as vector from 'neuroglancer/util/vector';\nimport {RPC} from 'neuroglancer/worker_rpc';\nimport { Chunk } from 'neuroglancer/chunk_manager/backend';\nimport { DataType, SliceViewChunkSpecification } from 'neuroglancer/sliceview/base';\n\nexport class VolumeChunk extends SliceViewChunk {\n  source: VolumeChunkSource|null = null;\n  data: ArrayBufferView|null;\n  chunkDataSize: Uint32Array|null;\n  constructor() {\n    super();\n  }\n\n  initializeVolumeChunk(key: string, chunkGridPosition: vec3) {\n    super.initializeVolumeChunk(key, chunkGridPosition);\n    this.chunkDataSize = null;\n    this.data = null;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    let chunkDataSize = this.chunkDataSize;\n    if (chunkDataSize !== this.source!.spec.chunkDataSize) {\n      msg['chunkDataSize'] = chunkDataSize;\n    }\n    let data = msg['data'] = this.data;\n    if (data !== null) {\n      transfers.push(data!.buffer);\n    }\n    this.data = null;\n  }\n\n  downloadSucceeded() {\n    this.systemMemoryBytes = this.gpuMemoryBytes = this.data?.byteLength ?? 0;\n    super.downloadSucceeded();\n  }\n\n  freeSystemMemory() {\n    this.data = null;\n  }\n}\n\ninterface ChunkWithGridPositionAndDataSize extends Chunk {\n  chunkGridPosition: Float32Array;\n  chunkDataSize: Uint32Array|null;\n}\n\ninterface SliceViewChunkSpecWithOffsetAndDatatype extends SliceViewChunkSpecification<Uint32Array> {\n  baseVoxelOffset: Float32Array;\n  dataType: DataType;\n}\n\ninterface ChunkSourceForChunkBounds {\n  spec: SliceViewChunkSpecWithOffsetAndDatatype;\n  tempChunkDataSize: Uint32Array;\n  tempChunkPosition: Float32Array;\n}\n\n/**\n * Helper function for computing the voxel bounds of a chunk based on its chunkGridPosition.\n *\n * This assumes that the grid of chunk positions starts at this.baseVoxelOffset.  Chunks are\n * clipped to lie within upperVoxelBound, but are not clipped to lie within lowerVoxelBound.  (The\n * frontend code currently cannot handle chunks clipped at their lower corner, and the chunk\n * layout can generally be chosen so that lowerVoxelBound lies on a chunk boundary.)\n *\n * This sets chunk.chunkDataSize to a copy of the returned chunkDataSize if it differs from\n * source.spec.chunkDataSize; otherwise, it is set to source.spec.chunkDataSize.\n *\n * @returns A globally-allocated Vec3 containing the chunk corner position in voxel coordinates.\n * The returned Vec3 will be invalidated by any subsequent call to this method, even on a\n * different VolumeChunkSource instance.\n */\nexport function computeChunkBounds(\n    source: ChunkSourceForChunkBounds,\n    chunk: ChunkWithGridPositionAndDataSize) {\n  const {spec, tempChunkDataSize, tempChunkPosition} = source;\n  const {upperVoxelBound, rank, baseVoxelOffset} = spec;\n\n  let origChunkDataSize = spec.chunkDataSize;\n  let newChunkDataSize = tempChunkDataSize;\n\n\n  // Chunk start position in voxel coordinates.\n  const chunkPosition =\n      vector.multiply(tempChunkPosition, chunk.chunkGridPosition, origChunkDataSize);\n\n  // Specifies whether the chunk only partially fits within the data bounds.\n  let partial = false;\n  for (let i = 0; i < rank; ++i) {\n    let upper = Math.min(upperVoxelBound[i], chunkPosition[i] + origChunkDataSize[i]);\n    let size = newChunkDataSize[i] = upper - chunkPosition[i];\n    if (size !== origChunkDataSize[i]) {\n      partial = true;\n    }\n  }\n\n  vector.add(chunkPosition, chunkPosition, baseVoxelOffset);\n\n  if (partial) {\n    chunk.chunkDataSize = Uint32Array.from(newChunkDataSize);\n  } else {\n    chunk.chunkDataSize = origChunkDataSize;\n  }\n\n  return chunkPosition;\n}\n\nexport class VolumeChunkSource extends SliceViewChunkSourceBackend implements\n    VolumeChunkSourceInterface {\n  spec: VolumeChunkSpecification;\n  tempChunkDataSize: Uint32Array;\n  tempChunkPosition: Float32Array;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    const rank = this.spec.rank;\n    this.tempChunkDataSize = new Uint32Array(rank);\n    this.tempChunkPosition = new Float32Array(rank);\n  }\n\n  computeChunkBounds(chunk: VolumeChunk) {\n    return computeChunkBounds(this, chunk);\n  }\n}\nVolumeChunkSource.prototype.chunkConstructor = VolumeChunk;\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultStringCompare(a: string, b: string) {\n  return (a < b) ? -1 : ((a > b) ? +1 : 0);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Annotation, AnnotationId, AnnotationSerializer, AnnotationType, makeAnnotationPropertySerializers} from 'neuroglancer/annotation';\nimport {AnnotationGeometryChunk, AnnotationGeometryChunkSourceBackend, AnnotationGeometryData, AnnotationMetadataChunk, AnnotationSource, AnnotationSubsetGeometryChunk} from 'neuroglancer/annotation/backend';\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkSourceParametersConstructor} from 'neuroglancer/chunk_manager/base';\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {BatchMeshFragment, BatchMeshFragmentPayload, BrainmapsInstance, ChangeStackAwarePayload, OAuth2Credentials, makeRequest, SkeletonPayload, SubvolumePayload} from 'neuroglancer/datasource/brainmaps/api';\nimport {AnnotationSourceParameters, AnnotationSpatialIndexSourceParameters, ChangeSpec, MeshSourceParameters, MultiscaleMeshSourceParameters, SkeletonSourceParameters, VolumeChunkEncoding, VolumeSourceParameters} from 'neuroglancer/datasource/brainmaps/base';\nimport {assignMeshFragmentData, assignMultiscaleMeshFragmentData, FragmentChunk, generateHigherOctreeLevel, ManifestChunk, MeshSource, MultiscaleFragmentChunk, MultiscaleManifestChunk, MultiscaleMeshSource} from 'neuroglancer/mesh/backend';\nimport {VertexPositionFormat} from 'neuroglancer/mesh/base';\nimport {MultiscaleMeshManifest} from 'neuroglancer/mesh/multiscale';\nimport {decodeSkeletonVertexPositionsAndIndices, SkeletonChunk, SkeletonSource} from 'neuroglancer/skeleton/backend';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {kInfinityVec, kZeroVec, vec3, vec3Key} from 'neuroglancer/util/geom';\nimport {parseArray, parseFixedLengthArray, verifyObject, verifyObjectProperty, verifyOptionalString, verifyString, verifyStringArray} from 'neuroglancer/util/json';\nimport {defaultStringCompare} from 'neuroglancer/util/string';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport * as vector from 'neuroglancer/util/vector';\nimport {decodeZIndexCompressed, encodeZIndexCompressed3d, getOctreeChildIndex, zorder3LessThan} from 'neuroglancer/util/zorder';\nimport {registerSharedObject, SharedObject} from 'neuroglancer/worker_rpc';\n\nconst CHUNK_DECODERS = new Map([\n  [\n    VolumeChunkEncoding.RAW,\n    decodeRawChunk,\n  ],\n  [VolumeChunkEncoding.JPEG, decodeJpegChunk],\n  [\n    VolumeChunkEncoding.COMPRESSED_SEGMENTATION,\n    decodeCompressedSegmentationChunk,\n  ]\n]);\n\nfunction applyChangeStack(changeStack: ChangeSpec|undefined, payload: ChangeStackAwarePayload) {\n  if (!changeStack) {\n    return;\n  }\n  payload.change_spec = {\n    change_stack_id: changeStack.changeStackId,\n  };\n  if (changeStack.timeStamp) {\n    payload.change_spec.time_stamp = changeStack.timeStamp;\n  }\n  if (changeStack.skipEquivalences) {\n    payload.change_spec.skip_equivalences = changeStack.skipEquivalences;\n  }\n}\n\nfunction BrainmapsSource<Parameters, TBase extends {new (...args: any[]): SharedObject}>(\n    Base: TBase, parametersConstructor: ChunkSourceParametersConstructor<Parameters>) {\n  return WithParameters(\n      WithSharedCredentialsProviderCounterpart<OAuth2Credentials>()(Base), parametersConstructor);\n}\n\nconst tempUint64 = new Uint64();\n\n@registerSharedObject()\nexport class BrainmapsVolumeChunkSource extends\n(BrainmapsSource(VolumeChunkSource, VolumeSourceParameters)) {\n  chunkDecoder = CHUNK_DECODERS.get(this.parameters.encoding)!;\n\n  private applyEncodingParams(payload: SubvolumePayload) {\n    let {encoding} = this.parameters;\n    switch (encoding) {\n      case VolumeChunkEncoding.RAW:\n        payload.subvolume_format = 'RAW';\n        break;\n      case VolumeChunkEncoding.JPEG:\n        payload.subvolume_format = 'SINGLE_IMAGE';\n        payload.image_format_options = {\n          image_format: 'JPEG',\n          jpeg_quality: this.parameters.jpegQuality!,\n        };\n        return;\n      case VolumeChunkEncoding.COMPRESSED_SEGMENTATION:\n        payload.subvolume_format = 'RAW';\n        payload.image_format_options = {\n          compressed_segmentation_block_size: vec3Key(this.spec.compressedSegmentationBlockSize!),\n        };\n        break;\n      default:\n        throw new Error(`Invalid encoding: ${encoding}`);\n    }\n  }\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    let path: string;\n\n    // chunkPosition must not be captured, since it will be invalidated by the next call to\n    // computeChunkBounds.\n    let chunkPosition = this.computeChunkBounds(chunk);\n    let chunkDataSize = chunk.chunkDataSize!;\n    path = `/v1/volumes/${parameters['volumeId']}/subvolume:binary`;\n\n    let payload: SubvolumePayload = {\n      geometry: {\n        corner: vec3Key(chunkPosition),\n        size: vec3Key(chunkDataSize),\n        scale: parameters.scaleIndex,\n      },\n    };\n\n    this.applyEncodingParams(payload);\n    applyChangeStack(parameters.changeSpec, payload);\n\n    const response = await makeRequest(\n        parameters['instance'], this.credentialsProvider, {\n          method: 'POST',\n          payload: JSON.stringify(payload),\n          path,\n          responseType: 'arraybuffer',\n        },\n        cancellationToken);\n    await this.chunkDecoder(chunk, cancellationToken, response);\n  }\n}\n\nfunction getFragmentCorner(\n    fragmentId: string, xBits: number, yBits: number, zBits: number): Uint32Array {\n  const id = new Uint64();\n  if (!id.tryParseString(fragmentId, 16)) {\n    throw new Error(`Couldn't parse fragmentId ${fragmentId} as hex-encoded Uint64`);\n  }\n  return decodeZIndexCompressed(id, xBits, yBits, zBits);\n}\n\ninterface BrainmapsMultiscaleManifestChunk extends MultiscaleManifestChunk {\n  fragmentSupervoxelIds: {fragmentId: string, supervoxelIds: string[]}[];\n}\n\nfunction decodeMultiscaleManifestChunk(chunk: BrainmapsMultiscaleManifestChunk, response: any) {\n  verifyObject(response);\n  const source = chunk.source as BrainmapsMultiscaleMeshSource;\n  const fragmentKeys = verifyObjectProperty(response, 'fragmentKey', verifyStringArray);\n  const supervoxelIds = verifyObjectProperty(response, 'supervoxelId', verifyStringArray);\n  const length = fragmentKeys.length;\n  if (length !== supervoxelIds.length) {\n    throw new Error('Expected fragmentKey and supervoxelId arrays to have the same length.');\n  }\n  const fragmentSupervoxelIds = new Map<string, string[]>();\n  fragmentKeys.forEach((fragmentId, i) => {\n    let ids = fragmentSupervoxelIds.get(fragmentId);\n    if (ids === undefined) {\n      ids = [];\n      fragmentSupervoxelIds.set(fragmentId, ids);\n    }\n    ids.push(supervoxelIds[i]);\n  });\n  const {chunkShape} = source.parameters.info;\n  const gridShape = source.parameters.info.lods[0].gridShape;\n  const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])),\n        zBits = Math.ceil(Math.log2(gridShape[2]));\n  const fragmentIdAndCorners =\n      Array.from(fragmentSupervoxelIds.entries()).map(([id, supervoxelIds]) => ({\n                                                        fragmentId: id,\n                                                        corner: getFragmentCorner(\n                                                            id, xBits, yBits, zBits),\n                                                        supervoxelIds\n                                                      }));\n  fragmentIdAndCorners.sort((a, b) => {\n    return zorder3LessThan(\n               a.corner[0], a.corner[1], a.corner[2], b.corner[0], b.corner[1], b.corner[2]) ?\n        -1 :\n        1;\n  });\n  let clipLowerBound: vec3, clipUpperBound: vec3;\n  let minNumLods = 0;\n  let octree: Uint32Array;\n  if (length === 0) {\n    clipLowerBound = clipUpperBound = kZeroVec;\n    octree = Uint32Array.of(0, 0, 0, 0, 0x80000000);\n  } else {\n    const minCoord = vec3.clone(kInfinityVec);\n    const maxCoord = vec3.clone(kZeroVec);\n    fragmentIdAndCorners.forEach(x => {\n      const {corner} = x;\n      for (let i = 0; i < 3; ++i) {\n        minCoord[i] = Math.min(minCoord[i], corner[i]);\n        maxCoord[i] = Math.max(maxCoord[i], corner[i]);\n      }\n    });\n    minNumLods = 1;\n    while ((maxCoord[0] >>> (minNumLods - 1)) != (minCoord[0] >>> (minNumLods - 1)) ||\n           (maxCoord[1] >>> (minNumLods - 1)) != (minCoord[1] >>> (minNumLods - 1)) ||\n           (maxCoord[2] >>> (minNumLods - 1)) != (minCoord[2] >>> (minNumLods - 1))) {\n      ++minNumLods;\n    }\n    clipLowerBound = vec3.multiply(minCoord, minCoord, chunkShape);\n    clipUpperBound = vec3.add(maxCoord, vec3.multiply(maxCoord, maxCoord, chunkShape), chunkShape);\n  }\n  const {lods} = source.parameters.info;\n  const lodScales = new Float32Array(Math.max(lods.length, minNumLods));\n  for (let lodIndex = 0; lodIndex < lods.length; ++lodIndex) {\n    lodScales[lodIndex] = lods[lodIndex].scale;\n  }\n\n  if (length !== 0) {\n    const octreeTemp = new Uint32Array(fragmentIdAndCorners.length * lodScales.length * 5);\n    fragmentIdAndCorners.forEach((x, i) => {\n      octreeTemp.set(x.corner, i * 5);\n      octreeTemp[i * 5] = x.corner[0];\n    });\n    let priorStart = 0;\n    let priorEnd = fragmentIdAndCorners.length;\n    for (let lod = 1; lod < lodScales.length; ++lod) {\n      const curEnd = generateHigherOctreeLevel(octreeTemp, priorStart, priorEnd);\n      priorStart = priorEnd;\n      priorEnd = curEnd;\n    }\n    octree = octreeTemp.slice(0, priorEnd * 5);\n  }\n\n  const manifest: MultiscaleMeshManifest = {\n    chunkShape,\n    chunkGridSpatialOrigin: kZeroVec,\n    clipLowerBound,\n    clipUpperBound,\n    octree: octree!,\n    lodScales: lodScales,\n    vertexOffsets: new Float32Array(lodScales.length * 3),\n  };\n  chunk.manifest = manifest;\n  chunk.fragmentSupervoxelIds = fragmentIdAndCorners;\n}\n\nconst maxMeshBatchSize = 255;\n\ninterface BatchMeshResponseFragment {\n  fullKey: string;\n  buffer: ArrayBuffer;\n  verticesOffset: number;\n  indicesOffset: number;\n  numVertices: number;\n  numIndices: number;\n}\n\nfunction decodeBatchMeshResponse(\n    response: ArrayBuffer, callback: (fragment: BatchMeshResponseFragment) => void) {\n  let length = response.byteLength;\n  let index = 0;\n  const dataView = new DataView(response);\n  const headerSize =\n      /*object id*/ 8 + /*fragment key length*/ 8 + /*num vertices*/ 8 + /*num triangles*/ 8;\n  while (index < length) {\n    if (index + headerSize > length) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    const objectIdLow = dataView.getUint32(index, /*littleEndian=*/ true);\n    const objectIdHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    const objectIdString = new Uint64(objectIdLow, objectIdHigh).toString();\n    const prefix = objectIdString + '\\0';\n    index += 8;\n    const fragmentKeyLength = dataView.getUint32(index, /*littleEndian=*/ true);\n    const fragmentKeyLengthHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    index += 8;\n    if (fragmentKeyLengthHigh !== 0) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    if (index + fragmentKeyLength + /* num vertices */ 8 + /*num indices*/ 8 > length) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    const fragmentKey =\n        new TextDecoder().decode(new Uint8Array(response, index, fragmentKeyLength));\n    const fullKey = prefix + fragmentKey;\n    index += fragmentKeyLength;\n    const numVertices = dataView.getUint32(index, /*littleEndian=*/ true);\n    const numVerticesHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    index += 8;\n    const numTriangles = dataView.getUint32(index, /*littleEndian=*/ true);\n    const numTrianglesHigh = dataView.getUint32(index + 4, /*littleEndian=*/ true);\n    index += 8;\n    if (numVerticesHigh !== 0 || numTrianglesHigh !== 0) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    const endOffset = index + numTriangles * 12 + numVertices * 12;\n    if (endOffset > length) {\n      throw new Error(`Invalid batch mesh fragment response.`);\n    }\n    callback({\n      fullKey,\n      buffer: response,\n      verticesOffset: index,\n      numVertices,\n      indicesOffset: index + 12 * numVertices,\n      numIndices: numTriangles * 3,\n    });\n    index = endOffset;\n  }\n}\n\nfunction combineBatchMeshFragments(fragments: BatchMeshResponseFragment[]) {\n  let totalVertices = 0, totalIndices = 0;\n  for (let fragment of fragments) {\n    totalVertices += fragment.numVertices;\n    totalIndices += fragment.numIndices;\n  }\n  const vertexBuffer = new Float32Array(totalVertices * 3);\n  const indexBuffer = new Uint32Array(totalIndices);\n  let vertexOffset = 0;\n  let indexOffset = 0;\n  for (const fragment of fragments) {\n    vertexBuffer.set(\n        new Float32Array(fragment.buffer, fragment.verticesOffset, fragment.numVertices * 3),\n        vertexOffset * 3);\n    const {numIndices} = fragment;\n    const sourceIndices = new Uint32Array(fragment.buffer, fragment.indicesOffset, numIndices);\n    convertEndian32(sourceIndices, Endianness.LITTLE);\n    for (let i = 0; i < numIndices; ++i) {\n      indexBuffer[indexOffset++] = sourceIndices[i] + vertexOffset;\n    }\n    vertexOffset += fragment.numVertices;\n  }\n  convertEndian32(vertexBuffer, Endianness.LITTLE);\n  return {vertexPositions: vertexBuffer, indices: indexBuffer};\n}\n\nasync function makeBatchMeshRequest<T>(\n    credentialsProvider: CredentialsProvider<OAuth2Credentials>,\n    parameters: {instance: BrainmapsInstance, volumeId: string, meshName: string},\n    ids: Map<string, T>, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n  const path = `/v1/objects/meshes:batch`;\n  const batches: BatchMeshFragment[] = [];\n  let prevObjectId: string|undefined;\n  let batchSize = 0;\n  const pendingIds = new Map<string, T>();\n  for (const [id, idData] of ids) {\n    pendingIds.set(id, idData);\n    ids.delete(id);\n    const splitIndex = id.indexOf('\\0');\n    const objectId = id.substring(0, splitIndex);\n    const fragmentId = id.substring(splitIndex + 1);\n    if (objectId !== prevObjectId) {\n      batches.push({object_id: objectId, fragment_keys: []});\n    }\n    batches[batches.length - 1].fragment_keys.push(fragmentId);\n    if (++batchSize === maxMeshBatchSize) break;\n  }\n  const payload: BatchMeshFragmentPayload = {\n    volume_id: parameters.volumeId,\n    mesh_name: parameters.meshName,\n    batches: batches,\n  };\n  try {\n    return await makeRequest(\n        parameters['instance'], credentialsProvider, {\n          method: 'POST',\n          path,\n          payload: JSON.stringify(payload),\n          responseType: 'arraybuffer',\n        },\n        cancellationToken);\n  } finally {\n    for (const [id, idData] of pendingIds) {\n      ids.set(id, idData);\n    }\n  }\n}\n\n@registerSharedObject() export class BrainmapsMultiscaleMeshSource extends\n(BrainmapsSource(MultiscaleMeshSource, MultiscaleMeshSourceParameters)) {\n  private listFragmentsParams = (() => {\n    const {parameters} = this;\n    const {changeSpec} = parameters;\n    if (changeSpec !== undefined) {\n      return `&header.changeStackId=${changeSpec.changeStackId}`;\n    }\n    return '';\n  })();\n\n  download(chunk: BrainmapsMultiscaleManifestChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    const path = `/v1/objects/${parameters['volumeId']}/meshes/` +\n        `${parameters.info.lods[0].info.name}:listfragments?` +\n        `object_id=${chunk.objectId}&return_supervoxel_ids=true` + this.listFragmentsParams;\n    return makeRequest(\n               parameters['instance'], this.credentialsProvider, {\n                 method: 'GET',\n                 path,\n                 responseType: 'json',\n               },\n               cancellationToken)\n        .then(response => decodeMultiscaleManifestChunk(chunk, response));\n  }\n\n  async downloadFragment(chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n\n    const manifestChunk = chunk.manifestChunk! as BrainmapsMultiscaleManifestChunk;\n    const {fragmentSupervoxelIds} = manifestChunk;\n    const manifest = manifestChunk.manifest!;\n    const {lod} = chunk;\n    const {octree} = manifest;\n    const numBaseChunks = fragmentSupervoxelIds.length;\n    const row = chunk.chunkIndex;\n    let startChunkIndex = row;\n    while (startChunkIndex >= numBaseChunks) {\n      startChunkIndex = octree[startChunkIndex * 5 + 3];\n    }\n    let endChunkIndex = row + 1;\n    while (endChunkIndex > numBaseChunks) {\n      endChunkIndex = octree[endChunkIndex * 5 - 1] & 0x7FFFFFFF;\n    }\n    const {relativeBlockShape, gridShape} = parameters.info.lods[lod];\n    const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])),\n          zBits = Math.ceil(Math.log2(gridShape[2]));\n\n    let ids = new Map<string, number>();\n    for (let chunkIndex = startChunkIndex; chunkIndex < endChunkIndex; ++chunkIndex) {\n      // Determine number of x, y, and z bits to skip.\n      const gridX = Math.floor(octree[chunkIndex * 5] / relativeBlockShape[0]),\n            gridY = Math.floor(octree[chunkIndex * 5 + 1] / relativeBlockShape[1]),\n            gridZ = Math.floor(octree[chunkIndex * 5 + 2] / relativeBlockShape[2]);\n      const fragmentKey =\n          encodeZIndexCompressed3d(tempUint64, xBits, yBits, zBits, gridX, gridY, gridZ)\n              .toString(16)\n              .padStart(16, '0');\n      const entry = fragmentSupervoxelIds[chunkIndex];\n      for (const supervoxelId of entry.supervoxelIds) {\n        ids.set(supervoxelId + '\\0' + fragmentKey, chunkIndex);\n      }\n    }\n\n    let prevLod = Math.max(0, lod - 1);\n\n    let fragments: (BatchMeshResponseFragment&{chunkIndex: number})[] = [];\n\n    const idArray = Array.from(ids);\n    idArray.sort((a, b) => defaultStringCompare(a[0], b[0]));\n    ids = new Map(idArray);\n\n    const meshName = parameters.info.lods[lod].info.name;\n\n    const parallelRequests = true;\n\n    await new Promise((resolve, reject) => {\n      let requestsInProgress = 0;\n      let error = false;\n      const maybeIssueMoreRequests = () => {\n        if (error) return;\n        while (ids.size !== 0) {\n          ++requestsInProgress;\n          makeBatchMeshRequest(\n              this.credentialsProvider,\n              {instance: parameters.instance, volumeId: parameters.volumeId, meshName}, ids,\n              cancellationToken)\n              .then(response => {\n                --requestsInProgress;\n                decodeBatchMeshResponse(\n                    response, (fragment: BatchMeshResponseFragment&{chunkIndex: number}) => {\n                      const chunkIndex = ids.get(fragment.fullKey)!;\n                      if (!ids.delete(fragment.fullKey)) {\n                        throw new Error(`Received unexpected fragment key: ${\n                            JSON.stringify(fragment.fullKey)}.`);\n                      }\n                      fragment.chunkIndex = chunkIndex;\n                      fragments.push(fragment);\n                    });\n                maybeIssueMoreRequests();\n              })\n            .catch(e => {\n              error = true;\n              reject(e);\n            });\n          if (!parallelRequests) break;\n        }\n        // Notify the chunk queue of the number of download slots being used.  This partially limits\n        // parallelism by maximum number of concurrent downloads, and avoids fetch errors due to an\n        // excessive number of concurrent requests.\n        //\n        // Note that the limit on the number of concurrent downloads is not enforced perfectly.  If\n        // the new value of `downloadSlots` results in the total number of concurrent downloads\n        // exceeding the maximum allowed, the concurrent requests are still issued.  However, no\n        // additional lower-priority chunks will be promoted to `ChunkState.DOWNLOADING` until a\n        // download slot is available.\n        chunk.downloadSlots = Math.max(1, requestsInProgress);\n        if (requestsInProgress === 0) {\n          resolve(undefined);\n          return;\n        }\n      };\n      maybeIssueMoreRequests();\n    });\n\n    // Combine fragments\n    fragments.sort((a, b) => a.chunkIndex - b.chunkIndex);\n    let indexOffset = 0;\n    const numSubChunks = 1 << (3 * (lod - prevLod));\n    const subChunkOffsets = new Uint32Array(numSubChunks + 1);\n    let prevSubChunkIndex = 0;\n    for (const fragment of fragments) {\n      const row = fragment.chunkIndex;\n      const subChunkIndex = getOctreeChildIndex(\n                                octree[row * 5] >>> prevLod, octree[row * 5 + 1] >>> prevLod,\n                                octree[row * 5 + 2] >>> prevLod) &\n          (numSubChunks - 1);\n      subChunkOffsets.fill(indexOffset, prevSubChunkIndex + 1, subChunkIndex + 1);\n      prevSubChunkIndex = subChunkIndex;\n      indexOffset += fragment.numIndices;\n    }\n    subChunkOffsets.fill(indexOffset, prevSubChunkIndex + 1, numSubChunks + 1);\n    assignMultiscaleMeshFragmentData(\n        chunk, {...combineBatchMeshFragments(fragments), subChunkOffsets},\n        VertexPositionFormat.float32);\n  }\n}\n\nfunction groupFragmentsIntoBatches(ids: string[]) {\n  const batches = [];\n  let index = 0;\n  const length = ids.length;\n  while (index < length) {\n    batches.push(JSON.stringify(ids.slice(index, index + maxMeshBatchSize)));\n    index += maxMeshBatchSize;\n  }\n  return batches;\n}\n\nfunction decodeManifestChunkWithSupervoxelIds(chunk: ManifestChunk, response: any) {\n  verifyObject(response);\n  const fragmentKeys = verifyObjectProperty(response, 'fragmentKey', verifyStringArray);\n  const supervoxelIds = verifyObjectProperty(response, 'supervoxelId', verifyStringArray);\n  const length = fragmentKeys.length;\n  if (length !== supervoxelIds.length) {\n    throw new Error('Expected fragmentKey and supervoxelId arrays to have the same length.');\n  }\n  let fragmentIds =\n      supervoxelIds.map((supervoxelId, index) => supervoxelId + '\\0' + fragmentKeys[index]);\n  chunk.fragmentIds = groupFragmentsIntoBatches(fragmentIds);\n}\n\n@registerSharedObject() export class BrainmapsMeshSource extends\n(BrainmapsSource(MeshSource, MeshSourceParameters)) {\n  private listFragmentsParams = (() => {\n    const {parameters} = this;\n    const {changeSpec} = parameters;\n    if (changeSpec !== undefined) {\n      return `&header.changeStackId=${changeSpec.changeStackId}`;\n    }\n    return '';\n  })();\n\n  download(chunk: ManifestChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    const path = `/v1/objects/${parameters['volumeId']}/meshes/` +\n        `${parameters['meshName']}:listfragments?` +\n        `object_id=${chunk.objectId}&return_supervoxel_ids=true` + this.listFragmentsParams;\n    return makeRequest(\n               parameters['instance'], this.credentialsProvider, {\n                 method: 'GET',\n                 path,\n                 responseType: 'json',\n               },\n               cancellationToken)\n        .then(response => decodeManifestChunkWithSupervoxelIds(chunk, response));\n  }\n\n  async downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n\n    const ids = new Map<string, null>();\n    for (const id of JSON.parse(chunk.fragmentId!)) {\n      ids.set(id, null);\n    }\n\n    let fragments: BatchMeshResponseFragment[] = [];\n\n    const {credentialsProvider} = this;\n\n    while (ids.size !== 0) {\n      const response =\n          await makeBatchMeshRequest(credentialsProvider, parameters, ids, cancellationToken);\n      decodeBatchMeshResponse(response, fragment => {\n        if (!ids.delete(fragment.fullKey)) {\n          throw new Error(`Received unexpected fragment key: ${JSON.stringify(fragment.fullKey)}.`);\n        }\n        fragments.push(fragment);\n      });\n    }\n    assignMeshFragmentData(chunk, combineBatchMeshFragments(fragments));\n  }\n}\n\nfunction decodeSkeletonChunk(chunk: SkeletonChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  let numVerticesHigh = dv.getUint32(4, true);\n  if (numVerticesHigh !== 0) {\n    throw new Error(`The number of vertices should not exceed 2^32-1.`);\n  }\n  let numEdges = dv.getUint32(8, true);\n  let numEdgesHigh = dv.getUint32(12, true);\n  if (numEdgesHigh !== 0) {\n    throw new Error(`The number of edges should not exceed 2^32-1.`);\n  }\n  decodeSkeletonVertexPositionsAndIndices(\n      chunk, response, Endianness.LITTLE, /*vertexByteOffset=*/ 16, numVertices,\n      /*indexByteOffset=*/ undefined, /*numEdges=*/ numEdges);\n}\n\n@registerSharedObject() export class BrainmapsSkeletonSource extends\n(BrainmapsSource(SkeletonSource, SkeletonSourceParameters)) {\n  download(chunk: SkeletonChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    let payload: SkeletonPayload = {\n      object_id: `${chunk.objectId}`,\n    };\n    const path = `/v1/objects/${parameters['volumeId']}` +\n        `/meshes/${parameters.meshName}` +\n        '/skeleton:binary';\n    applyChangeStack(parameters.changeSpec, payload);\n    return makeRequest(\n               parameters['instance'], this.credentialsProvider, {\n                 method: 'POST',\n                 path,\n                 payload: JSON.stringify(payload),\n                 responseType: 'arraybuffer',\n               },\n               cancellationToken)\n        .then(response => decodeSkeletonChunk(chunk, response));\n  }\n}\n\nconst spatialAnnotationTypes = ['LOCATION', 'LINE', 'VOLUME'];\n\nfunction parseCommaSeparatedPoint(x: string) {\n  const pattern = /(-?[0-9]+),(-?[0-9]+),(-?[0-9]+)/;\n  const cornerParts = x.match(pattern);\n  if (cornerParts === null) {\n    throw new Error(`Error parsing number triplet: ${JSON.stringify(x)}.`);\n  }\n  return vec3.fromValues(\n      parseFloat(cornerParts[1]), parseFloat(cornerParts[2]), parseFloat(cornerParts[3]));\n}\n\nfunction getIdPrefix(parameters: AnnotationSourceParameters) {\n  return parameters.volumeId + ':' + parameters.changestack + ':';\n}\n\nfunction parseBrainmapsAnnotationId(idPrefix: string, fullId: string) {\n  if (!fullId.startsWith(idPrefix)) {\n    throw new Error(`Received annotation id ${\n        JSON.stringify(fullId)} does not have expected prefix of ${JSON.stringify(idPrefix)}.`);\n  }\n  const id = fullId.substring(idPrefix.length);\n  return id;\n}\n\nfunction parseObjectLabels(obj: any): Uint64[][]|undefined {\n  if (obj == null) {\n    return undefined;\n  }\n  return [parseArray(obj, x => Uint64.parseString('' + x, 10))];\n}\n\nfunction parseAnnotation(entry: any, idPrefix: string, expectedId?: string): Annotation {\n  const corner =\n      verifyObjectProperty(entry, 'corner', x => parseCommaSeparatedPoint(verifyString(x)));\n  const size = verifyObjectProperty(entry, 'size', x => parseCommaSeparatedPoint(verifyString(x)));\n  const description = verifyObjectProperty(entry, 'payload', verifyOptionalString);\n  const spatialAnnotationType = verifyObjectProperty(entry, 'type', verifyString);\n  const fullId = verifyObjectProperty(entry, 'id', verifyString);\n  const id = parseBrainmapsAnnotationId(idPrefix, fullId);\n  const segments = verifyObjectProperty(entry, 'objectLabels', parseObjectLabels);\n  if (expectedId !== undefined && id !== expectedId) {\n    throw new Error(`Received annotation has unexpected id ${JSON.stringify(fullId)}.`);\n  }\n  switch (spatialAnnotationType) {\n    case 'LOCATION':\n      if (vec3.equals(size, kZeroVec)) {\n        return {\n          type: AnnotationType.POINT,\n          id,\n          point: corner,\n          description,\n          relatedSegments: segments,\n          properties: [],\n        };\n      } else {\n        const radii = vec3.scale(vec3.create(), size, 0.5);\n        const center = vec3.add(vec3.create(), corner, radii);\n        return {\n          type: AnnotationType.ELLIPSOID,\n          id,\n          center,\n          radii,\n          description,\n          relatedSegments: segments,\n          properties: [],\n        };\n      }\n    case 'LINE':\n      return {\n        type: AnnotationType.LINE,\n        id,\n        pointA: corner,\n        pointB: vec3.add(vec3.create(), corner, size),\n        description,\n        relatedSegments: segments,\n        properties: [],\n      };\n    case 'VOLUME':\n      return {\n        type: AnnotationType.AXIS_ALIGNED_BOUNDING_BOX,\n        id,\n        pointA: corner,\n        pointB: vec3.add(vec3.create(), corner, size),\n        description,\n        relatedSegments: segments,\n        properties: [],\n      };\n    default:\n      throw new Error(`Unknown spatial annotation type: ${JSON.stringify(spatialAnnotationType)}.`);\n  }\n}\n\nfunction parseAnnotationResponse(response: any, idPrefix: string, expectedId?: string): Annotation {\n  verifyObject(response);\n  const entry = verifyObjectProperty(\n      response, 'annotations', x => parseFixedLengthArray(<any[]>[undefined], x, verifyObject))[0];\n  return parseAnnotation(entry, idPrefix, expectedId);\n}\n\nconst annotationPropertySerializers =\n    makeAnnotationPropertySerializers(/*rank=*/ 3, /*propertySpecs=*/[]);\n\nfunction parseAnnotations(\n    chunk: AnnotationGeometryChunk|AnnotationSubsetGeometryChunk, responses: any[]) {\n  const serializer = new AnnotationSerializer(annotationPropertySerializers);\n  const source = <BrainmapsAnnotationSource>chunk.source.parent;\n  const idPrefix = getIdPrefix(source.parameters);\n  responses.forEach((response, responseIndex) => {\n    try {\n      verifyObject(response);\n      const annotationsArray =\n          verifyObjectProperty(response, 'annotations', x => x === undefined ? [] : x);\n      if (!Array.isArray(annotationsArray)) {\n        throw new Error(`Expected array, but received ${JSON.stringify(typeof annotationsArray)}.`);\n      }\n      for (const entry of annotationsArray) {\n        try {\n          serializer.add(parseAnnotation(entry, idPrefix));\n        } catch (e) {\n          throw new Error(`Error parsing annotation: ${e.message}`);\n        }\n      }\n    } catch (parseError) {\n      throw new Error(`Error parsing ${spatialAnnotationTypes[responseIndex]} annotations: ${\n          parseError.message}`);\n    }\n  });\n  chunk.data = Object.assign(new AnnotationGeometryData(), serializer.serialize());\n}\n\nfunction getSpatialAnnotationTypeFromId(id: string) {\n  const index = id.indexOf('.');\n  return id.substring(0, index);\n}\n\nfunction toCommaSeparated(v: vec3) {\n  return `${Math.round(v[0])},${Math.round(v[1])},${Math.round(v[2])}`;\n}\n\nfunction getFullSpatialAnnotationId(parameters: AnnotationSourceParameters, id: string) {\n  return `${parameters.volumeId}:${parameters.changestack}:${id}`;\n}\n\nfunction annotationToBrainmaps(annotation: Annotation): any {\n  const payload = annotation.description || '';\n  const objectLabels = annotation.relatedSegments === undefined ?\n      undefined :\n      annotation.relatedSegments[0].map(x => x.toString());\n  switch (annotation.type) {\n    case AnnotationType.LINE: {\n      const {pointA, pointB} = annotation;\n      const size = vec3.subtract(vec3.create(), pointB as vec3, pointA as vec3);\n      return {\n        type: 'LINE',\n        corner: toCommaSeparated(pointA as vec3),\n        size: toCommaSeparated(size),\n        object_labels: objectLabels,\n        payload,\n      };\n    }\n    case AnnotationType.AXIS_ALIGNED_BOUNDING_BOX: {\n      const {pointA, pointB} = annotation;\n      const minPoint = vector.min(vec3.create(), pointA, pointB);\n      const maxPoint = vector.max(vec3.create(), pointA, pointB);\n      const size = vec3.subtract(maxPoint, maxPoint, minPoint);\n      return {\n        type: 'VOLUME',\n        corner: toCommaSeparated(minPoint),\n        size: toCommaSeparated(size),\n        object_labels: objectLabels,\n        payload,\n      };\n    }\n    case AnnotationType.POINT: {\n      return {\n        type: 'LOCATION',\n        corner: toCommaSeparated(annotation.point as vec3),\n        size: '0,0,0',\n        object_labels: objectLabels,\n        payload,\n      };\n    }\n    case AnnotationType.ELLIPSOID: {\n      const corner =\n          vec3.subtract(vec3.create(), annotation.center as vec3, annotation.radii as vec3);\n      const size = vec3.scale(vec3.create(), annotation.radii as vec3, 2);\n      return {\n        type: 'LOCATION',\n        corner: toCommaSeparated(corner),\n        size: toCommaSeparated(size),\n        object_labels: objectLabels,\n        payload,\n      };\n    }\n  }\n}\n\n@registerSharedObject() //\nexport class BrainmapsAnnotationGeometryChunkSource extends (BrainmapsSource(AnnotationGeometryChunkSourceBackend, AnnotationSpatialIndexSourceParameters)) {\n  async download(chunk: AnnotationGeometryChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return Promise\n        .all(spatialAnnotationTypes.map(\n            spatialAnnotationType => makeRequest(\n                parameters.instance, this.credentialsProvider, {\n                  method: 'POST',\n                  path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,\n                  payload: JSON.stringify({\n                    type: spatialAnnotationType,\n                    ignore_payload: true,\n                  }),\n                  responseType: 'json',\n                },\n                cancellationToken)))\n        .then(values => {\n          parseAnnotations(chunk, values);\n        });\n  }\n}\n\n@registerSharedObject() export class BrainmapsAnnotationSource extends (BrainmapsSource(AnnotationSource, AnnotationSourceParameters)) {\n  downloadSegmentFilteredGeometry(\n      chunk: AnnotationSubsetGeometryChunk, _relationshipIndex: number,\n      cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return Promise\n        .all(spatialAnnotationTypes.map(\n            spatialAnnotationType => makeRequest(\n                parameters.instance, this.credentialsProvider, {\n                  method: 'POST',\n                  path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,\n                  payload: JSON.stringify({\n                    type: spatialAnnotationType,\n                    object_labels: [chunk.objectId.toString()],\n                    ignore_payload: true,\n                  }),\n                  responseType: 'json',\n                },\n                cancellationToken)))\n        .then(values => {\n          parseAnnotations(chunk, values);\n        });\n  }\n\n  downloadMetadata(chunk: AnnotationMetadataChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const id = chunk.key!;\n    return makeRequest(\n               parameters.instance, this.credentialsProvider, {\n                 method: 'POST',\n                 path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:get`,\n                 payload: JSON.stringify({\n                   type: getSpatialAnnotationTypeFromId(id),\n                   id: getFullSpatialAnnotationId(parameters, id)\n                 }),\n                 responseType: 'json',\n               },\n               cancellationToken)\n        .then(\n            response => {\n              chunk.annotation = parseAnnotationResponse(response, getIdPrefix(parameters), id);\n            },\n            () => {\n              chunk.annotation = null;\n            });\n  }\n\n  add(annotation: Annotation) {\n    const {parameters} = this;\n    const brainmapsAnnotation = annotationToBrainmaps(annotation);\n    return makeRequest(parameters.instance, this.credentialsProvider, {\n             method: 'POST',\n             path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:push`,\n             payload: JSON.stringify({annotations: [brainmapsAnnotation]}),\n             responseType: 'json',\n           })\n        .then(response => {\n          verifyObject(response);\n          const ids = verifyObjectProperty(response, 'ids', verifyStringArray);\n          if (ids.length !== 1) {\n            throw new Error(`Expected list of 1 id, but received ${JSON.stringify(ids)}.`);\n          }\n          const idPrefix = getIdPrefix(this.parameters);\n          return parseBrainmapsAnnotationId(idPrefix, ids[0]);\n        });\n  }\n\n  update(id: AnnotationId, annotation: Annotation) {\n    const {parameters} = this;\n    const brainmapsAnnotation = annotationToBrainmaps(annotation);\n    brainmapsAnnotation.id = getFullSpatialAnnotationId(parameters, id);\n    return makeRequest(parameters.instance, this.credentialsProvider, {\n      method: 'POST',\n      path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:push`,\n      payload: JSON.stringify({annotations: [brainmapsAnnotation]}),\n      responseType: 'json',\n    });\n  }\n\n  delete (id: AnnotationId) {\n    const {parameters} = this;\n    return makeRequest(parameters.instance, this.credentialsProvider, {\n      method: 'POST',\n      path: `/v1/changes/${parameters.volumeId}/${parameters.changestack}/spatials:delete`,\n      payload: JSON.stringify({\n        type: getSpatialAnnotationTypeFromId(id),\n        ids: [getFullSpatialAnnotationId(parameters, id)]\n      }),\n      responseType: 'json',\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {fetchWithCredentials} from 'neuroglancer/credentials_provider/http_request';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {ResponseTransform, cancellableFetchOk} from 'neuroglancer/util/http_request';\n\nexport type BossToken = string;\n\n/**\n * Key used for retrieving the CredentialsProvider from a CredentialsManager.\n */\nexport const credentialsKey = 'boss';\n\nexport function fetchWithBossCredentials<T>(\n  credentialsProvider: CredentialsProvider<BossToken>, input: RequestInfo, init: RequestInit,\n  transformResponse: ResponseTransform<T>,\n  cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  return cancellableFetchOk(input, init, transformResponse, cancellationToken).catch((error) => {\n    if (error.status !== 500 && error.status !== 401 && error.status !== 403 && error.status !== 504) {\n      // Prevent an infinite loop of error = 0 where the request\n      // has been cancelled\n      throw error;\n    }\n    return fetchWithCredentials(\n      credentialsProvider, input, init, transformResponse,\n      credentials => {\n        const headers = new Headers(init.headers);\n        headers.set('Authorization', `Bearer ${credentials}`);\n        return {...init, headers};\n      },\n      error => {\n        const {status} = error;\n        if (status === 403 || status === 401) {\n          // Authorization needed.  Retry with refreshed token.\n          return 'refresh';\n        }\n        throw error;\n      },\n      cancellationToken);\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {vec2} from 'neuroglancer/util/geom';\n\nexport class BossSourceParameters {\n  baseUrl: string;\n  collection: string;\n  experiment: string;\n  channel: string;\n  resolution: string;\n}\n\nexport class VolumeChunkSourceParameters extends BossSourceParameters {\n  encoding: string;\n  window: vec2|undefined;\n\n  static RPC_ID = 'boss/VolumeChunkSource';\n\n  static stringify(parameters: VolumeChunkSourceParameters) {\n    return `boss:volume:${parameters.baseUrl}/${parameters.collection}/${\n        parameters.experiment}/${parameters.channel}/${parameters.resolution}/${\n        parameters.encoding}`;\n  }\n}\n\nexport class MeshSourceParameters {\n  baseUrl: string;\n\n  static RPC_ID = 'boss/MeshChunkSource';\n\n  static stringify(parameters: MeshSourceParameters) {\n    return `boss:mesh:${parameters.baseUrl}`;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const decodeGzip = asyncComputation<(data: Uint8Array) => Uint8Array>('decodeGzip');\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Support for parsing NumPy dtype strings.\n */\n\nimport {DataType} from 'neuroglancer/util/data_type';\nimport {Endianness} from 'neuroglancer/util/endian';\n\nexport interface NumpyDtype {\n  dataType: DataType;\n  endianness: Endianness;\n}\n\nconst supportedDataTypes = new Map<string, NumpyDtype>();\nsupportedDataTypes.set('|u1', {\n  endianness: Endianness.LITTLE,\n  dataType: DataType.UINT8,\n});\nsupportedDataTypes.set('|i1', {\n  endianness: Endianness.LITTLE,\n  dataType: DataType.INT8,\n});\nfor (let [endiannessChar, endianness] of <[string, Endianness][]>[\n       ['<', Endianness.LITTLE], ['>', Endianness.BIG]\n     ]) {\n  // For now, treat both signed and unsigned integer types as unsigned.\n  for (let typeChar of ['u', 'i']) {\n    supportedDataTypes.set(`${endiannessChar}${typeChar}8`, {\n      endianness,\n      dataType: DataType.UINT64,\n    });\n  }\n  supportedDataTypes.set(`${endiannessChar}u2`, {\n    endianness,\n    dataType: DataType.UINT16,\n  });\n\n  supportedDataTypes.set(`${endiannessChar}i2`, {\n    endianness,\n    dataType: DataType.INT16,\n  });\n\n  supportedDataTypes.set(`${endiannessChar}u4`, {\n    endianness,\n    dataType: DataType.UINT32,\n  });\n\n  supportedDataTypes.set(`${endiannessChar}i4`, {\n    endianness,\n    dataType: DataType.INT32,\n  });\n\n  supportedDataTypes.set(`${endiannessChar}f4`, {\n    endianness,\n    dataType: DataType.FLOAT32,\n  });\n}\n\nexport function parseNumpyDtype(typestr: unknown): NumpyDtype {\n  const dtype = supportedDataTypes.get(typestr as any);\n  if (dtype === undefined) {\n    throw new Error(`Unsupported numpy data type: ${JSON.stringify(typestr)}`);\n  }\n  return dtype;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Basic support for parsing the Python Numpy 'npy' serialization format.\n *\n * See http://docs.scipy.org/doc/numpy-dev/neps/npy-format.html\n */\n\nimport {DATA_TYPE_ARRAY_CONSTRUCTOR, DATA_TYPE_BYTES, DATA_TYPE_JAVASCRIPT_ELEMENTS_PER_ARRAY_ELEMENT, DataType} from 'neuroglancer/util/data_type';\nimport {convertEndian} from 'neuroglancer/util/endian';\nimport {pythonLiteralParse} from 'neuroglancer/util/json';\nimport {parseNumpyDtype} from 'neuroglancer/util/numpy_dtype';\n\nexport class NumpyArray {\n  constructor(\n      public data: ArrayBufferView, public shape: number[], public dataType: DataType,\n      public fortranOrder: boolean) {}\n}\n\nexport function parseNpy(x: Uint8Array) {\n  // Verify 6-byte magic sequence: 147, 78, 85, 77, 80, 89\n  if (x[0] !== 147 || x[1] !== 78 || x[2] !== 85 || x[3] !== 77 || x[4] !== 80 || x[5] !== 89) {\n    throw new Error('Data does not match npy format.');\n  }\n  const majorVersion = x[6], minorVersion = x[7];\n  if (majorVersion !== 1 || minorVersion !== 0) {\n    throw new Error(`Unsupported npy version ${majorVersion}.${minorVersion}`);\n  }\n  const dv = new DataView(x.buffer, x.byteOffset, x.byteLength);\n  const headerLength = dv.getUint16(8, /*littleEndian=*/ true);\n  const header = new TextDecoder('utf-8').decode(x.subarray(10, headerLength + 10));\n  let headerObject: any;\n  const dataOffset = headerLength + 10;\n  try {\n    headerObject = pythonLiteralParse(header);\n  } catch (e) {\n    throw new Error(`Failed to parse npy header: ${e}`);\n  }\n  const dtype = headerObject['descr'];\n  let shape = headerObject['shape'];\n  let numElements = 1;\n  if (!Array.isArray(shape)) {\n    throw new Error('Invalid shape ${JSON.stringify(shape)}');\n  }\n  for (let dim of shape) {\n    if (typeof dim !== 'number') {\n      throw new Error('Invalid shape ${JSON.stringify(shape)}');\n    }\n    numElements *= dim;\n  }\n  const {dataType, endianness} = parseNumpyDtype(dtype);\n  const bytesPerElement = DATA_TYPE_BYTES[dataType];\n  const javascriptElementsPerArrayElement =\n      DATA_TYPE_JAVASCRIPT_ELEMENTS_PER_ARRAY_ELEMENT[dataType];\n  const arrayConstructor = DATA_TYPE_ARRAY_CONSTRUCTOR[dataType];\n  const javascriptElements = javascriptElementsPerArrayElement * numElements;\n  if (bytesPerElement * numElements + dataOffset !== x.byteLength) {\n    throw new Error('Expected length does not match length of data');\n  }\n  const data = new arrayConstructor(x.buffer, x.byteOffset + dataOffset, javascriptElements);\n  convertEndian(data, endianness, bytesPerElement);\n  return new NumpyArray(data, shape, dataType, headerObject['fortran_order'] === true);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This decodes the BOSS (https://github.com/jhuapl-boss/) NPZ format, which is the Python\n * NPY binary format with zlib encoding.\n *\n * This is NOT the same as the Python NPZ format, which is a ZIP file containing multiple files\n * (each corresponding to a different variable) in NPY binary format.\n */\n\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\nimport {DataType} from 'neuroglancer/sliceview/base';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {vec3Key} from 'neuroglancer/util/geom';\nimport {parseNpy} from 'neuroglancer/util/npy';\n\nexport async function decodeBossNpzChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  let parseResult = parseNpy(await requestAsyncComputation(\n      decodeGzip, cancellationToken, [response], new Uint8Array(response)));\n  let chunkDataSize = chunk.chunkDataSize!;\n  let source = chunk.source!;\n  let {shape} = parseResult;\n  if (shape.length !== 3 || shape[0] !== chunkDataSize[2] || shape[1] !== chunkDataSize[1] ||\n      shape[2] !== chunkDataSize[0]) {\n    throw new Error(\n        `Shape ${JSON.stringify(shape)} does not match chunkDataSize ${vec3Key(chunkDataSize)}`);\n  }\n  let parsedDataType = parseResult.dataType;\n  let {spec} = source;\n  if (parsedDataType !== spec.dataType) {\n    throw new Error(`Data type ${DataType[parsedDataType]} does not match expected data type ${\n        DataType[spec.dataType]}`);\n  }\n  await postProcessRawData(chunk, cancellationToken, parseResult.data);\n}\n", "/**\n * @license\n * Copyright 2017 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkSourceParametersConstructor} from 'neuroglancer/chunk_manager/base';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {BossToken, fetchWithBossCredentials} from 'neuroglancer/datasource/boss/api';\nimport {MeshSourceParameters, VolumeChunkSourceParameters} from 'neuroglancer/datasource/boss/base';\nimport {assignMeshFragmentData, decodeJsonManifestChunk, decodeTriangleVertexPositionsAndIndices, FragmentChunk, ManifestChunk, MeshSource} from 'neuroglancer/mesh/backend';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeBossNpzChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/bossNpz';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {cancellableFetchOk, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {registerSharedObject, SharedObject} from 'neuroglancer/worker_rpc';\n\nlet chunkDecoders = new Map<string, ChunkDecoder>();\nchunkDecoders.set('npz', decodeBossNpzChunk);\nchunkDecoders.set('jpeg', decodeJpegChunk);\n\nlet acceptHeaders = new Map<string, string>();\nacceptHeaders.set('npz', 'application/npygz');\nacceptHeaders.set('jpeg', 'image/jpeg');\n\nfunction BossSource<Parameters, TBase extends {new (...args: any[]): SharedObject}>(\n    Base: TBase, parametersConstructor: ChunkSourceParametersConstructor<Parameters>) {\n  return WithParameters(\n      WithSharedCredentialsProviderCounterpart<BossToken>()(Base), parametersConstructor);\n}\n\n@registerSharedObject()\nexport class BossVolumeChunkSource extends (BossSource(VolumeChunkSource, VolumeChunkSourceParameters)) {\n  chunkDecoder = chunkDecoders.get(this.parameters.encoding)!;\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    let url = `${parameters.baseUrl}/latest/cutout/${parameters.collection}/${parameters.experiment}/${\n        parameters.channel}/${parameters.resolution}`;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let chunkDataSize = chunk.chunkDataSize!;\n      for (let i = 0; i < 3; ++i) {\n        url += `/${chunkPosition[i]}:${chunkPosition[i] + chunkDataSize[i]}`;\n      }\n    }\n    url += '/';\n\n    if (parameters.window !== undefined) {\n      url += `?window=${parameters.window[0]},${parameters.window[1]}`;\n    }\n    const response = await fetchWithBossCredentials(\n        this.credentialsProvider, url,\n        {headers: {'Accept': acceptHeaders.get(parameters.encoding)!}}, responseArrayBuffer,\n        cancellationToken);\n    await this.chunkDecoder(chunk, cancellationToken, response);\n  }\n}\n\nfunction decodeManifestChunk(chunk: ManifestChunk, response: any) {\n  return decodeJsonManifestChunk(chunk, response, 'fragments');\n}\n\nfunction decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  assignMeshFragmentData(\n      chunk,\n      decodeTriangleVertexPositionsAndIndices(\n          response, Endianness.LITTLE, /*vertexByteOffset=*/ 4, numVertices));\n}\n\n@registerSharedObject()\nexport class BossMeshSource extends (BossSource(MeshSource, MeshSourceParameters)) {\n  download(chunk: ManifestChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return cancellableFetchOk(\n               `${parameters.baseUrl}${chunk.objectId}`, {}, responseArrayBuffer, cancellationToken)\n        .then(response => decodeManifestChunk(chunk, response));\n  }\n\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    return cancellableFetchOk(\n               `${parameters.baseUrl}${chunk.fragmentId}`, {}, responseArrayBuffer,\n               cancellationToken)\n        .then(response => decodeFragmentChunk(chunk, response));\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum VolumeChunkEncoding {\n  JPEG,\n  RAW,\n  COMPRESSED_SEGMENTATION,\n  COMPRESSED_SEGMENTATIONARRAY\n}\n\nexport class DVIDSourceParameters {\n  baseUrl: string;\n  nodeKey: string;\n  dataInstanceKey: string;\n  authServer?: string;\n  user?: string;\n}\n\nexport class VolumeChunkSourceParameters extends DVIDSourceParameters {\n  dataScale: string;\n  encoding: VolumeChunkEncoding;\n  static RPC_ID = 'dvid/VolumeChunkSource';\n}\n\nexport class SkeletonSourceParameters extends DVIDSourceParameters {\n  static RPC_ID = 'dvid/SkeletonSource';\n}\n\nexport class MeshSourceParameters extends DVIDSourceParameters {\n  static RPC_ID = 'dvid/MeshSource';\n}\n", "/**\n * @license\n * This work is a derivative of the Google Neuroglancer project,\n * Copyright 2016 Google Inc.\n * The Derivative Work is covered by\n * Copyright 2020 Howard Hughes Medical Institute\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SkeletonChunk} from 'neuroglancer/skeleton/backend';\n\nexport function decodeSwcSkeletonChunk(chunk: SkeletonChunk, swcStr: string) {\n  let swcObjects: Array<PointObj> = parseSwc(swcStr);\n\n  if (swcObjects.length < 1) {\n    throw new Error(`ERROR parsing swc data`);\n  }\n\n  let indexMap = new Uint32Array(swcObjects.length);\n\n  let nodeCount = 0;\n  let edgeCount = 0;\n  swcObjects.forEach((swcObj, i) => {\n    if (swcObj) {\n      indexMap[i] = nodeCount++;\n      if (swcObj.parent >= 0) {\n        ++edgeCount;\n      }\n    }\n  });\n\n  let glVertices = new Float32Array(3 * nodeCount);\n  let glIndices = new Uint32Array(2 * edgeCount);\n\n  let nodeIndex = 0;\n  let edgetIndex = 0;\n  swcObjects.forEach(function(swcObj) {\n    if (swcObj) {\n      glVertices[3 * nodeIndex] = swcObj.x;\n      glVertices[3 * nodeIndex + 1] = swcObj.y;\n      glVertices[3 * nodeIndex + 2] = swcObj.z;\n\n      if (swcObj.parent >= 0) {\n        glIndices[2 * edgetIndex] = nodeIndex;\n        glIndices[2 * edgetIndex + 1] = indexMap[swcObj.parent];\n        ++edgetIndex;\n      }\n      ++nodeIndex;\n    }\n  });\n\n  chunk.indices = glIndices;\n  chunk.vertexPositions = glVertices;\n}\n\n/*\n * Parses a standard SWC file into an array of point objects\n * modified from\n * https://github.com/JaneliaSciComp/SharkViewer/blob/d9969a7c513beee32ff9650b00bf79cda8f3c76a/html/js/sharkviewer_loader.js\n */\nfunction parseSwc(swcStr: string) {\n  let swcInputAr = swcStr.split('\\n');\n  let swcObjectsAr: Array<PointObj> = new Array();\n  let float = '-?\\\\d*(?:\\\\.\\\\d+)?';\n  let pattern = new RegExp('^[ \\\\t]*(' + [\n    '\\\\d+',    // index\n    '\\\\d+',    // type\n    float,     // x\n    float,     // y\n    float,     // z\n    float,     // radius\n    '-1|\\\\d+'  // parent\n  ].join(')[ \\\\t]+(') + ')[ \\\\t]*$');\n\n  swcInputAr.forEach(function(e) {\n    // if line meets swc point criteria, add it to the array\n    let match = e.match(pattern);\n    if (match) {\n      let point = swcObjectsAr[parseInt(match[1], 10)] = new PointObj();\n      point.type = parseInt(match[2], 10);\n      point.x = parseFloat(match[3]);\n      point.y = parseFloat(match[4]);\n      point.z = parseFloat(match[5]);\n      point.radius = parseFloat(match[6]);\n      point.parent = parseInt(match[7], 10);\n    }\n  });\n  return swcObjectsAr;\n}\n\nclass PointObj {\n  type: number;\n  x: number;\n  y: number;\n  z: number;\n  radius: number;\n  parent: number;\n}\n", "/**\n * @license\n * This work is a derivative of the Google Neuroglancer project,\n * Copyright 2016 Google Inc.\n * The Derivative Work is covered by\n * Copyright 2019 Howard Hughes Medical Institute\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {fetchWithCredentials} from 'neuroglancer/credentials_provider/http_request';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {cancellableFetchOk, responseArrayBuffer, responseJson, ResponseTransform} from 'neuroglancer/util/http_request';\n\nexport interface DVIDToken {\n  // If token is undefined, it indicates anonymous credentials that may be retried.\n  token?: string;\n}\n\nexport const credentialsKey = 'DVID';\n\ninterface HttpCall {\n  method: 'GET'|'POST'|'DELETE'|'HEAD';\n  url: string;\n  payload?: string;\n}\n\nexport class DVIDInstance {\n  constructor(public baseUrl: string, public nodeKey: string) {}\n\n  getNodeApiUrl(path = ''): string {\n    return `${this.baseUrl}/api/node/${this.nodeKey}${path}`;\n  }\n\n  getRepoInfoUrl(): string {\n    return `${this.baseUrl}/api/repos/info`;\n  }\n\n  getKeyValueUrl(dataName: string, key: string) {\n    return `${this.getNodeApiUrl()}/${dataName}/key/${key}`;\n  }\n\n  getKeyValueRangeUrl(dataName: string, startKey: string, endKey: string) {\n    return `${this.getNodeApiUrl()}/${dataName}/keyrange/${startKey}/${endKey}`;\n  }\n\n  getKeyValuesUrl(dataName: string) {\n    return `${this.getNodeApiUrl()}/${dataName}/keyvalues?jsontar=false`;\n  }\n}\n\nexport function appendQueryStringForDvid(url: string, user: string|null|undefined) {\n  if (url.includes('?')) {\n    url += '&';\n  } else {\n    url += '?';\n  }\n  url += 'app=Neuroglancer';\n  if (user) {\n    url += `&u=${user}`;\n  }\n  return url;\n}\n\nexport function responseText(response: Response): Promise<any> {\n  return response.text();\n}\n\nexport function makeRequest(\n    httpCall: HttpCall&{responseType: 'arraybuffer'},\n    cancellationToken?: CancellationToken): Promise<ArrayBuffer>;\n\nexport function makeRequest(\n    httpCall: HttpCall&{responseType: 'json'}, cancellationToken?: CancellationToken): Promise<any>;\n\nexport function makeRequest(\n    httpCall: HttpCall&{responseType: ''}, cancellationToken?: CancellationToken): Promise<any>;\n\nexport function makeRequest(\n    httpCall: HttpCall&{responseType: XMLHttpRequestResponseType},\n    cancellationToken: CancellationToken = uncancelableToken): any {\n  let requestInfo = `${httpCall.url}`;\n  let init = {method: httpCall.method, body: httpCall.payload};\n\n  if (httpCall.responseType === '') {\n    return cancellableFetchOk(requestInfo, init, responseText, cancellationToken);\n  } else {\n    return cancellableFetchOk(requestInfo, init, responseJson, cancellationToken);\n  }\n}\n\nexport function makeRequestWithCredentials(\n    credentialsProvider: CredentialsProvider<DVIDToken>,\n    httpCall: HttpCall&{responseType: 'arraybuffer'},\n    cancellationToken?: CancellationToken): Promise<ArrayBuffer>;\n\nexport function makeRequestWithCredentials(\n    credentialsProvider: CredentialsProvider<DVIDToken>, httpCall: HttpCall&{responseType: 'json'},\n    cancellationToken?: CancellationToken): Promise<any>;\n\nexport function makeRequestWithCredentials(\n    credentialsProvider: CredentialsProvider<DVIDToken>, httpCall: HttpCall&{responseType: ''},\n    cancellationToken?: CancellationToken): Promise<any>;\n\nexport function makeRequestWithCredentials(\n    credentialsProvider: CredentialsProvider<DVIDToken>,\n    httpCall: HttpCall&{responseType: XMLHttpRequestResponseType},\n    cancellationToken: CancellationToken = uncancelableToken): Promise<any> {\n  return fetchWithDVIDCredentials(\n      credentialsProvider, httpCall.url, {method: httpCall.method, body: httpCall.payload},\n      httpCall.responseType === '' ?\n          responseText :\n          (httpCall.responseType === 'json' ? responseJson : responseArrayBuffer),\n      cancellationToken);\n}\n\nexport function fetchWithDVIDCredentials<T>(\n    credentialsProvider: CredentialsProvider<DVIDToken>, input: string, init: RequestInit,\n    transformResponse: ResponseTransform<T>,\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  return fetchWithCredentials(\n      credentialsProvider, input, init, transformResponse,\n      (credentials: DVIDToken, init: RequestInit) => {\n        let newInit: RequestInit = {...init};\n        if (credentials.token) {\n          newInit.headers = {...newInit.headers, Authorization: `Bearer ${credentials}`};\n        }\n        return newInit;\n      },\n      error => {\n        const {status} = error;\n        if (status === 403 || status === 401) {\n          // Authorization needed.  Retry with refreshed token.\n          return 'refresh';\n        }\n        throw error;\n      },\n      cancellationToken);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {MeshSourceParameters, SkeletonSourceParameters, VolumeChunkEncoding, VolumeChunkSourceParameters} from 'neuroglancer/datasource/dvid/base';\nimport {assignMeshFragmentData, decodeTriangleVertexPositionsAndIndices, FragmentChunk, ManifestChunk, MeshSource} from 'neuroglancer/mesh/backend';\nimport {SkeletonChunk, SkeletonSource} from 'neuroglancer/skeleton/backend';\nimport {decodeSwcSkeletonChunk} from 'neuroglancer/skeleton/decode_swc_skeleton';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {registerSharedObject, SharedObject} from 'neuroglancer/worker_rpc';\nimport {ChunkSourceParametersConstructor} from 'neuroglancer/chunk_manager/base';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {DVIDInstance, DVIDToken, makeRequestWithCredentials, appendQueryStringForDvid} from 'neuroglancer/datasource/dvid/api';\n\nfunction DVIDSource<Parameters, TBase extends {new (...args: any[]): SharedObject}>(\n  Base: TBase, parametersConstructor: ChunkSourceParametersConstructor<Parameters>) {\n  return WithParameters(\n    WithSharedCredentialsProviderCounterpart<DVIDToken>()(Base), parametersConstructor);\n}\n\n@registerSharedObject() export class DVIDSkeletonSource extends\n(DVIDSource(SkeletonSource, SkeletonSourceParameters)) {\n  download(chunk: SkeletonChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    let bodyid = `${chunk.objectId}`;\n    const url = `${parameters.baseUrl}/api/node/${parameters['nodeKey']}` +\n        `/${parameters['dataInstanceKey']}/key/` + bodyid + '_swc';\n    return makeRequestWithCredentials(this.credentialsProvider, {\n          method: 'GET',\n          url: appendQueryStringForDvid(url, parameters.user),\n          responseType: 'arraybuffer'\n        }, cancellationToken)\n        .then(response => {\n          let enc = new TextDecoder('utf-8');\n          decodeSwcSkeletonChunk(chunk, enc.decode(response));\n        });\n  }\n}\n\nexport function decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  assignMeshFragmentData(\n      chunk,\n      decodeTriangleVertexPositionsAndIndices(\n          response, Endianness.LITTLE, /*vertexByteOffset=*/ 4, numVertices));\n}\n\n@registerSharedObject() export class DVIDMeshSource extends\n(DVIDSource(MeshSource, MeshSourceParameters)) {\n  download(chunk: ManifestChunk) {\n    // DVID does not currently store meshes chunked, the main\n    // use-case is for low-resolution 3D views.\n    // for now, fragmentId is the body id\n    chunk.fragmentIds = [`${chunk.objectId}`];\n    return Promise.resolve(undefined);\n  }\n\n  downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const dvidInstance = new DVIDInstance(parameters.baseUrl, parameters.nodeKey);\n    const meshUrl = dvidInstance.getKeyValueUrl(parameters.dataInstanceKey, `${chunk.fragmentId}.ngmesh`);\n\n    return makeRequestWithCredentials(this.credentialsProvider, {\n          method: 'GET',\n          url: appendQueryStringForDvid(meshUrl, parameters.user),\n          responseType: 'arraybuffer'\n        }, cancellationToken)\n        .then(response => decodeFragmentChunk(chunk, response));\n  }\n}\n\n@registerSharedObject() export class DVIDVolumeChunkSource extends\n(DVIDSource(VolumeChunkSource, VolumeChunkSourceParameters)) {\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let params = this.parameters;\n    let path: string;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let chunkDataSize = chunk.chunkDataSize!;\n\n      // if the volume is an image, get a jpeg\n      path = this.getPath(chunkPosition, chunkDataSize);\n    }\n    const decoder = this.getDecoder(params);\n    const response = await makeRequestWithCredentials(\n        this.credentialsProvider,\n        {\n          method: 'GET',\n          url: appendQueryStringForDvid(`${params.baseUrl}${path}`, params.user),\n          responseType: 'arraybuffer'\n        }, cancellationToken);\n    await decoder(\n        chunk, cancellationToken,\n        (params.encoding === VolumeChunkEncoding.JPEG) ? response.slice(16) : response);\n  }\n  getPath(chunkPosition: Float32Array, chunkDataSize: Uint32Array) {\n    let params = this.parameters;\n    if (params.encoding === VolumeChunkEncoding.JPEG) {\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/subvolblocks/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}`;\n    } else if (params.encoding === VolumeChunkEncoding.RAW) {\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}/jpeg`;\n    } else if (params.encoding === VolumeChunkEncoding.COMPRESSED_SEGMENTATIONARRAY) {\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${\n                 chunkPosition[2]}?compression=googlegzip&scale=${params['dataScale']}`;\n    } else {\n      // encoding is COMPRESSED_SEGMENTATION\n      return `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/` +\n          `${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/` +\n          `${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}?compression=googlegzip`;\n    }\n  }\n  getDecoder(params: any) {\n    if ((params.encoding === VolumeChunkEncoding.JPEG) ||\n        (params.encoding === VolumeChunkEncoding.RAW)) {\n      return decodeJpegChunk;\n    } else {\n      // encoding is COMPRESSED_SEGMENTATION\n      return decodeCompressedSegmentationChunk;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class RenderBaseSourceParameters {\n  baseUrl: string;\n  owner: string;\n  project: string;\n  stack: string;\n  channel: string|undefined;\n}\n\nexport class RenderSourceParameters extends RenderBaseSourceParameters {\n  minIntensity: number|undefined;\n  maxIntensity: number|undefined;\n  maxTileSpecsToRender: number|undefined;\n  filter: boolean|undefined;\n}\n\nexport class TileChunkSourceParameters extends RenderSourceParameters {\n  dims: string;\n  level: number;\n  encoding: string;\n\n  static RPC_ID = 'render/TileChunkSource';\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeJpeg} from 'neuroglancer/async_computation/decode_jpeg_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {TileChunkSourceParameters} from 'neuroglancer/datasource/render/base';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {cancellableFetchOk, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\nconst chunkDecoders = new Map<string, ChunkDecoder>();\nchunkDecoders.set(\n    'jpg',\n    async (chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) => {\n      const chunkDataSize = chunk.chunkDataSize!;\n      const decoded = await requestAsyncComputation(\n          decodeJpeg, cancellationToken, [response], new Uint8Array(response), chunkDataSize[0],\n          chunkDataSize[1] * chunkDataSize[2], 3, true);\n      await postProcessRawData(chunk, cancellationToken, decoded);\n    });\nchunkDecoders.set('raw16', (chunk, cancellationToken, response) => {\n  return decodeRawChunk(chunk, cancellationToken, response, Endianness.BIG);\n});\n\n@registerSharedObject() export class TileChunkSource extends\n(WithParameters(VolumeChunkSource, TileChunkSourceParameters)) {\n  chunkDecoder = chunkDecoders.get(this.parameters.encoding)!;\n\n  queryString = (() => {\n    let {parameters} = this;\n    let query_params: string[] = [];\n    if (parameters.channel !== undefined) {\n      query_params.push('channels=' + parameters.channel);\n    }\n    if (parameters.minIntensity !== undefined) {\n      query_params.push(`minIntensity=${JSON.stringify(parameters.minIntensity)}`);\n    }\n    if (parameters.maxIntensity !== undefined) {\n      query_params.push(`maxIntensity=${JSON.stringify(parameters.maxIntensity)}`);\n    }\n    if (parameters.maxTileSpecsToRender !== undefined) {\n      query_params.push(`maxTileSpecsToRender=${JSON.stringify(parameters.maxTileSpecsToRender)}`);\n    }\n    if (parameters.filter !== undefined) {\n      query_params.push(`filter=${JSON.stringify(parameters.filter)}`);\n    }\n    return query_params.join('&');\n  })();\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    let {parameters} = this;\n    let {chunkGridPosition} = chunk;\n\n    // Calculate scale.\n    let scale = 1.0 / Math.pow(2, parameters.level);\n\n    // Needed by JPEG decoder.\n    chunk.chunkDataSize = this.spec.chunkDataSize;\n\n    let xTileSize = chunk.chunkDataSize[0] * Math.pow(2, parameters.level);\n    let yTileSize = chunk.chunkDataSize[1] * Math.pow(2, parameters.level);\n\n    // Convert grid position to global coordinates position.\n    let chunkPosition = vec3.create();\n\n    chunkPosition[0] = chunkGridPosition[0] * xTileSize;\n    chunkPosition[1] = chunkGridPosition[1] * yTileSize;\n    chunkPosition[2] = chunkGridPosition[2];\n\n    // GET\n    // /v1/owner/{owner}/project/{project}/stack/{stack}/z/{z}/box/{x},{y},{width},{height},{scale}/jpeg-image\n    let imageMethod: string;\n    if (parameters.encoding === 'raw16') {\n      imageMethod = 'raw16-image';\n    } else {\n      imageMethod = 'jpeg-image';\n    }\n    let path = `/render-ws/v1/owner/${parameters.owner}/project/${parameters.project}/stack/${\n        parameters.stack}/z/${chunkPosition[2]}/box/${chunkPosition[0]},${chunkPosition[1]},${\n        xTileSize},${yTileSize},${scale}/${imageMethod}`;\n    const response = await cancellableFetchOk(\n        `${parameters.baseUrl}${path}?${this.queryString}`, {}, responseArrayBuffer,\n        cancellationToken);\n    await this.chunkDecoder(chunk, cancellationToken, response);\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst OBJECT_ID_SYMBOL = Symbol('objectId');\nlet nextObjectId = 0;\n\n/**\n * Returns a string that uniquely identifies a particular primitive value or object instance.\n */\nexport function getObjectId(x: any) {\n  if (x instanceof Object) {\n    let id = x[OBJECT_ID_SYMBOL];\n    if (id === undefined) {\n      id = x[OBJECT_ID_SYMBOL] = nextObjectId++;\n    }\n    return `o${id}`;\n  } else {\n    return '' + JSON.stringify(x);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides file listing and completion for storage systems supporting the S3 XML API (e.g. S3\n * and GCS).\n */\n\nimport {fetchWithOAuth2Credentials} from 'neuroglancer/credentials_provider/oauth2';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {BasicCompletionResult} from 'neuroglancer/util/completion';\nimport {SpecialProtocolCredentialsProvider} from 'neuroglancer/util/special_protocol_request';\n\nexport async function getS3BucketListing(\n    credentialsProvider: SpecialProtocolCredentialsProvider, bucketUrl: string, prefix: string,\n    delimiter: string, cancellationToken: CancellationToken): Promise<string[]> {\n  const response = await fetchWithOAuth2Credentials(\n      credentialsProvider,\n      `${bucketUrl}?prefix=${encodeURIComponent(prefix)}` +\n          `&delimiter=${encodeURIComponent(delimiter)}`,\n      /*init=*/ {}, x => x.text(), cancellationToken);\n  const doc = new DOMParser().parseFromString(response, 'application/xml');\n  const commonPrefixNodes = doc.evaluate(\n      '//*[name()=\"CommonPrefixes\"]/*[name()=\"Prefix\"]', doc, null,\n      XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);\n  const results: string[] = [];\n  for (let i = 0, n = commonPrefixNodes.snapshotLength; i < n; ++i) {\n    results.push(commonPrefixNodes.snapshotItem(i)!.textContent || '');\n  }\n  const contents = doc.evaluate(\n      '//*[name()=\"Contents\"]/*[name()=\"Key\"]', doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null);\n  for (let i = 0, n = contents.snapshotLength; i < n; ++i) {\n    results.push(contents.snapshotItem(i)!.textContent || '');\n  }\n  return results;\n}\n\nexport async function getS3CompatiblePathCompletions(\n    credentialsProvider: SpecialProtocolCredentialsProvider, enteredBucketUrl: string,\n    bucketUrl: string, path: string,\n    cancellationToken: CancellationToken): Promise<BasicCompletionResult> {\n  let prefix = path;\n  if (!prefix.startsWith('/')) throw null;\n  const paths = await getS3BucketListing(\n      credentialsProvider, bucketUrl, path.substring(1), '/', cancellationToken);\n  let offset = path.lastIndexOf('/');\n  return {\n    offset: offset + enteredBucketUrl.length + 1,\n    completions: paths.map(x => ({value: x.substring(offset)})),\n  };\n}\n", "/**\n * @license\n * Copyright 2021 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {cancellableFetchOk, ResponseTransform} from 'neuroglancer/util/http_request';\nimport {getS3CompatiblePathCompletions} from 'neuroglancer/util/s3_bucket_listing';\n\n// Support for s3:// special protocol.\n\nexport async function cancellableFetchS3Ok<T>(\n    bucket: string, path: string, requestInit: RequestInit, transformResponse: ResponseTransform<T>,\n    cancellationToken: CancellationToken = uncancelableToken) {\n  return await cancellableFetchOk(\n      `https://${bucket}.s3.amazonaws.com${path}`, requestInit, transformResponse,\n      cancellationToken);\n}\n\nexport async function getS3PathCompletions(\n    bucket: string, path: string, cancellationToken: CancellationToken) {\n  return await getS3CompatiblePathCompletions(\n      undefined, `s3://${bucket}`, `https://${bucket}.s3.amazonaws.com`, path,\n      cancellationToken);\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CredentialsManager, MaybeOptionalCredentialsProvider} from 'neuroglancer/credentials_provider';\nimport {fetchWithOAuth2Credentials} from 'neuroglancer/credentials_provider/oauth2';\nimport {CancellationToken, uncancelableToken} from 'neuroglancer/util/cancellation';\nimport {parseUrl, ResponseTransform} from 'neuroglancer/util/http_request';\nimport {getRandomHexString} from 'neuroglancer/util/random';\nimport {cancellableFetchS3Ok} from 'neuroglancer/util/s3';\n\nexport type SpecialProtocolCredentials = any;\nexport type SpecialProtocolCredentialsProvider =\n    MaybeOptionalCredentialsProvider<SpecialProtocolCredentials>;\n\nfunction getMiddleAuthCredentialsProvider(\n    credentialsManager: CredentialsManager, url: string): SpecialProtocolCredentialsProvider {\n  return credentialsManager.getCredentialsProvider('middleauthapp', new URL(url).origin);\n}\n\nfunction getNgauthCredentialsProvider(\n    credentialsManager: CredentialsManager, serverUrl: string,\n    path: string): SpecialProtocolCredentialsProvider {\n  const bucketPattern = /^\\/([^\\/]+)/;\n  const m = path.match(bucketPattern);\n  if (m === null) return undefined;\n  return typeof NEUROGLANCER_PYTHON_INTEGRATION !== 'undefined' ?\n      credentialsManager.getCredentialsProvider('gcs', {bucket: m[1]}) :\n      credentialsManager.getCredentialsProvider(\n          'ngauth_gcs', {authServer: serverUrl, bucket: m[1]});\n}\n\nexport function parseSpecialUrl(url: string, credentialsManager: CredentialsManager):\n    {url: string, credentialsProvider: SpecialProtocolCredentialsProvider} {\n  const u = parseUrl(url);\n  switch (u.protocol) {\n    case 'gs':\n    case 'gs+xml':\n      return {\n        credentialsProvider: typeof NEUROGLANCER_PYTHON_INTEGRATION !== 'undefined' ?\n            credentialsManager.getCredentialsProvider('gcs', {bucket: u.host}) :\n            undefined,\n        url,\n      };\n    case 'gs+ngauth+http':\n      return {\n        credentialsProvider:\n            getNgauthCredentialsProvider(credentialsManager, `http://${u.host}`, u.path),\n        url: 'gs:/' + u.path,\n      };\n    case 'gs+ngauth+https':\n      return {\n        credentialsProvider:\n            getNgauthCredentialsProvider(credentialsManager, `https://${u.host}`, u.path),\n        url: 'gs:/' + u.path,\n      };\n    case 'gs+xml+ngauth+http':\n      return {\n        credentialsProvider:\n            getNgauthCredentialsProvider(credentialsManager, `http://${u.host}`, u.path),\n        url: 'gs+xml:/' + u.path,\n      };\n    case 'gs+xml+ngauth+https':\n      return {\n        credentialsProvider:\n            getNgauthCredentialsProvider(credentialsManager, `https://${u.host}`, u.path),\n        url: 'gs+xml:/' + u.path,\n      };\n    case 'middleauth+https':\n      url = url.substr('middleauth+'.length);\n      return {\n        credentialsProvider: getMiddleAuthCredentialsProvider(credentialsManager, url),\n        url: url,\n      };\n    case 's3':\n      return {\n        credentialsProvider: undefined,\n        url,\n      };\n    default:\n      return {\n        credentialsProvider: undefined,\n        url,\n      };\n  }\n}\n\nexport async function cancellableFetchSpecialOk<T>(\n    credentialsProvider: SpecialProtocolCredentialsProvider, url: string, init: RequestInit,\n    transformResponse: ResponseTransform<T>,\n    cancellationToken: CancellationToken = uncancelableToken): Promise<T> {\n  const u = parseUrl(url);\n  switch (u.protocol) {\n    case 'gs':\n      // Include random query string parameter (ignored by GCS) to bypass GCS cache and ensure a\n      // cached response is never used.\n      //\n      // This addresses two issues related to GCS:\n      //\n      // 1. GCS fails to send an updated `Access-Control-Allow-Origin` header in 304 responses to\n      //    cache revalidation requests.\n      //\n      //    https://bugs.chromium.org/p/chromium/issues/detail?id=1214563#c2\n      //\n      //    The random query string parameter ensures cached responses are never used.\n      //\n      //    Note: This issue does not apply to gs+xml because with the XML API, the\n      //    Access-Control-Allow-Origin response header does not vary with the Origin.\n      //\n      // 2. If the object does not prohibit caching (e.g. public bucket and default `cache-control`\n      //    metadata value), GCS may return stale responses.\n      //\n      return fetchWithOAuth2Credentials(\n          credentialsProvider,\n          `https://www.googleapis.com/storage/v1/b/${u.host}/o/` +\n              `${encodeURIComponent(u.path.substring(1))}?alt=media` +\n              `&neuroglancer=${getRandomHexString()}`,\n          init, transformResponse, cancellationToken);\n    case 'gs+xml':\n      return fetchWithOAuth2Credentials(\n          credentialsProvider,\n          `https://storage.googleapis.com/${u.host}${u.path}` +\n              `?neuroglancer=${getRandomHexString()}`,\n          init, transformResponse, cancellationToken);\n    case 's3':\n      return cancellableFetchS3Ok(u.host, u.path, init, transformResponse, cancellationToken);\n    default:\n      return fetchWithOAuth2Credentials(\n          credentialsProvider, url, init, transformResponse, cancellationToken);\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Provides a simple way to request a file on the backend with priority integration.\n */\n\nimport {Chunk, ChunkManager, ChunkSourceBase} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {CANCELED, CancellationToken, makeCancelablePromise} from 'neuroglancer/util/cancellation';\nimport {Borrowed, Owned} from 'neuroglancer/util/disposable';\nimport {responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {stableStringify} from 'neuroglancer/util/json';\nimport {getObjectId} from 'neuroglancer/util/object_id';\nimport {cancellableFetchSpecialOk, SpecialProtocolCredentialsProvider} from 'neuroglancer/util/special_protocol_request';\n\nexport type PriorityGetter = () => {\n  priorityTier: ChunkPriorityTier, priority: number\n};\n\ninterface FileDataRequester<Data> {\n  resolve: (data: Data) => void;\n  reject: (error: any) => void;\n  getPriority: PriorityGetter;\n}\n\nclass GenericSharedDataChunk<Key, Data> extends Chunk {\n  decodedKey?: Key;\n  data?: Data;\n  requesters?: Set<FileDataRequester<Data>>;\n  backendOnly = true;\n\n  initialize(key: string) {\n    super.initialize(key);\n    this.requesters = new Set<FileDataRequester<Data>>();\n  }\n\n  downloadSucceeded() {\n    super.downloadSucceeded();\n    let {requesters, data} = this;\n    this.requesters = undefined;\n    for (let requester of requesters!) {\n      requester.resolve(data!);\n    }\n  }\n\n  downloadFailed(error: any) {\n    super.downloadFailed(error);\n    let {requesters} = this;\n    this.requesters = undefined;\n    for (let requester of requesters!) {\n      requester.reject(error);\n    }\n  }\n\n  freeSystemMemory() {\n    this.data = undefined;\n  }\n}\n\nexport interface GenericSharedDataSourceOptions<Key, Data> {\n  encodeKey?: (key: Key) => string;\n  download: (key: Key, cancellationToken: CancellationToken) => Promise<{size: number, data: Data}>;\n  sourceQueueLevel?: number;\n}\n\nexport class GenericSharedDataSource<Key, Data> extends ChunkSourceBase {\n  chunks: Map<string, GenericSharedDataChunk<Key, Data>>;\n\n  private encodeKeyFunction: (key: Key) => string;\n\n  private downloadFunction:\n      (key: Key, cancellationToken: CancellationToken) => Promise<{size: number, data: Data}>;\n\n  constructor(\n      chunkManager: Owned<ChunkManager>, options: GenericSharedDataSourceOptions<Key, Data>) {\n    super(chunkManager);\n    this.registerDisposer(chunkManager);\n    const {encodeKey = stableStringify} = options;\n    this.downloadFunction = options.download;\n    this.encodeKeyFunction = encodeKey;\n    const {sourceQueueLevel = 0} = options;\n    this.sourceQueueLevel = sourceQueueLevel;\n\n    // This source is unusual in that it updates its own chunk priorities.\n    this.registerDisposer(this.chunkManager.recomputeChunkPrioritiesLate.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  updateChunkPriorities() {\n    let {chunkManager} = this;\n    for (let chunk of this.chunks.values()) {\n      let {requesters} = chunk;\n      if (requesters !== undefined) {\n        for (let requester of requesters) {\n          const {priorityTier, priority} = requester.getPriority();\n          if (priorityTier === ChunkPriorityTier.RECENT) continue;\n          chunkManager.requestChunk(chunk, priorityTier, priority);\n        }\n      }\n    }\n  }\n\n  async download(chunk: GenericSharedDataChunk<Key, Data>, cancellationToken: CancellationToken) {\n    const {size, data} = await this.downloadFunction(chunk.decodedKey!, cancellationToken);\n    chunk.systemMemoryBytes = size;\n    chunk.data = data;\n  }\n\n  /**\n   * Precondition: priorityTier <= ChunkPriorityTier.LAST_ORDERED_TIER\n   */\n  getData(key: Key, getPriority: PriorityGetter, cancellationToken: CancellationToken) {\n    const encodedKey = this.encodeKeyFunction(key);\n    let chunk = this.chunks.get(encodedKey);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_<GenericSharedDataChunk<Key, Data>>(GenericSharedDataChunk);\n      chunk.decodedKey = key;\n      chunk.initialize(encodedKey);\n      this.addChunk(chunk);\n    }\n    return makeCancelablePromise<Data>(cancellationToken, (resolve, reject, token) => {\n      // If the data is already available or the request has already failed, resolve/reject the\n      // promise immediately.\n      switch (chunk!.state) {\n        case ChunkState.FAILED:\n          reject(chunk!.error);\n          return;\n\n        case ChunkState.SYSTEM_MEMORY_WORKER:\n          resolve(chunk!.data!);\n          return;\n      }\n      const requester: FileDataRequester<Data> = {resolve, reject, getPriority};\n      chunk!.requesters!.add(requester);\n      token.add(() => {\n        let {requesters} = chunk!;\n        if (requesters !== undefined) {\n          requesters.delete(requester);\n          this.chunkManager.scheduleUpdateChunkPriorities();\n        }\n        reject(CANCELED);\n      });\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    });\n  }\n\n  static get<Key, Data>(\n      chunkManager: Borrowed<ChunkManager>, memoizeKey: string,\n      options: GenericSharedDataSourceOptions<Key, Data>) {\n    return chunkManager.memoize.get(\n        `getFileSource:${memoizeKey}`,\n        () => new GenericSharedDataSource(chunkManager.addRef(), options));\n  }\n\n  static getData<Key, Data>(\n      chunkManager: Borrowed<ChunkManager>, memoizeKey: string,\n      options: GenericSharedDataSourceOptions<Key, Data>, key: Key, getPriority: PriorityGetter,\n      cancellationToken: CancellationToken) {\n    const source = GenericSharedDataSource.get(chunkManager, memoizeKey, options);\n    const result = source.getData(key, getPriority, cancellationToken);\n    source.dispose();\n    return result;\n  }\n\n  static getUrl<Data>(\n      chunkManager: Borrowed<ChunkManager>, credentialsProvider: SpecialProtocolCredentialsProvider,\n      decodeFunction: (buffer: ArrayBuffer, cancellationToken: CancellationToken) =>\n          Promise<{size: number, data: Data}>,\n      url: string, getPriority: PriorityGetter, cancellationToken: CancellationToken) {\n    return GenericSharedDataSource.getData<string, Data>(\n        chunkManager, `${getObjectId(decodeFunction)}`, {\n          download: (url: string, cancellationToken: CancellationToken) =>\n              cancellableFetchSpecialOk(\n                  credentialsProvider, url, {}, responseArrayBuffer, cancellationToken)\n                  .then(response => decodeFunction(response, cancellationToken))\n        },\n        url, getPriority, cancellationToken);\n  }\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnnotationPropertySpec, AnnotationType} from 'neuroglancer/annotation';\nimport {VertexAttributeInfo} from 'neuroglancer/skeleton/base';\nimport {mat4} from 'neuroglancer/util/geom';\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  JPEG,\n  COMPRESSED_SEGMENTATION,\n  COMPRESSO,\n  PNG\n}\n\nexport class VolumeChunkSourceParameters {\n  url: string;\n  encoding: VolumeChunkEncoding;\n  sharding: ShardingParameters|undefined;\n\n  static RPC_ID = 'precomputed/VolumeChunkSource';\n}\n\n\nexport class MeshSourceParameters {\n  url: string;\n  lod: number;\n\n  static RPC_ID = 'precomputed/MeshSource';\n}\n\nexport enum DataEncoding {\n  RAW = 0,\n  GZIP = 1,\n}\n\nexport enum ShardingHashFunction {\n  IDENTITY = 0,\n  MURMURHASH3_X86_128 = 1,\n}\n\nexport interface ShardingParameters {\n  hash: ShardingHashFunction;\n  preshiftBits: number;\n  minishardBits: number;\n  shardBits: number;\n  minishardIndexEncoding: DataEncoding;\n  dataEncoding: DataEncoding;\n}\n\nexport class MultiscaleMeshMetadata {\n  transform: mat4;\n  lodScaleMultiplier: number;\n  vertexQuantizationBits: number;\n  sharding: ShardingParameters|undefined;\n}\n\nexport class MultiscaleMeshSourceParameters {\n  url: string;\n  metadata: MultiscaleMeshMetadata;\n\n  static RPC_ID = 'precomputed/MultiscaleMeshSource';\n}\n\nexport interface SkeletonMetadata {\n  transform: mat4;\n  vertexAttributes: Map<string, VertexAttributeInfo>;\n  sharding: ShardingParameters|undefined;\n}\n\nexport class SkeletonSourceParameters {\n  url: string;\n  metadata: SkeletonMetadata;\n\n  static RPC_ID = 'precomputed/SkeletonSource';\n}\n\nexport class AnnotationSpatialIndexSourceParameters {\n  url: string;\n  sharding: ShardingParameters|undefined;\n  static RPC_ID = 'precomputed/AnnotationSpatialIndexSource';\n}\n\nexport class AnnotationSourceParameters {\n  rank: number;\n  relationships: {url: string; name: string; sharding: ShardingParameters | undefined;}[];\n  properties: AnnotationPropertySpec[];\n  byId: {url: string; sharding: ShardingParameters | undefined;};\n  type: AnnotationType;\n  static RPC_ID = 'precomputed/AnnotationSource';\n}\n\nexport class IndexedSegmentPropertySourceParameters {\n  url: string;\n  sharding: ShardingParameters|undefined;\n  static RPC_ID = 'precomputed/IndexedSegmentPropertySource';\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeSkeletonVertexPositionsAndIndices, SkeletonChunk} from 'neuroglancer/skeleton/backend';\nimport {VertexAttributeInfo} from 'neuroglancer/skeleton/base';\nimport {DATA_TYPE_BYTES} from 'neuroglancer/util/data_type';\nimport {convertEndian16, convertEndian32, Endianness} from 'neuroglancer/util/endian';\n\nexport function decodeSkeletonChunk(\n    chunk: SkeletonChunk, response: ArrayBuffer,\n    vertexAttributes: Map<string, VertexAttributeInfo>) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  let numEdges = dv.getUint32(4, true);\n\n  const vertexPositionsStartOffset = 8;\n\n  let curOffset = 8 + numVertices * 4 * 3;\n  decodeSkeletonVertexPositionsAndIndices(\n      chunk, response, Endianness.LITTLE, /*vertexByteOffset=*/ vertexPositionsStartOffset,\n      numVertices,\n      /*indexByteOffset=*/ curOffset, /*numEdges=*/ numEdges);\n  curOffset += numEdges * 4 * 2;\n  let attributes: Uint8Array[] = [];\n  for (let info of vertexAttributes.values()) {\n    const bytesPerVertex = DATA_TYPE_BYTES[info.dataType] * info.numComponents;\n    const totalBytes = bytesPerVertex * numVertices;\n    const attribute = new Uint8Array(response, curOffset, totalBytes);\n    switch (bytesPerVertex) {\n      case 2:\n        convertEndian16(attribute, Endianness.LITTLE);\n        break;\n      case 4:\n      case 8:\n        convertEndian32(attribute, Endianness.LITTLE);\n        break;\n    }\n    attributes.push(attribute);\n    curOffset += totalBytes;\n  }\n  chunk.vertexAttributes = attributes;\n}\n", "/**\n * @license\n * Copyright 2021 William Silversmith\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const decodeCompresso = asyncComputation<(data: Uint8Array) => Uint8Array>('decodeCompresso');\n", "/**\n * @license\n * Copyright 2021 William Silvermsith.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {decodeCompresso} from 'neuroglancer/async_computation/decode_compresso_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\n\nexport async function decodeCompressoChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  \n  let image : TypedArray = await requestAsyncComputation(\n    decodeCompresso, cancellationToken, [response], new Uint8Array(response)\n  );\n\n  await decodeRawChunk(chunk, cancellationToken, image.buffer);\n}\n", "/**\n * @license\n * Copyright 2022 William Silversmith\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const decodePng = asyncComputation<( \n    data: Uint8Array, width: number, height: number, \n    numComponents: number, bytesPerPixel:number, \n    convertToGrayscale: boolean\n) => Uint8Array>('decodePng');\n", "/**\n * @license\n * Copyright 2022 William Silvermsith.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {DATA_TYPE_BYTES} from 'neuroglancer/util/data_type';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {decodePng} from 'neuroglancer/async_computation/decode_png_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\n\nexport async function decodePngChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer) {\n  \n  const chunkDataSize = chunk.chunkDataSize!;\n  const dataType = chunk.source!.spec.dataType;\n  let image : TypedArray = await requestAsyncComputation(\n    decodePng, cancellationToken, [response],\n    /*buffer=*/(new Uint8Array(response)),\n    /*width=*/chunkDataSize[0],\n    /*height=*/chunkDataSize[1] * chunkDataSize[2],\n    /*numComponents=*/chunkDataSize[3] || 1,\n    /*bytesPerPixel=*/DATA_TYPE_BYTES[dataType],\n    /*convertToGrayscale=*/false\n  );\n\n  await decodeRawChunk(chunk, cancellationToken, image.buffer);\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {getByteRangeHeader, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {cancellableFetchSpecialOk, SpecialProtocolCredentialsProvider} from 'neuroglancer/util/special_protocol_request';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\n/**\n * On Chromium, multiple concurrent byte range requests to the same URL are serialized unless the\n * cache is disabled.  Disabling the cache works around the problem.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=969828\n */\nconst cacheMode = navigator.userAgent.indexOf('Chrome') !== -1 ? 'no-store' : 'default';\n\nexport function fetchSpecialHttpByteRange(\n    credentialsProvider: SpecialProtocolCredentialsProvider, url: string,\n    startOffset: Uint64|number, endOffset: Uint64|number,\n    cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n  return cancellableFetchSpecialOk(\n      credentialsProvider, url, {\n        headers: getByteRangeHeader(startOffset, endOffset),\n        cache: cacheMode,\n      },\n      responseArrayBuffer, cancellationToken);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Uint64} from 'neuroglancer/util/uint64';\n\n/**\n * This is a very simple string hash function.  It isn't secure, but\n * is suitable for sharding of requests.\n */\nexport function simpleStringHash(s: string): number {\n  let h = 0;\n  let length = s.length;\n  for (let i = 0; i < length; ++i) {\n    h = (h * 31 + s.charCodeAt(i)) | 0;\n  }\n  return h;\n}\n\n/**\n * MurmurHash3_x86_32 mixing function\n */\nexport function murmurHash3_x86_32Mix(h: number, k: number): number {\n  k = Math.imul(k, 0xcc9e2d51) >>> 0;\n  k = ((k << 15) | (k >>> 17)) >>> 0;\n  k = Math.imul(k, 0x1b873593) >>> 0;\n  h ^= k;\n  h = ((h << 13) | (h >>> 19)) >>> 0;\n  h = (Math.imul(h, 5) + 0xe6546b64) >>> 0;\n  return h;\n}\n\n/**\n * MurmurHash3_x86_32 finalization function\n */\nexport function murmurHash3_x86_32Finalize(h: number, len: number) {\n  h ^= len;\n  h ^= h >>> 16;\n  h = Math.imul(h, 0x85ebca6b) >>> 0;\n  h ^= h >>> 13;\n  h *= 0xc2b2ae35;\n  h ^= h >>> 16;\n  return h >>> 0;\n}\n\n/**\n * MurmurHash3_x86_32, specialized for 8 bytes of input.\n */\nexport function murmurHash3_x86_32Hash64Bits(seed: number, low: number, high: number): number {\n  let h = seed;\n  h = murmurHash3_x86_32Mix(h, low);\n  h = murmurHash3_x86_32Mix(h, high);\n  return murmurHash3_x86_32Finalize(h, 8);\n}\n\n\nfunction murmurHash3_x86_128Mix(h: number) {\n  h ^= h >>> 16;\n  h = Math.imul(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = Math.imul(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n  return h;\n}\n\nfunction rotl32(x: number, r: number) {\n  return (x << r) | (x >>> (32 - r));\n}\n\n/**\n * MurmurHash3_x86_128, specialized for 8 bytes of input.\n *\n * Only the low 8 bytes of output are returned.\n */\nexport function murmurHash3_x86_128Hash64Bits(\n    out: Uint64, seed: number, low: number, high: number): Uint64 {\n  let h1 = seed, h2 = seed, h3 = seed, h4 = seed;\n  const c1 = 0x239b961b;\n  const c2 = 0xab0e9789;\n  const c3 = 0x38b34ae5;\n  // const c4 = 0xa1e38b93;\n\n  let k2 = Math.imul(high, c2);\n  k2 = rotl32(k2, 16);\n  k2 = Math.imul(k2, c3);\n  h2 ^= k2;\n\n  let k1 = Math.imul(low, c1);\n  k1 = rotl32(k1, 15);\n  k1 = Math.imul(k1, c2);\n  h1 ^= k1;\n\n  const len = 8;\n\n  h1 ^= len;\n  h2 ^= len;\n  h3 ^= len;\n  h4 ^= len;\n\n  h1 = (h1 + h2) >>> 0;\n  h1 = (h1 + h3) >>> 0;\n  h1 = (h1 + h4) >>> 0;\n  h2 = (h2 + h1) >>> 0;\n  h3 = (h3 + h1) >>> 0;\n  h4 = (h4 + h1) >>> 0;\n\n  h1 = murmurHash3_x86_128Mix(h1);\n  h2 = murmurHash3_x86_128Mix(h2);\n  h3 = murmurHash3_x86_128Mix(h3);\n  h4 = murmurHash3_x86_128Mix(h4);\n\n  h1 = (h1 + h2) >>> 0;\n  h1 = (h1 + h3) >>> 0;\n  h1 = (h1 + h4) >>> 0;\n  h2 = (h2 + h1) >>> 0;\n\n  // h3 = (h3 + h1) >>> 0;\n  // h4 = (h4 + h1) >>> 0;\n\n  out.low = h1;\n  out.high = h2;\n  return out;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Annotation, AnnotationPropertySerializer, annotationTypeHandlers, annotationTypes} from 'neuroglancer/annotation';\nimport {AnnotationGeometryChunk, AnnotationGeometryData, AnnotationMetadataChunk, AnnotationSource, AnnotationSubsetGeometryChunk} from 'neuroglancer/annotation/backend';\nimport {AnnotationGeometryChunkSourceBackend} from 'neuroglancer/annotation/backend';\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {Chunk, ChunkManager, WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {GenericSharedDataSource} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {AnnotationSourceParameters, AnnotationSpatialIndexSourceParameters, DataEncoding, IndexedSegmentPropertySourceParameters, MeshSourceParameters, MultiscaleMeshSourceParameters, ShardingHashFunction, ShardingParameters, SkeletonSourceParameters, VolumeChunkEncoding, VolumeChunkSourceParameters} from 'neuroglancer/datasource/precomputed/base';\nimport {assignMeshFragmentData, assignMultiscaleMeshFragmentData, computeOctreeChildOffsets, decodeJsonManifestChunk, decodeTriangleVertexPositionsAndIndices, FragmentChunk, generateHigherOctreeLevel, ManifestChunk, MeshSource, MultiscaleFragmentChunk, MultiscaleManifestChunk, MultiscaleMeshSource} from 'neuroglancer/mesh/backend';\nimport {IndexedSegmentPropertySourceBackend} from 'neuroglancer/segmentation_display_state/backend';\nimport {SkeletonChunk, SkeletonSource} from 'neuroglancer/skeleton/backend';\nimport {decodeSkeletonChunk} from 'neuroglancer/skeleton/decode_precomputed_skeleton';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeCompressoChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compresso';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodePngChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/png';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {fetchSpecialHttpByteRange} from 'neuroglancer/util/byte_range_http_requests';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {murmurHash3_x86_128Hash64Bits} from 'neuroglancer/util/hash';\nimport {isNotFoundError, responseArrayBuffer, responseJson} from 'neuroglancer/util/http_request';\nimport {stableStringify} from 'neuroglancer/util/json';\nimport {getObjectId} from 'neuroglancer/util/object_id';\nimport {cancellableFetchSpecialOk, SpecialProtocolCredentials, SpecialProtocolCredentialsProvider} from 'neuroglancer/util/special_protocol_request';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {encodeZIndexCompressed, encodeZIndexCompressed3d, zorder3LessThan} from 'neuroglancer/util/zorder';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\n// Set to true to validate the multiscale index.\nconst DEBUG_MULTISCALE_INDEX = false;\n\nconst shardingHashFunctions: Map<ShardingHashFunction, (out: Uint64) => void> = new Map([\n  [\n    ShardingHashFunction.MURMURHASH3_X86_128,\n    (out) => {\n      murmurHash3_x86_128Hash64Bits(out, 0, out.low, out.high);\n    }\n  ],\n  [ShardingHashFunction.IDENTITY, (_out) => {}],\n]);\n\ninterface ShardInfo {\n  shardUrl: string;\n  offset: Uint64;\n}\n\ninterface DecodedMinishardIndex {\n  data: Uint32Array;\n  shardUrl: string;\n}\n\ninterface MinishardIndexSource extends\n    GenericSharedDataSource<Uint64, DecodedMinishardIndex|undefined> {\n  sharding: ShardingParameters;\n  credentialsProvider: SpecialProtocolCredentialsProvider;\n}\n\nfunction getMinishardIndexDataSource(\n    chunkManager: Borrowed<ChunkManager>, credentialsProvider: SpecialProtocolCredentialsProvider,\n    parameters: {url: string, sharding: ShardingParameters|undefined}): MinishardIndexSource|\n    undefined {\n  const {url, sharding} = parameters;\n  if (sharding === undefined) return undefined;\n  const source =\n      GenericSharedDataSource.get<Uint64, DecodedMinishardIndex|undefined>(\n          chunkManager, stableStringify({\n            type: 'precomputed:shardedDataSource',\n            url,\n            sharding,\n            credentialsProvider: getObjectId(credentialsProvider),\n          }),\n          {\n            download: async function(\n                shardAndMinishard: Uint64, cancellationToken: CancellationToken) {\n              const minishard = Uint64.lowMask(new Uint64(), sharding.minishardBits);\n              Uint64.and(minishard, minishard, shardAndMinishard);\n              const shard = Uint64.lowMask(new Uint64(), sharding.shardBits);\n              const temp = new Uint64();\n              Uint64.rshift(temp, shardAndMinishard, sharding.minishardBits);\n              Uint64.and(shard, shard, temp);\n              const shardUrl = `${url}/${\n                  shard.toString(16).padStart(Math.ceil(sharding.shardBits / 4), '0')}.shard`;\n              // Retrive minishard index start/end offsets.\n              const shardIndexSize = new Uint64(16);\n              Uint64.lshift(shardIndexSize, shardIndexSize, sharding.minishardBits);\n\n              // Multiply minishard by 16.\n              const shardIndexStart = Uint64.lshift(new Uint64(), minishard, 4);\n              const shardIndexEnd = Uint64.addUint32(new Uint64(), shardIndexStart, 16);\n              let shardIndexResponse: ArrayBuffer;\n              try {\n                shardIndexResponse = await fetchSpecialHttpByteRange(\n                    credentialsProvider, shardUrl, shardIndexStart, shardIndexEnd,\n                    cancellationToken);\n              } catch (e) {\n                if (isNotFoundError(e)) return {data: undefined, size: 0};\n                throw e;\n              }\n              if (shardIndexResponse.byteLength !== 16) {\n                throw new Error(`Failed to retrieve minishard offset`);\n              }\n              const shardIndexDv = new DataView(shardIndexResponse);\n              const minishardStartOffset = new Uint64(\n                  shardIndexDv.getUint32(0, /*littleEndian=*/ true),\n                  shardIndexDv.getUint32(4, /*littleEndian=*/ true));\n              const minishardEndOffset = new Uint64(\n                  shardIndexDv.getUint32(8, /*littleEndian=*/ true),\n                  shardIndexDv.getUint32(12, /*littleEndian=*/ true));\n              if (Uint64.equal(minishardStartOffset, minishardEndOffset)) {\n                return {data: undefined, size: 0};\n              }\n              // The start/end offsets in the shard index are relative to the end of the shard\n              // index.\n              Uint64.add(minishardStartOffset, minishardStartOffset, shardIndexSize);\n              Uint64.add(minishardEndOffset, minishardEndOffset, shardIndexSize);\n\n              let minishardIndexResponse = await fetchSpecialHttpByteRange(\n                  credentialsProvider, shardUrl, minishardStartOffset, minishardEndOffset,\n                  cancellationToken);\n              if (sharding.minishardIndexEncoding === DataEncoding.GZIP) {\n                minishardIndexResponse =\n                    (await requestAsyncComputation(\n                         decodeGzip, cancellationToken, [minishardIndexResponse],\n                         new Uint8Array(minishardIndexResponse)))\n                        .buffer;\n              }\n              if ((minishardIndexResponse.byteLength % 24) !== 0) {\n                throw new Error(\n                    `Invalid minishard index length: ${minishardIndexResponse.byteLength}`);\n              }\n              const minishardIndex = new Uint32Array(minishardIndexResponse);\n              convertEndian32(minishardIndex, Endianness.LITTLE);\n\n              const minishardIndexSize = minishardIndex.byteLength / 24;\n              let prevEntryKeyLow = 0, prevEntryKeyHigh = 0;\n              // Offsets in the minishard index are relative to the end of the shard index.\n              let prevStartLow = shardIndexSize.low, prevStartHigh = shardIndexSize.high;\n              for (let i = 0; i < minishardIndexSize; ++i) {\n                let entryKeyLow = prevEntryKeyLow + minishardIndex[i * 2];\n                let entryKeyHigh = prevEntryKeyHigh + minishardIndex[i * 2 + 1];\n                if (entryKeyLow >= 4294967296) {\n                  entryKeyLow -= 4294967296;\n                  entryKeyHigh += 1;\n                }\n                prevEntryKeyLow = minishardIndex[i * 2] = entryKeyLow;\n                prevEntryKeyHigh = minishardIndex[i * 2 + 1] = entryKeyHigh;\n                let startLow = prevStartLow + minishardIndex[(minishardIndexSize + i) * 2];\n                let startHigh = prevStartHigh + minishardIndex[(minishardIndexSize + i) * 2 + 1];\n                if (startLow >= 4294967296) {\n                  startLow -= 4294967296;\n                  startHigh += 1;\n                }\n                minishardIndex[(minishardIndexSize + i) * 2] = startLow;\n                minishardIndex[(minishardIndexSize + i) * 2 + 1] = startHigh;\n                const sizeLow = minishardIndex[(2 * minishardIndexSize + i) * 2];\n                const sizeHigh = minishardIndex[(2 * minishardIndexSize + i) * 2 + 1];\n                let endLow = startLow + sizeLow;\n                let endHigh = startHigh + sizeHigh;\n                if (endLow >= 4294967296) {\n                  endLow -= 4294967296;\n                  endHigh += 1;\n                }\n                prevStartLow = endLow;\n                prevStartHigh = endHigh;\n                minishardIndex[(2 * minishardIndexSize + i) * 2] = endLow;\n                minishardIndex[(2 * minishardIndexSize + i) * 2 + 1] = endHigh;\n              }\n              return {data: {data: minishardIndex, shardUrl}, size: minishardIndex.byteLength};\n            },\n            encodeKey: (key: Uint64) => key.toString(),\n            sourceQueueLevel: 1,\n          }) as MinishardIndexSource;\n  source.sharding = sharding;\n  source.credentialsProvider = credentialsProvider;\n  return source;\n}\n\nfunction findMinishardEntry(minishardIndex: DecodedMinishardIndex, key: Uint64):\n    {startOffset: Uint64, endOffset: Uint64}|undefined {\n  const minishardIndexData = minishardIndex.data;\n  const minishardIndexSize = minishardIndexData.length / 6;\n  const keyLow = key.low, keyHigh = key.high;\n  for (let i = 0; i < minishardIndexSize; ++i) {\n    if (minishardIndexData[i * 2] !== keyLow || minishardIndexData[i * 2 + 1] !== keyHigh) {\n      continue;\n    }\n    const startOffset = new Uint64(\n        minishardIndexData[(minishardIndexSize + i) * 2],\n        minishardIndexData[(minishardIndexSize + i) * 2 + 1]);\n    const endOffset = new Uint64(\n        minishardIndexData[(2 * minishardIndexSize + i) * 2],\n        minishardIndexData[(2 * minishardIndexSize + i) * 2 + 1]);\n    return {startOffset, endOffset};\n  }\n  return undefined;\n}\n\nasync function getShardedData(\n    minishardIndexSource: MinishardIndexSource, chunk: Chunk, key: Uint64,\n    cancellationToken: CancellationToken):\n    Promise<{shardInfo: ShardInfo, data: ArrayBuffer}|undefined> {\n  const {sharding} = minishardIndexSource;\n  const hashFunction = shardingHashFunctions.get(sharding.hash)!;\n  const hashCode = Uint64.rshift(new Uint64(), key, sharding.preshiftBits);\n  hashFunction(hashCode);\n  const shardAndMinishard =\n      Uint64.lowMask(new Uint64(), sharding.minishardBits + sharding.shardBits);\n  Uint64.and(shardAndMinishard, shardAndMinishard, hashCode);\n  const getPriority = () => ({priorityTier: chunk.priorityTier, priority: chunk.priority});\n  const minishardIndex =\n      await minishardIndexSource.getData(shardAndMinishard, getPriority, cancellationToken);\n  if (minishardIndex === undefined) return undefined;\n  const minishardEntry = findMinishardEntry(minishardIndex, key);\n  if (minishardEntry === undefined) return undefined;\n  const {startOffset, endOffset} = minishardEntry;\n  let data = await fetchSpecialHttpByteRange(\n      minishardIndexSource.credentialsProvider, minishardIndex.shardUrl, startOffset, endOffset,\n      cancellationToken);\n  if (minishardIndexSource.sharding.dataEncoding === DataEncoding.GZIP) {\n    data =\n        (await requestAsyncComputation(decodeGzip, cancellationToken, [data], new Uint8Array(data)))\n            .buffer;\n  }\n  return {data, shardInfo: {shardUrl: minishardIndex.shardUrl, offset: startOffset}};\n}\n\nfunction getOrNotFoundError<T>(v: T|undefined) {\n  if (v === undefined) throw new Error('not found');\n  return v;\n}\n\nconst chunkDecoders = new Map<VolumeChunkEncoding, ChunkDecoder>();\nchunkDecoders.set(VolumeChunkEncoding.RAW, decodeRawChunk);\nchunkDecoders.set(VolumeChunkEncoding.JPEG, decodeJpegChunk);\nchunkDecoders.set(VolumeChunkEncoding.COMPRESSED_SEGMENTATION, decodeCompressedSegmentationChunk);\nchunkDecoders.set(VolumeChunkEncoding.COMPRESSO, decodeCompressoChunk);\nchunkDecoders.set(VolumeChunkEncoding.PNG, decodePngChunk);\n\n@registerSharedObject() export class PrecomputedVolumeChunkSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(VolumeChunkSource), VolumeChunkSourceParameters)) {\n  chunkDecoder = chunkDecoders.get(this.parameters.encoding)!;\n  private minishardIndexSource =\n      getMinishardIndexDataSource(this.chunkManager, this.credentialsProvider, this.parameters);\n\n  gridShape = (() => {\n    const gridShape = new Uint32Array(3);\n    const {upperVoxelBound, chunkDataSize} = this.spec;\n    for (let i = 0; i < 3; ++i) {\n      gridShape[i] = Math.ceil(upperVoxelBound[i] / chunkDataSize[i]);\n    }\n    return gridShape;\n  })();\n\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken): Promise<void> {\n    const {parameters} = this;\n\n    const {minishardIndexSource} = this;\n    let response: ArrayBuffer|undefined;\n    if (minishardIndexSource === undefined) {\n      let url: string;\n      {\n        // chunkPosition must not be captured, since it will be invalidated by the next call to\n        // computeChunkBounds.\n        let chunkPosition = this.computeChunkBounds(chunk);\n        let chunkDataSize = chunk.chunkDataSize!;\n        url = `${parameters.url}/${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_` +\n            `${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_` +\n            `${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;\n      }\n      try {\n        response = await cancellableFetchSpecialOk(\n            this.credentialsProvider, url, {}, responseArrayBuffer, cancellationToken);\n      } catch (e) {\n        if (isNotFoundError(e)) {\n          response = undefined;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      this.computeChunkBounds(chunk);\n      const {gridShape} = this;\n      const {chunkGridPosition} = chunk;\n      const xBits = Math.ceil(Math.log2(gridShape[0])), yBits = Math.ceil(Math.log2(gridShape[1])),\n            zBits = Math.ceil(Math.log2(gridShape[2]));\n      const chunkIndex = encodeZIndexCompressed3d(\n          new Uint64(), xBits, yBits, zBits, chunkGridPosition[0], chunkGridPosition[1],\n          chunkGridPosition[2]);\n      response =\n          (await getShardedData(minishardIndexSource, chunk, chunkIndex, cancellationToken)) ?.data;\n    }\n    if (response !== undefined) {\n      await this.chunkDecoder(chunk, cancellationToken, response);\n    }\n  }\n}\n\nexport function decodeManifestChunk(chunk: ManifestChunk, response: any) {\n  return decodeJsonManifestChunk(chunk, response, 'fragments');\n}\n\nexport function decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  assignMeshFragmentData(\n      chunk,\n      decodeTriangleVertexPositionsAndIndices(\n          response, Endianness.LITTLE, /*vertexByteOffset=*/ 4, numVertices));\n}\n\n@registerSharedObject() export class PrecomputedMeshSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(MeshSource), MeshSourceParameters)) {\n  async download(chunk: ManifestChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const response = await cancellableFetchSpecialOk(\n        this.credentialsProvider, `${parameters.url}/${chunk.objectId}:${parameters.lod}`, {},\n        responseJson, cancellationToken);\n    decodeManifestChunk(chunk, response);\n  }\n\n  async downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const response = await cancellableFetchSpecialOk(\n        this.credentialsProvider, `${parameters.url}/${chunk.fragmentId}`, {}, responseArrayBuffer,\n        cancellationToken);\n    decodeFragmentChunk(chunk, response);\n  }\n}\n\n@registerSharedObject() export class PrecomputedHierarchicalMeshSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(MeshSource), MeshSourceParameters)) {\n  download(chunk: ManifestChunk, _cancellationToken: CancellationToken) {\n    // No manifest chunk to download with the htem format.\n    chunk.fragmentIds = [''];\n    return Promise.resolve(undefined);\n  }\n\n  computeMeshPath(objectId: Uint64, hierarchySize: number): string {\n    if (hierarchySize < 1) {\n      throw new Error(`Invalid hierarchySize of ${hierarchySize}`)\n    }\n    const hierarchySize_ = BigInt(hierarchySize);\n    let objectId_ = BigInt(objectId.toString());\n    let prepends: BigInt[] = [];\n    while (objectId_ > hierarchySize_) {\n      prepends.push(objectId_ % hierarchySize_);\n      objectId_ = objectId_ / hierarchySize_;\n    }\n    let objectPath = `${prepends.length}/${objectId_}`;\n    for (let i = 0; i < prepends.length; i++) {\n      objectPath = `${objectPath}/${prepends[prepends.length-1-i]}`\n    }\n    return objectPath;\n  }\n\n  async downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const hierarchySize = parameters.lod;\n    let meshPath = this.computeMeshPath(chunk.manifestChunk!.objectId, hierarchySize);\n    const response = await cancellableFetchSpecialOk(\n        this.credentialsProvider, `${parameters.url}/${meshPath}`, {},\n        responseArrayBuffer, cancellationToken);\n    decodeFragmentChunk(chunk, response);\n  }\n}\n\ninterface PrecomputedMultiscaleManifestChunk extends MultiscaleManifestChunk {\n  /**\n   * Byte offsets into data file for each octree node.\n   *\n   * Stored as Float64Array to allow 53-bit integer values.\n   */\n  offsets: Float64Array;\n  shardInfo?: ShardInfo;\n}\n\nfunction decodeMultiscaleManifestChunk(\n    chunk: PrecomputedMultiscaleManifestChunk, response: ArrayBuffer) {\n  if (response.byteLength < 28 || response.byteLength % 4 !== 0) {\n    throw new Error(`Invalid index file size: ${response.byteLength}`);\n  }\n  const dv = new DataView(response);\n  let offset = 0;\n  const chunkShape = vec3.fromValues(\n      dv.getFloat32(offset, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 4, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 8, /*littleEndian=*/ true));\n  offset += 12;\n  const gridOrigin = vec3.fromValues(\n      dv.getFloat32(offset, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 4, /*littleEndian=*/ true),\n      dv.getFloat32(offset + 8, /*littleEndian=*/ true));\n  offset += 12;\n  const numStoredLods = dv.getUint32(offset, /*littleEndian=*/ true);\n  offset += 4\n  if (response.byteLength < offset + (4 + 4 + 4 * 3) * numStoredLods) {\n    throw new Error(`Invalid index file size for ${numStoredLods} lods: ${response.byteLength}`);\n  }\n  const storedLodScales = new Float32Array(response, offset, numStoredLods);\n  offset += 4 * numStoredLods;\n  convertEndian32(storedLodScales, Endianness.LITTLE);\n  const vertexOffsets = new Float32Array(response, offset, numStoredLods * 3);\n  convertEndian32(vertexOffsets, Endianness.LITTLE);\n  offset += 12 * numStoredLods;\n  const numFragmentsPerLod = new Uint32Array(response, offset, numStoredLods);\n  offset += 4 * numStoredLods;\n  convertEndian32(numFragmentsPerLod, Endianness.LITTLE);\n  const totalFragments = numFragmentsPerLod.reduce((a, b) => a + b);\n  if (response.byteLength !== offset + 16 * totalFragments) {\n    throw new Error(\n        `Invalid index file size for ${numStoredLods} lods and ` +\n        `${totalFragments} total fragments: ${response.byteLength}`);\n  }\n  const fragmentInfo = new Uint32Array(response, offset);\n  convertEndian32(fragmentInfo, Endianness.LITTLE);\n  const clipLowerBound =\n      vec3.fromValues(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n  const clipUpperBound =\n      vec3.fromValues(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  let numLods = Math.max(1, storedLodScales.length);\n  // Compute `clipLowerBound` and `clipUpperBound` and `numLods`.  Note that `numLods` is >=\n  // `storedLodScales.length`; it may contain additional levels since at the highest level the\n  // octree must be a single node.\n  {\n    let fragmentBase = 0;\n    for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {\n      const numFragments = numFragmentsPerLod[lodIndex];\n      if (DEBUG_MULTISCALE_INDEX) {\n        for (let i = 1; i < numFragments; ++i) {\n          let x0 = fragmentInfo[fragmentBase + numFragments * 0 + (i - 1)];\n          let y0 = fragmentInfo[fragmentBase + numFragments * 1 + (i - 1)];\n          let z0 = fragmentInfo[fragmentBase + numFragments * 2 + (i - 1)];\n          let x1 = fragmentInfo[fragmentBase + numFragments * 0 + i];\n          let y1 = fragmentInfo[fragmentBase + numFragments * 1 + i];\n          let z1 = fragmentInfo[fragmentBase + numFragments * 2 + i];\n          if (!zorder3LessThan(x0, y0, z0, x1, y1, z1)) {\n            console.log(\n                `Fragment index violates zorder constraint: ` +\n                `lod=${lodIndex}, ` +\n                `chunk ${i - 1} = [${x0},${y0},${z0}], ` +\n                `chunk ${i} = [${x1},${y1},${z1}]`);\n          }\n        }\n      }\n      for (let i = 0; i < 3; ++i) {\n        let upperBoundValue = Number.NEGATIVE_INFINITY;\n        let lowerBoundValue = Number.POSITIVE_INFINITY;\n        const base = fragmentBase + numFragments * i;\n        for (let j = 0; j < numFragments; ++j) {\n          const v = fragmentInfo[base + j];\n          upperBoundValue = Math.max(upperBoundValue, v);\n          lowerBoundValue = Math.min(lowerBoundValue, v);\n        }\n        if (numFragments != 0) {\n          while ((upperBoundValue >>> (numLods - lodIndex - 1)) !=\n                 (lowerBoundValue >>> (numLods - lodIndex - 1))) {\n            ++numLods;\n          }\n          if (lodIndex === 0) {\n            clipLowerBound[i] = Math.min(clipLowerBound[i], (1 << lodIndex) * lowerBoundValue);\n            clipUpperBound[i] =\n                Math.max(clipUpperBound[i], (1 << lodIndex) * (upperBoundValue + 1));\n          }\n        }\n      }\n      fragmentBase += numFragments * 4;\n    }\n  }\n\n  // Compute upper bound on number of nodes that will be in the octree, so that we can allocate a\n  // sufficiently large buffer without having to worry about resizing.\n  let maxFragments = 0;\n  {\n    let prevNumFragments = 0;\n    let prevLodIndex = 0;\n    for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {\n      const numFragments = numFragmentsPerLod[lodIndex];\n      maxFragments += prevNumFragments * (lodIndex - prevLodIndex);\n      prevLodIndex = lodIndex;\n      prevNumFragments = numFragments;\n      maxFragments += numFragments;\n    }\n    maxFragments += (numLods - 1 - prevLodIndex) * prevNumFragments;\n  }\n  const octreeTemp = new Uint32Array(5 * maxFragments);\n  const offsetsTemp = new Float64Array(maxFragments + 1);\n  let octree: Uint32Array;\n  {\n    let priorStart = 0;\n    let baseRow = 0;\n    let dataOffset = 0;\n    let fragmentBase = 0;\n    for (let lodIndex = 0; lodIndex < numStoredLods; ++lodIndex) {\n      const numFragments = numFragmentsPerLod[lodIndex];\n      // Copy in indices\n      for (let j = 0; j < numFragments; ++j) {\n        for (let i = 0; i < 3; ++i) {\n          octreeTemp[5 * (baseRow + j) + i] = fragmentInfo[fragmentBase + j + i * numFragments];\n        }\n        const dataSize = fragmentInfo[fragmentBase + j + 3 * numFragments];\n        dataOffset += dataSize;\n        offsetsTemp[baseRow + j + 1] = dataOffset;\n        if (dataSize === 0) {\n          // Mark node as empty.\n          octreeTemp[5 * (baseRow + j) + 4] = 0x80000000;\n        }\n      }\n\n      fragmentBase += 4 * numFragments;\n\n      if (lodIndex !== 0) {\n        // Connect with prior level\n        computeOctreeChildOffsets(octreeTemp, priorStart, baseRow, baseRow + numFragments);\n      }\n\n      priorStart = baseRow;\n      baseRow += numFragments;\n      while (lodIndex + 1 < numLods &&\n             (lodIndex + 1 >= storedLodScales.length || storedLodScales[lodIndex + 1] === 0)) {\n        const curEnd = generateHigherOctreeLevel(octreeTemp, priorStart, baseRow);\n        offsetsTemp.fill(dataOffset, baseRow + 1, curEnd + 1);\n        priorStart = baseRow;\n        baseRow = curEnd;\n        ++lodIndex;\n      }\n    }\n    octree = octreeTemp.slice(0, 5 * baseRow);\n    chunk.offsets = offsetsTemp.slice(0, baseRow + 1);\n  }\n  const source = chunk.source! as PrecomputedMultiscaleMeshSource;\n  const {lodScaleMultiplier} = source.parameters.metadata;\n  const lodScales = new Float32Array(numLods);\n  lodScales.set(storedLodScales, 0);\n  for (let i = 0; i < storedLodScales.length; ++i) {\n    lodScales[i] *= lodScaleMultiplier;\n  }\n  chunk.manifest = {\n    chunkShape,\n    chunkGridSpatialOrigin: gridOrigin,\n    clipLowerBound: vec3.add(\n        clipLowerBound, gridOrigin, vec3.multiply(clipLowerBound, clipLowerBound, chunkShape)),\n    clipUpperBound: vec3.add(\n        clipUpperBound, gridOrigin, vec3.multiply(clipUpperBound, clipUpperBound, chunkShape)),\n    octree,\n    lodScales,\n    vertexOffsets,\n  };\n}\n\nasync function decodeMultiscaleFragmentChunk(\n    chunk: MultiscaleFragmentChunk, response: ArrayBuffer) {\n  const {lod} = chunk;\n  const source = chunk.manifestChunk!.source! as PrecomputedMultiscaleMeshSource;\n  const m = await import(/* webpackChunkName: \"draco\" */ 'neuroglancer/mesh/draco');\n  const rawMesh = await m.decodeDracoPartitioned(\n      new Uint8Array(response), source.parameters.metadata.vertexQuantizationBits, lod !== 0);\n  assignMultiscaleMeshFragmentData(chunk, rawMesh, source.format.vertexPositionFormat);\n}\n\n@registerSharedObject() //\nexport class PrecomputedMultiscaleMeshSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(MultiscaleMeshSource), MultiscaleMeshSourceParameters)) {\n  private minishardIndexSource = getMinishardIndexDataSource(\n      this.chunkManager, this.credentialsProvider,\n      {url: this.parameters.url, sharding: this.parameters.metadata.sharding});\n\n  async download(chunk: PrecomputedMultiscaleManifestChunk, cancellationToken: CancellationToken):\n      Promise<void> {\n    const {parameters, minishardIndexSource} = this;\n    let data: ArrayBuffer;\n    if (minishardIndexSource === undefined) {\n      data = await cancellableFetchSpecialOk(\n          this.credentialsProvider, `${parameters.url}/${chunk.objectId}.index`, {},\n          responseArrayBuffer, cancellationToken);\n    } else {\n      ({data, shardInfo: chunk.shardInfo} = getOrNotFoundError(\n           await getShardedData(minishardIndexSource, chunk, chunk.objectId, cancellationToken)));\n    }\n    decodeMultiscaleManifestChunk(chunk, data);\n  }\n\n  async downloadFragment(\n      chunk: MultiscaleFragmentChunk, cancellationToken: CancellationToken): Promise<void> {\n    const {parameters} = this;\n    const manifestChunk = chunk.manifestChunk! as PrecomputedMultiscaleManifestChunk;\n    const chunkIndex = chunk.chunkIndex;\n    const {shardInfo, offsets} = manifestChunk;\n    const startOffset = offsets[chunkIndex];\n    const endOffset = offsets[chunkIndex + 1];\n    let requestUrl: string;\n    let adjustedStartOffset: Uint64|number, adjustedEndOffset: Uint64|number;\n    if (shardInfo !== undefined) {\n      requestUrl = shardInfo.shardUrl;\n      const fullDataSize = offsets[offsets.length - 1];\n      let startLow = shardInfo.offset.low - fullDataSize + startOffset;\n      let startHigh = shardInfo.offset.high;\n      let endLow = startLow + endOffset - startOffset;\n      let endHigh = startHigh;\n      while (startLow < 0) {\n        startLow += 4294967296;\n        startHigh -= 1;\n      }\n      while (endLow < 0) {\n        endLow += 4294967296;\n        endHigh -= 1;\n      }\n      while (endLow > 4294967296) {\n        endLow -= 4294967296;\n        endHigh += 1;\n      }\n      adjustedStartOffset = new Uint64(startLow, startHigh);\n      adjustedEndOffset = new Uint64(endLow, endHigh);\n    } else {\n      requestUrl = `${parameters.url}/${manifestChunk.objectId}`;\n      adjustedStartOffset = startOffset;\n      adjustedEndOffset = endOffset;\n    }\n    const response = await fetchSpecialHttpByteRange(\n        this.credentialsProvider, requestUrl, adjustedStartOffset, adjustedEndOffset,\n        cancellationToken);\n    await decodeMultiscaleFragmentChunk(chunk, response);\n  }\n}\n\nasync function fetchByUint64(\n    credentialsProvider: SpecialProtocolCredentialsProvider, url: string, chunk: Chunk,\n    minishardIndexSource: MinishardIndexSource|undefined, id: Uint64,\n    cancellationToken: CancellationToken) {\n  if (minishardIndexSource === undefined) {\n    try {\n      return await cancellableFetchSpecialOk(\n          credentialsProvider, `${url}/${id}`, {}, responseArrayBuffer, cancellationToken);\n    } catch (e) {\n      if (isNotFoundError(e)) return undefined;\n      throw e;\n    }\n  }\n  const result = await getShardedData(minishardIndexSource, chunk, id, cancellationToken);\n  if (result === undefined) return undefined;\n  return result.data;\n}\n\n@registerSharedObject() //\nexport class PrecomputedSkeletonSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(SkeletonSource), SkeletonSourceParameters)) {\n  private minishardIndexSource = getMinishardIndexDataSource(\n      this.chunkManager, this.credentialsProvider,\n      {url: this.parameters.url, sharding: this.parameters.metadata.sharding});\n  async download(chunk: SkeletonChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const response = getOrNotFoundError(await fetchByUint64(\n        this.credentialsProvider, parameters.url, chunk, this.minishardIndexSource, chunk.objectId,\n        cancellationToken));\n    decodeSkeletonChunk(chunk, response, parameters.metadata.vertexAttributes);\n  }\n}\n\nfunction parseAnnotations(\n    buffer: ArrayBuffer, parameters: AnnotationSourceParameters,\n    propertySerializer: AnnotationPropertySerializer): AnnotationGeometryData {\n  const dv = new DataView(buffer);\n  if (buffer.byteLength <= 8) throw new Error('Expected at least 8 bytes');\n  const countLow = dv.getUint32(0, /*littleEndian=*/ true);\n  const countHigh = dv.getUint32(4, /*littleEndian=*/ true);\n  if (countHigh !== 0) throw new Error('Annotation count too high');\n  const numBytes = propertySerializer.serializedBytes;\n  const expectedBytes = 8 + (numBytes + 8) * countLow;\n  if (buffer.byteLength !== expectedBytes) {\n    throw new Error(`Expected ${expectedBytes} bytes, but received: ${buffer.byteLength} bytes`);\n  }\n  const idOffset = 8 + numBytes * countLow;\n  const id = new Uint64();\n  const ids = new Array<string>(countLow);\n  for (let i = 0; i < countLow; ++i) {\n    id.low = dv.getUint32(idOffset + i * 8, /*littleEndian=*/ true);\n    id.high = dv.getUint32(idOffset + i * 8 + 4, /*littleEndian=*/ true);\n    ids[i] = id.toString();\n  }\n  const geometryData = new AnnotationGeometryData();\n  const origData = new Uint8Array(buffer, 8, numBytes * countLow);\n  let data: Uint8Array;\n  const {propertyGroupBytes} = propertySerializer;\n  if (propertyGroupBytes.length > 1) {\n    // Need to transpose the property data.\n    data = new Uint8Array(origData.length);\n\n    let origOffset = 0;\n    let groupOffset = 0;\n    for (let groupIndex = 0; groupIndex < propertyGroupBytes.length; ++groupIndex) {\n      const groupBytesPerAnnotation = propertyGroupBytes[groupIndex];\n      for (let annotationIndex = 0; annotationIndex < countLow; ++annotationIndex) {\n        let origBase = origOffset + annotationIndex * numBytes;\n        let newBase = groupOffset + annotationIndex * groupBytesPerAnnotation;\n        for (let i = 0; i < groupBytesPerAnnotation; ++i) {\n          data[newBase + i] = origData[origBase + i];\n        }\n      }\n      origOffset += groupBytesPerAnnotation;\n      groupOffset += groupBytesPerAnnotation * countLow;\n    }\n  } else {\n    data = origData;\n  }\n  geometryData.data = data;\n  // FIXME: convert endian in order to support big endian platforms\n  const typeToOffset = geometryData.typeToOffset = new Array<number>(annotationTypes.length);\n  typeToOffset.fill(0);\n  typeToOffset[parameters.type] = 0;\n  const typeToIds = geometryData.typeToIds = new Array<string[]>(annotationTypes.length);\n  const typeToIdMaps = geometryData.typeToIdMaps =\n      new Array<Map<string, number>>(annotationTypes.length);\n  typeToIds.fill([]);\n  typeToIds[parameters.type] = ids;\n  typeToIdMaps.fill(new Map());\n  typeToIdMaps[parameters.type] = new Map(ids.map((id, i) => [id, i]));\n  return geometryData;\n}\n\nfunction parseSingleAnnotation(\n    buffer: ArrayBuffer, parameters: AnnotationSourceParameters,\n    propertySerializer: AnnotationPropertySerializer, id: string): Annotation {\n  const handler = annotationTypeHandlers[parameters.type];\n  const baseNumBytes = propertySerializer.serializedBytes;\n  const numRelationships = parameters.relationships.length;\n  const minNumBytes = baseNumBytes + 4 * numRelationships;\n  if (buffer.byteLength < minNumBytes) {\n    throw new Error(`Expected at least ${minNumBytes} bytes, but received: ${buffer.byteLength}`);\n  }\n  const dv = new DataView(buffer);\n  const annotation = handler.deserialize(dv, 0, /*isLittleEndian=*/ true, parameters.rank, id);\n  propertySerializer.deserialize(\n      dv, /*offset=*/ 0, /*annotationIndex=*/ 0, /*annotationCount=*/ 1, /*isLittleEndian=*/ true,\n      annotation.properties = new Array(parameters.properties.length));\n  let offset = baseNumBytes;\n  const relatedSegments: Uint64[][] = annotation.relatedSegments = [];\n  relatedSegments.length = numRelationships;\n  for (let i = 0; i < numRelationships; ++i) {\n    const count = dv.getUint32(offset, /*littleEndian=*/ true);\n    if (buffer.byteLength < minNumBytes + count * 8) {\n      throw new Error(`Expected at least ${minNumBytes} bytes, but received: ${buffer.byteLength}`);\n    }\n    offset += 4;\n    const segments: Uint64[] = relatedSegments[i] = [];\n    for (let j = 0; j < count; ++j) {\n      segments[j] = new Uint64(\n          dv.getUint32(offset, /*littleEndian=*/ true),\n          dv.getUint32(offset + 4, /*littleEndian=*/ true));\n      offset += 8;\n    }\n  }\n  if (offset !== buffer.byteLength) {\n    throw new Error(`Expected ${offset} bytes, but received: ${buffer.byteLength}`);\n  }\n  return annotation;\n}\n\n@registerSharedObject() //\nexport class PrecomputedAnnotationSpatialIndexSourceBackend extends (WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(AnnotationGeometryChunkSourceBackend), AnnotationSpatialIndexSourceParameters)) {\n  private minishardIndexSource =\n      getMinishardIndexDataSource(this.chunkManager, this.credentialsProvider, this.parameters);\n  parent: PrecomputedAnnotationSourceBackend;\n  async download(chunk: AnnotationGeometryChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n\n    const {minishardIndexSource} = this;\n    const {parent} = this;\n    let response: ArrayBuffer|undefined;\n    const {chunkGridPosition} = chunk;\n    if (minishardIndexSource === undefined) {\n      const url = `${parameters.url}/${chunkGridPosition.join('_')}`;\n      try {\n        response = await cancellableFetchSpecialOk(\n            this.credentialsProvider, url, {}, responseArrayBuffer, cancellationToken);\n      } catch (e) {\n        if (!isNotFoundError(e)) throw e;\n      }\n    } else {\n      const {upperChunkBound} = this.spec;\n      const {chunkGridPosition} = chunk;\n      const chunkIndex = encodeZIndexCompressed(new Uint64(), chunkGridPosition, upperChunkBound);\n      const result =\n          await getShardedData(minishardIndexSource, chunk, chunkIndex, cancellationToken);\n      if (result !== undefined) response = result.data;\n    }\n    if (response !== undefined) {\n      chunk.data =\n          parseAnnotations(response, parent.parameters, parent.annotationPropertySerializer);\n    }\n  }\n}\n\n@registerSharedObject() //\nexport class PrecomputedAnnotationSourceBackend extends (WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(AnnotationSource), AnnotationSourceParameters)) {\n  private byIdMinishardIndexSource = getMinishardIndexDataSource(\n      this.chunkManager, this.credentialsProvider, this.parameters.byId);\n  private relationshipIndexSource = this.parameters.relationships.map(\n      x => getMinishardIndexDataSource(this.chunkManager, this.credentialsProvider, x));\n  annotationPropertySerializer = new AnnotationPropertySerializer(\n      this.parameters.rank,\n      annotationTypeHandlers[this.parameters.type].serializedBytes(this.parameters.rank),\n      this.parameters.properties);\n\n  async downloadSegmentFilteredGeometry(\n      chunk: AnnotationSubsetGeometryChunk, relationshipIndex: number,\n      cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const response = await fetchByUint64(\n        this.credentialsProvider, parameters.relationships[relationshipIndex].url, chunk,\n        this.relationshipIndexSource[relationshipIndex], chunk.objectId, cancellationToken);\n    if (response !== undefined) {\n      chunk.data = parseAnnotations(response, this.parameters, this.annotationPropertySerializer);\n    }\n  }\n\n  async downloadMetadata(chunk: AnnotationMetadataChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const id = Uint64.parseString(chunk.key!);\n    const response = await fetchByUint64(\n        this.credentialsProvider, parameters.byId.url, chunk, this.byIdMinishardIndexSource, id,\n        cancellationToken);\n    if (response === undefined) {\n      chunk.annotation = null;\n    } else {\n      chunk.annotation = parseSingleAnnotation(\n          response, this.parameters, this.annotationPropertySerializer, chunk.key!);\n    }\n  }\n}\n\n@registerSharedObject()\nexport class PrecomputedIndexedSegmentPropertySourceBackend extends WithParameters\n(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(\n     IndexedSegmentPropertySourceBackend),\n IndexedSegmentPropertySourceParameters) {\n  minishardIndexSource =\n      getMinishardIndexDataSource(this.chunkManager, this.credentialsProvider, this.parameters);\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DataType} from 'neuroglancer/sliceview/volume/base';\n\nexport const GET_NIFTI_VOLUME_INFO_RPC_ID = 'nifti/getNiftiVolumeInfo';\n\nexport interface NiftiVolumeInfo {\n  rank: number;\n  sourceNames: string[];\n  viewNames: string[];\n  viewScales: Float64Array;\n  sourceScales: Float64Array;\n  units: string[];\n  dataType: DataType;\n  transform: Float64Array;\n  description: string;\n  volumeSize: Uint32Array;\n}\n\nexport class VolumeSourceParameters {\n  url: string;\n\n  static RPC_ID = 'nifti/VolumeChunkSource';\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ChunkLayoutOptions, getChunkDataSizes, getNearIsotropicBlockSize, makeSliceViewChunkSpecification, SliceViewChunkSource, SliceViewChunkSpecification, SliceViewChunkSpecificationBaseOptions, SliceViewChunkSpecificationOptions, SliceViewSourceOptions} from 'neuroglancer/sliceview/base';\nimport {DATA_TYPE_BYTES, DataType} from 'neuroglancer/util/data_type';\nimport {getDependentTransformInputDimensions, vec3} from 'neuroglancer/util/geom';\nimport * as matrix from 'neuroglancer/util/matrix';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport * as vector from 'neuroglancer/util/vector';\n\nexport {DATA_TYPE_BYTES, DataType};\n\nexport interface RenderLayer {\n  sources: VolumeChunkSource[][]|null;\n}\n\n/**\n * Specifies the interpretation of volumetric data.\n */\nexport enum VolumeType {\n  UNKNOWN,\n  IMAGE,\n  SEGMENTATION,\n}\n\n/**\n * By default, choose a chunk size with at most 2^18 = 262144 voxels.\n */\nexport const DEFAULT_MAX_VOXELS_PER_CHUNK_LOG2 = 18;\n\nexport interface VolumeSourceOptions extends SliceViewSourceOptions {\n  discreteValues?: boolean;\n}\n\n/**\n * Common parameters for the VolumeChunkSpecification constructor and\n * VolumeChunkSpecification.getDefaults.\n */\n/**\n * Specifies constructor parameters for VolumeChunkSpecification.\n */\nexport interface VolumeChunkSpecificationBaseOptions extends\n    SliceViewChunkSpecificationBaseOptions {\n  /**\n   * Specifies offset for use by backend.ts:GenericVolumeChunkSource.computeChunkBounds in\n   * calculating chunk voxel coordinates.  The calculated chunk coordinates will be equal to the\n   * voxel position (in chunkLayout coordinates) plus this value.\n   *\n   * Defaults to kZeroVec if not specified.\n   */\n  baseVoxelOffset?: Float32Array;\n  dataType: DataType;\n  fillValue?: number|Uint64;\n\n  /**\n   * If set, indicates that the chunk is in compressed segmentation format with the specified block\n   * size.\n   */\n  compressedSegmentationBlockSize?: vec3;\n}\n\nexport interface VolumeChunkSpecificationOptions extends\n    VolumeChunkSpecificationBaseOptions, SliceViewChunkSpecificationOptions<Uint32Array> {}\n\n\nexport interface VolumeChunkSpecificationVolumeSourceOptions {\n  volumeSourceOptions: VolumeSourceOptions;\n}\n\n/**\n * Specifies additional parameters for VolumeChunkSpecification.withDefaultCompression.\n */\nexport interface VolumeChunkSpecificationDefaultCompressionOptions {\n  /**\n   * Volume type.\n   */\n  volumeType: VolumeType;\n  maxCompressedSegmentationBlockSize?: vec3;\n  minBlockSize?: Uint32Array;\n  maxBlockSize?: Uint32Array;\n\n  /**\n   * Transform from chunk space to the multiscale volume space.\n   * Homogeneous `(rank + 1) * (rank + 1)` matrix in column-major order.\n   */\n  chunkToMultiscaleTransform: Float32Array;\n\n  /**\n   * If specified, must be equal to the product of `chunkToMultiscaleTransform` and\n   * `multiscaleToViewTransform`.\n   */\n  chunkToViewTransform?: Float32Array;\n}\n\n/**\n * Specifies parameters for `makeDefaultVolumeChunkSpecifications`.\n */\nexport interface VolumeChunkSpecificationGetDefaultsOptions extends\n    VolumeChunkSpecificationBaseOptions, VolumeChunkSpecificationDefaultCompressionOptions,\n    ChunkLayoutOptions, VolumeChunkSpecificationVolumeSourceOptions {}\n\nexport interface VolumeChunkSpecification extends SliceViewChunkSpecification<Uint32Array> {\n  baseVoxelOffset: Float32Array;\n  dataType: DataType;\n  compressedSegmentationBlockSize: vec3|undefined;\n  fillValue: number|Uint64;\n}\n\nexport function makeVolumeChunkSpecification(options: VolumeChunkSpecificationOptions):\n    VolumeChunkSpecification {\n  const {\n    rank,\n    dataType,\n    fillValue = (dataType === DataType.UINT64 ? Uint64.ZERO : 0),\n    compressedSegmentationBlockSize\n  } = options;\n  const {baseVoxelOffset = new Float32Array(rank)} = options;\n  return {\n    ...makeSliceViewChunkSpecification(options),\n    compressedSegmentationBlockSize,\n    baseVoxelOffset,\n    dataType,\n    fillValue,\n  };\n}\n\nfunction shouldTranscodeToCompressedSegmentation(\n    options: VolumeChunkSpecificationDefaultCompressionOptions&VolumeChunkSpecificationOptions&\n    VolumeChunkSpecificationVolumeSourceOptions) {\n  if (options.compressedSegmentationBlockSize !== undefined) return false;\n  if (options.volumeType !== VolumeType.SEGMENTATION &&\n      !options.volumeSourceOptions.discreteValues) {\n    return false;\n  }\n  switch (options.dataType) {\n    case DataType.UINT32:\n    case DataType.UINT64:\n      break;\n    default:\n      return false;\n  }\n  switch (options.rank) {\n    case 3:\n      return true;\n    case 4: {\n      // precomputed format always uses 4-d chunks, even if there is a single channel.  We still\n      // want to allow transcoding in that case.  In fact the compressed_segmentation format\n      // supports transcoding even for arbitrary 4-d chunks, but it is not clear it would be a good\n      // default encoding in that case.\n      const {chunkDataSize} = options;\n      if (chunkDataSize[3] !== 1) return false;\n      return true;\n    }\n    default:\n      return false;\n  }\n}\n\n/**\n * Returns a VolumeChunkSpecification with default compression specified if suitable for the\n * volumeType.\n */\nexport function makeVolumeChunkSpecificationWithDefaultCompression(\n    options: VolumeChunkSpecificationDefaultCompressionOptions&VolumeChunkSpecificationOptions&\n    VolumeChunkSpecificationVolumeSourceOptions) {\n  let {\n    rank,\n    lowerVoxelBound,\n    upperVoxelBound,\n  } = options;\n  if (!shouldTranscodeToCompressedSegmentation(options)) {\n    return makeVolumeChunkSpecification(options);\n  }\n  let {\n    volumeSourceOptions: {displayRank, multiscaleToViewTransform},\n    chunkToMultiscaleTransform,\n    chunkToViewTransform,\n  } = options;\n  if (chunkToViewTransform === undefined) {\n    chunkToViewTransform = matrix.multiply(\n        new Float32Array(rank * displayRank), displayRank,  //\n        multiscaleToViewTransform, displayRank,             //\n        chunkToMultiscaleTransform, rank + 1,               //\n        displayRank, rank, rank);\n  }\n  const {maxCompressedSegmentationBlockSize, chunkDataSize} = options;\n  return makeVolumeChunkSpecification({\n    ...options,\n    compressedSegmentationBlockSize: Float32Array.from(getNearIsotropicBlockSize({\n      rank,\n      chunkToViewTransform,\n      displayRank,\n      lowerVoxelBound,\n      upperVoxelBound,\n      maxVoxelsPerChunkLog2: 9,\n      maxBlockSize: maxCompressedSegmentationBlockSize === undefined ?\n          chunkDataSize :\n          vector.min(new Uint32Array(rank), chunkDataSize, maxCompressedSegmentationBlockSize),\n    })) as vec3\n  });\n}\n\nexport function makeDefaultVolumeChunkSpecifications(\n    options: VolumeChunkSpecificationGetDefaultsOptions): VolumeChunkSpecification[] {\n  const {rank} = options;\n  const {\n    volumeSourceOptions: {displayRank, multiscaleToViewTransform, modelChannelDimensionIndices},\n    chunkToMultiscaleTransform\n  } = options;\n  const chunkToViewTransform = matrix.multiply(\n      new Float32Array(displayRank * rank), displayRank,  //\n      multiscaleToViewTransform, displayRank,             //\n      chunkToMultiscaleTransform, rank + 1,               //\n      displayRank, rank, rank);\n  let {minBlockSize} = options;\n  if (minBlockSize === undefined) {\n    minBlockSize = new Uint32Array(rank);\n    minBlockSize.fill(1);\n  } else {\n    minBlockSize = new Uint32Array(minBlockSize);\n  }\n  const {lowerVoxelBound, upperVoxelBound} = options;\n  if (modelChannelDimensionIndices.length !== 0) {\n    for (const chunkDim of getDependentTransformInputDimensions(\n             chunkToMultiscaleTransform, rank, modelChannelDimensionIndices)) {\n      let size = upperVoxelBound[chunkDim];\n      if (lowerVoxelBound !== undefined) {\n        size -= lowerVoxelBound[chunkDim];\n      }\n      minBlockSize[chunkDim] = size;\n    }\n  }\n  const {chunkDataSizes = getChunkDataSizes({\n           ...options,\n           minBlockSize,\n           chunkToViewTransform,\n           displayRank,\n         })} = options;\n  return chunkDataSizes.map(\n      chunkDataSize => makeVolumeChunkSpecificationWithDefaultCompression(\n          {...options, chunkDataSize: chunkDataSize, chunkToViewTransform}));\n}\n\nexport interface VolumeChunkSource extends SliceViewChunkSource {\n  spec: VolumeChunkSpecification;\n}\n\nexport const VOLUME_RPC_ID = 'volume';\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {ChunkManager, WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier} from 'neuroglancer/chunk_manager/base';\nimport {GenericSharedDataSource, PriorityGetter} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {SharedCredentialsProviderCounterpart, WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {GET_NIFTI_VOLUME_INFO_RPC_ID, NiftiVolumeInfo, VolumeSourceParameters} from 'neuroglancer/datasource/nifti/base';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {DataType} from 'neuroglancer/sliceview/volume/base';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Borrowed} from 'neuroglancer/util/disposable';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {kOneVec, mat4, quat, translationRotationScaleZReflectionToMat4, vec3} from 'neuroglancer/util/geom';\nimport * as matrix from 'neuroglancer/util/matrix';\nimport {SpecialProtocolCredentials, SpecialProtocolCredentialsProvider} from 'neuroglancer/util/special_protocol_request';\nimport {registerPromiseRPC, registerSharedObject, RPCPromise} from 'neuroglancer/worker_rpc';\nimport {isCompressed, NIFTI1, NIFTI2, readHeader, readImage} from 'nifti-reader-js';\n\nexport class NiftiFileData {\n  uncompressedData: ArrayBuffer;\n  header: NIFTI1|NIFTI2;\n}\n\nasync function decodeNiftiFile(buffer: ArrayBuffer, cancellationToken: CancellationToken) {\n  if (isCompressed(buffer)) {\n    buffer = (await requestAsyncComputation(\n                  decodeGzip, cancellationToken, [buffer], new Uint8Array(buffer)))\n                 .buffer;\n  }\n  let data = new NiftiFileData();\n  data.uncompressedData = buffer;\n  let header = readHeader(buffer);\n  if (header === null) {\n    throw new Error('Failed to parse NIFTI header.');\n  }\n  data.header = header;\n  return {data, size: buffer.byteLength};\n}\n\nfunction getNiftiFileData(\n    chunkManager: Borrowed<ChunkManager>, credentialsProvider: SpecialProtocolCredentialsProvider,\n    url: string, getPriority: PriorityGetter, cancellationToken: CancellationToken) {\n  return GenericSharedDataSource.getUrl(\n      chunkManager, credentialsProvider, decodeNiftiFile, url, getPriority, cancellationToken);\n}\n\nconst NIFTI_HEADER_INFO_PRIORITY = 1000;\n\nasync function getNiftiHeaderInfo(\n    chunkManager: Borrowed<ChunkManager>, credentialsProvider: SpecialProtocolCredentialsProvider,\n    url: string, cancellationToken: CancellationToken) {\n  const data = await getNiftiFileData(\n      chunkManager, credentialsProvider, url,\n      () => ({priorityTier: ChunkPriorityTier.VISIBLE, priority: NIFTI_HEADER_INFO_PRIORITY}),\n      cancellationToken);\n  return data.header;\n}\n\nfunction convertAffine(affine: number[][]) {\n  return mat4.fromValues(\n      affine[0][0], affine[1][0], affine[2][0], affine[3][0], affine[0][1], affine[1][1],\n      affine[2][1], affine[3][1], affine[0][2], affine[1][2], affine[2][2], affine[3][2],\n      affine[0][3], affine[1][3], affine[2][3], affine[3][3]);\n}\n\n\nenum NiftiDataType {\n  NONE = 0,\n  BINARY = 1,\n  UINT8 = 2,\n  INT16 = 4,\n  INT32 = 8,\n  FLOAT32 = 16,\n  COMPLEX64 = 32,\n  FLOAT64 = 64,\n  RGB24 = 128,\n  INT8 = 256,\n  UINT16 = 512,\n  UINT32 = 768,\n  INT64 = 1024,\n  UINT64 = 1280,\n  FLOAT128 = 1536,\n  COMPLEX128 = 1792,\n  COMPLEX256 = 2048,\n}\n\nconst DATA_TYPE_CONVERSIONS = new Map([\n  [NiftiDataType.INT8, {dataType: DataType.INT8}],\n  [NiftiDataType.UINT8, {dataType: DataType.UINT8}],\n  [NiftiDataType.INT16, {dataType: DataType.INT16}],\n  [NiftiDataType.UINT16, {dataType: DataType.UINT16}],\n  [NiftiDataType.INT32, {dataType: DataType.INT32}],\n  [NiftiDataType.UINT32, {dataType: DataType.UINT32}],\n  [NiftiDataType.INT64, {dataType: DataType.UINT64}],\n  [NiftiDataType.UINT64, {dataType: DataType.UINT64}],\n  [NiftiDataType.FLOAT32, {dataType: DataType.FLOAT32}],\n]);\n\nregisterPromiseRPC(\n    GET_NIFTI_VOLUME_INFO_RPC_ID,\n    async function(x, cancellationToken): RPCPromise<NiftiVolumeInfo> {\n      const chunkManager = this.getRef<ChunkManager>(x['chunkManager']);\n      const credentialsProvider = this.getOptionalRef<\n          SharedCredentialsProviderCounterpart<Exclude<SpecialProtocolCredentials, undefined>>>(\n          x['credentialsProvider']);\n      try {\n        const header = await getNiftiHeaderInfo(\n            chunkManager, credentialsProvider, x['url'], cancellationToken);\n        let dataTypeInfo = DATA_TYPE_CONVERSIONS.get(header.datatypeCode);\n        if (dataTypeInfo === undefined) {\n          throw new Error(\n              `Unsupported data type: ` +\n              `${NiftiDataType[header.datatypeCode] || header.datatypeCode}.`);\n        }\n        let spatialInvScale = 1;\n        let spatialUnit = '';\n        switch (header.xyzt_units & NIFTI1.SPATIAL_UNITS_MASK) {\n          case NIFTI1.UNITS_METER:\n            spatialInvScale = 1;\n            spatialUnit = 'm';\n            break;\n          case NIFTI1.UNITS_MM:\n            spatialInvScale = 1e3;\n            spatialUnit = 'm';\n            break;\n          case NIFTI1.UNITS_MICRON:\n            spatialInvScale = 1e6;\n            spatialUnit = 'm';\n            break;\n        }\n\n        let timeUnit = '';\n        let timeInvScale = 1;\n        switch (header.xyzt_units & NIFTI1.TEMPORAL_UNITS_MASK) {\n          case NIFTI1.UNITS_SEC:\n            timeUnit = 's';\n            timeInvScale = 1;\n            break;\n          case NIFTI1.UNITS_MSEC:\n            timeUnit = 's';\n            timeInvScale = 1e3;\n            break;\n          case NIFTI1.UNITS_USEC:\n            timeUnit = 's';\n            timeInvScale = 1e6;\n            break;\n          case NIFTI1.UNITS_HZ:\n            timeUnit = 'Hz';\n            timeInvScale = 1;\n            break;\n          case NIFTI1.UNITS_RADS:\n            timeUnit = 'rad/s';\n            timeInvScale = 1;\n            break;\n        }\n        let units: string[] = [spatialUnit, spatialUnit, spatialUnit, timeUnit, '', '', ''];\n        let sourceScales = Float64Array.of(\n            header.pixDims[1] / spatialInvScale, header.pixDims[2] / spatialInvScale,\n            header.pixDims[3] / spatialInvScale, header.pixDims[4] / timeInvScale,\n            header.pixDims[5], header.pixDims[6], header.pixDims[7]);\n        let viewScales = Float64Array.of(\n            1 / spatialInvScale, 1 / spatialInvScale, 1 / spatialInvScale, 1 / timeInvScale, 1, 1,\n            1);\n        let sourceNames = ['i', 'j', 'k', 'm', 'c^', 'c1^', 'c2^'];\n        let viewNames = ['x', 'y', 'z', 't', 'c^', 'c1^', 'c2^'];\n        const rank = header.dims[0];\n        sourceNames = sourceNames.slice(0, rank);\n        viewNames = viewNames.slice(0, rank);\n        units = units.slice(0, rank);\n        sourceScales = sourceScales.slice(0, rank);\n        viewScales = viewScales.slice(0, rank);\n        const {quatern_b, quatern_c, quatern_d} = header;\n        const quatern_a =\n            Math.sqrt(1.0 - quatern_b * quatern_b - quatern_c * quatern_c - quatern_d * quatern_d);\n        const qfac = header.pixDims[0] === -1 ? -1 : 1;\n        const qoffset = vec3.fromValues(header.qoffset_x, header.qoffset_y, header.qoffset_z);\n        // https://nifti.nimh.nih.gov/nifti-1/documentation/nifti1fields/nifti1fields_pages/qsform.html\n        const method3Transform = convertAffine(header.affine);\n        method3Transform;\n        const method2Transform = translationRotationScaleZReflectionToMat4(\n            mat4.create(), qoffset, quat.fromValues(quatern_b, quatern_c, quatern_d, quatern_a),\n            kOneVec, qfac);\n        const transform = matrix.createIdentity(Float64Array, rank + 1);\n        const copyRank = Math.min(3, rank);\n        for (let row = 0; row < copyRank; ++row) {\n          for (let col = 0; col < copyRank; ++col) {\n            transform[col * (rank + 1) + row] = method2Transform[col * 4 + row];\n          }\n          transform[rank * (rank + 1) + row] = method2Transform[12 + row];\n        }\n        let info: NiftiVolumeInfo = {\n          rank,\n          sourceNames,\n          viewNames,\n          units,\n          sourceScales,\n          viewScales,\n          description: header.description,\n          transform,\n          dataType: dataTypeInfo.dataType,\n          volumeSize: Uint32Array.from(header.dims.slice(1, 1 + rank)),\n        };\n        return {value: info};\n      } finally {\n        chunkManager.dispose();\n        credentialsProvider?.dispose();\n      }\n    });\n\n@registerSharedObject() export class NiftiVolumeChunkSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(VolumeChunkSource), VolumeSourceParameters)) {\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    chunk.chunkDataSize = this.spec.chunkDataSize;\n    const data = await getNiftiFileData(\n        this.chunkManager, this.credentialsProvider, this.parameters.url,\n        () => ({priorityTier: chunk.priorityTier, priority: chunk.priority}), cancellationToken);\n    const imageBuffer = readImage(data.header, data.uncompressedData);\n    await decodeRawChunk(\n        chunk, cancellationToken, imageBuffer,\n        data.header.littleEndian ? Endianness.LITTLE : Endianness.BIG);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\n\nexport const decodeBlosc = asyncComputation<(data: Uint8Array) => Uint8Array>('decodeBlosc');\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  GZIP,\n  BLOSC,\n}\n\nexport class VolumeChunkSourceParameters {\n  url: string;\n  encoding: VolumeChunkEncoding;\n\n  static RPC_ID = 'n5/VolumeChunkSource';\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeBlosc} from 'neuroglancer/async_computation/decode_blosc_request';\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {VolumeChunkEncoding, VolumeChunkSourceParameters} from 'neuroglancer/datasource/n5/base';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {isNotFoundError, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {cancellableFetchSpecialOk, SpecialProtocolCredentials} from 'neuroglancer/util/special_protocol_request';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\nasync function decodeChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer,\n    encoding: VolumeChunkEncoding) {\n  const dv = new DataView(response);\n  const mode = dv.getUint16(0, /*littleEndian=*/ false);\n  if (mode !== 0) {\n    throw new Error(`Unsupported mode: ${mode}.`);\n  }\n  const numDimensions = dv.getUint16(2, /*littleEndian=*/ false);\n  if (numDimensions !== chunk.source!.spec.rank) {\n    throw new Error(`Number of dimensions must be 3.`);\n  }\n  let offset = 4;\n  const shape = new Uint32Array(numDimensions);\n  for (let i = 0; i < numDimensions; ++i) {\n    shape[i] = dv.getUint32(offset, /*littleEndian=*/ false);\n    offset += 4;\n  }\n  chunk.chunkDataSize = shape;\n  let buffer = new Uint8Array(response, offset);\n  switch (encoding) {\n    case VolumeChunkEncoding.GZIP:\n      buffer =\n          await requestAsyncComputation(decodeGzip, cancellationToken, [buffer.buffer], buffer);\n      break;\n    case VolumeChunkEncoding.BLOSC:\n      buffer =\n          await requestAsyncComputation(decodeBlosc, cancellationToken, [buffer.buffer], buffer);\n      break;\n  }\n  await decodeRawChunk(\n      chunk, cancellationToken, buffer.buffer, Endianness.BIG, buffer.byteOffset,\n      buffer.byteLength);\n}\n\n\n@registerSharedObject() export class PrecomputedVolumeChunkSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(VolumeChunkSource), VolumeChunkSourceParameters)) {\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    const {chunkGridPosition} = chunk;\n    let url = parameters.url;\n    const rank = this.spec.rank;\n    for (let i = 0; i < rank; ++i) {\n      url += `/${chunkGridPosition[i]}`;\n    }\n    try {\n      const response = await cancellableFetchSpecialOk(\n          this.credentialsProvider, url, {}, responseArrayBuffer, cancellationToken);\n      await decodeChunk(chunk, cancellationToken, response, parameters.encoding);\n    } catch (e) {\n      if (!isNotFoundError(e)) throw e;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endianness } from \"neuroglancer/util/endian\";\n\nexport enum ZarrCompressor {\n  RAW,\n  GZIP,\n  BLOSC,\n}\n\nexport interface ZarrEncoding {\n  endianness: Endianness;\n  compressor: ZarrCompressor;\n}\n\nexport type ZarrSeparator = '/' | '.';\n\nexport class VolumeChunkSourceParameters {\n  url: string;\n  encoding: ZarrEncoding;\n  separator: ZarrSeparator;\n  order: 'C'|'F';\n\n  static RPC_ID = 'zarr/VolumeChunkSource';\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {decodeBlosc} from 'neuroglancer/async_computation/decode_blosc_request';\nimport {decodeGzip} from 'neuroglancer/async_computation/decode_gzip_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {VolumeChunkSourceParameters, ZarrCompressor, ZarrEncoding} from 'neuroglancer/datasource/zarr/base';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {VolumeChunk, VolumeChunkSource} from 'neuroglancer/sliceview/volume/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {isNotFoundError, responseArrayBuffer} from 'neuroglancer/util/http_request';\nimport {cancellableFetchSpecialOk, SpecialProtocolCredentials} from 'neuroglancer/util/special_protocol_request';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\n\nasync function decodeChunk(\n    chunk: VolumeChunk, cancellationToken: CancellationToken, response: ArrayBuffer,\n    encoding: ZarrEncoding) {\n  let buffer = new Uint8Array(response);\n  switch (encoding.compressor) {\n    case ZarrCompressor.GZIP:\n      buffer =\n          await requestAsyncComputation(decodeGzip, cancellationToken, [buffer.buffer], buffer);\n      break;\n    case ZarrCompressor.RAW:\n      break;\n    case ZarrCompressor.BLOSC:\n      buffer =\n          await requestAsyncComputation(decodeBlosc, cancellationToken, [buffer.buffer], buffer);\n  }\n  await decodeRawChunk(chunk, cancellationToken, buffer.buffer, encoding.endianness);\n}\n\n\n@registerSharedObject() export class PrecomputedVolumeChunkSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(VolumeChunkSource), VolumeChunkSourceParameters)) {\n  async download(chunk: VolumeChunk, cancellationToken: CancellationToken) {\n    chunk.chunkDataSize = this.spec.chunkDataSize;\n    const {parameters} = this;\n    const {chunkGridPosition} = chunk;\n    let {url, separator, order} = parameters;\n    const rank = this.spec.rank;\n    if (order === 'C') {\n      for (let i = rank; i > 0; --i) {\n        url += `${i == rank ? '/' : separator}${chunkGridPosition[i - 1]}`;\n      }\n    } else {\n      for (let i = 0; i < rank; ++i) {\n        url += `${i == 0 ? '/' : separator}${chunkGridPosition[i]}`;\n      }\n    }\n    try {\n      const response = await cancellableFetchSpecialOk(\n          this.credentialsProvider, url, {}, responseArrayBuffer, cancellationToken);\n      await decodeChunk(chunk, cancellationToken, response, parameters.encoding);\n    } catch (e) {\n      if (!isNotFoundError(e)) throw e;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\nimport {TriangularMesh} from 'neuroglancer/datasource/vtk/parse';\n\nexport const parseVTKFromArrayBuffer = asyncComputation<(buffer: ArrayBuffer) => {\n  data: TriangularMesh, size: number\n}>('parseVTKFromArrayBuffer');\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DataType} from 'neuroglancer/util/data_type';\n\nexport const SINGLE_MESH_LAYER_RPC_ID = 'single_mesh/SingleMeshLayer';\nexport const GET_SINGLE_MESH_INFO_RPC_ID = 'single_mesh/getSingleMeshInfo';\n\nexport const SINGLE_MESH_CHUNK_KEY = '';\n\nexport interface VertexAttributeInfo {\n  name: string;\n  dataType: DataType;\n  numComponents: number;\n  source?: string;\n  min?: number;\n  max?: number;\n}\n\nexport interface SingleMeshInfo {\n  numVertices: number;\n  numTriangles: number;\n  // Perhaps bounding box?\n  // Perhaps transform data?\n  vertexAttributes: VertexAttributeInfo[];\n}\n\nexport interface SingleMeshData {\n  vertexPositions: Float32Array;\n  indices: Uint32Array;\n  vertexNormals?: Float32Array;\n  vertexAttributes: Float32Array[];\n}\n\nexport class SingleMeshSourceParameters {\n  meshSourceUrl: string;\n}\n\nexport class SingleMeshSourceParametersWithInfo extends SingleMeshSourceParameters {\n  info: SingleMeshInfo;\n\n  static RPC_ID = 'single_mesh/SingleMeshSource';\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Chunk, ChunkManager, ChunkSource, withChunkManager, WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier} from 'neuroglancer/chunk_manager/base';\nimport {PriorityGetter} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {SharedCredentialsProviderCounterpart, WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {computeVertexNormals} from 'neuroglancer/mesh/backend';\nimport {GET_SINGLE_MESH_INFO_RPC_ID, SINGLE_MESH_CHUNK_KEY, SINGLE_MESH_LAYER_RPC_ID, SingleMeshData, SingleMeshInfo, SingleMeshSourceParameters, SingleMeshSourceParametersWithInfo, VertexAttributeInfo} from 'neuroglancer/single_mesh/base';\nimport {TypedArray} from 'neuroglancer/util/array';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {stableStringify} from 'neuroglancer/util/json';\nimport {SpecialProtocolCredentials} from 'neuroglancer/util/special_protocol_request';\nimport {SpecialProtocolCredentialsProvider} from 'neuroglancer/util/special_protocol_request';\nimport {getBasePriority, getPriorityTier, withSharedVisibility} from 'neuroglancer/visibility_priority/backend';\nimport {registerPromiseRPC, registerSharedObject, RPC, RPCPromise, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\nconst SINGLE_MESH_CHUNK_PRIORITY = 50;\n\n/**\n * Chunk that contains the single mesh.\n */\nexport class SingleMeshChunk extends Chunk {\n  data: SingleMeshData|null = null;\n  constructor() {\n    super();\n  }\n  freeSystemMemory() {\n    this.data = null;\n  }\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    let {vertexPositions, indices, vertexNormals, vertexAttributes} = this.data!;\n    msg['vertexPositions'] = vertexPositions;\n    msg['indices'] = indices;\n    msg['vertexNormals'] = vertexNormals;\n    msg['vertexAttributes'] = vertexAttributes;\n    const transferSet = new Set<ArrayBuffer>();\n    transferSet.add(vertexPositions!.buffer);\n    transferSet.add(indices!.buffer);\n    transferSet.add(vertexNormals!.buffer);\n    for (const data of vertexAttributes!) {\n      transferSet.add(data.buffer);\n    }\n    transfers.push(...transferSet);\n    this.data = null;\n  }\n  downloadSucceeded() {\n    let {vertexPositions, indices, vertexNormals, vertexAttributes} = this.data!;\n    let totalBytes = this.gpuMemoryBytes =\n        vertexPositions.byteLength + indices.byteLength + vertexNormals!.byteLength;\n    for (const data of vertexAttributes) {\n      totalBytes += data.byteLength;\n    }\n    this.systemMemoryBytes = this.gpuMemoryBytes = totalBytes;\n    super.downloadSucceeded();\n  }\n}\n\nexport interface SingleMesh extends SingleMeshData { info: SingleMeshInfo; }\n\nexport interface SingleMeshVertexAttributes {\n  numVertices: number;\n  attributeInfo: VertexAttributeInfo[];\n  attributes: Float32Array[];\n}\n\ninterface SingleMeshFactory {\n  description?: string;\n  getMesh:\n      (chunkManager: ChunkManager, credentialsProvider: SpecialProtocolCredentialsProvider,\n       url: string, getPriority: PriorityGetter,\n       cancellationToken: CancellationToken) => Promise<SingleMesh>;\n}\n\nconst singleMeshFactories = new Map<string, SingleMeshFactory>();\nexport function registerSingleMeshFactory(name: string, factory: SingleMeshFactory) {\n  singleMeshFactories.set(name, factory);\n}\n\nconst protocolPattern = /^(?:([a-zA-Z-+_]+):\\/\\/)?(.*)$/;\n\nfunction getDataSource<T>(factories: Map<string, T>, url: string): [T, string, string] {\n  let m = url.match(protocolPattern);\n  if (m === null || m[1] === undefined) {\n    throw new Error(`Data source URL must have the form \"<protocol>://<path>\".`);\n  }\n  let dataSource = m[1];\n  let factory = factories.get(dataSource);\n  if (factory === undefined) {\n    throw new Error(`Unsupported data source: ${JSON.stringify(dataSource)}.`);\n  }\n  return [factory, m[2], dataSource];\n}\n\nexport function getMesh(\n    chunkManager: ChunkManager, credentialsProvider: SpecialProtocolCredentialsProvider,\n    url: string, getPriority: PriorityGetter, cancellationToken: CancellationToken) {\n  let [factory, path] = getDataSource(singleMeshFactories, url);\n  return factory.getMesh(chunkManager, credentialsProvider, path, getPriority, cancellationToken);\n}\n\nexport function getMinMax(array: TypedArray): [number, number] {\n  let min = Number.POSITIVE_INFINITY;\n  let max = Number.NEGATIVE_INFINITY;\n  for (let value of array) {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  }\n  return [min, max];\n}\n\nexport function getCombinedMesh(\n    chunkManager: ChunkManager, credentialsProvider: SpecialProtocolCredentialsProvider,\n    parameters: SingleMeshSourceParameters, getPriority: PriorityGetter,\n    cancellationToken: CancellationToken) {\n  return getMesh(\n      chunkManager, credentialsProvider, parameters.meshSourceUrl, getPriority, cancellationToken);\n}\n\n@registerSharedObject() export class SingleMeshSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(ChunkSource), SingleMeshSourceParametersWithInfo)) {\n  getChunk() {\n    const key = SINGLE_MESH_CHUNK_KEY;\n    let chunk = <SingleMeshChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(SingleMeshChunk);\n      chunk.initialize(key);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  download(chunk: SingleMeshChunk, cancellationToken: CancellationToken) {\n    const getPriority = () => ({priorityTier: chunk.priorityTier, priority: chunk.priority});\n    return getCombinedMesh(\n               this.chunkManager, this.credentialsProvider, this.parameters, getPriority,\n               cancellationToken)\n        .then(data => {\n          if (stableStringify(data.info) !== stableStringify(this.parameters.info)) {\n            throw new Error(`Mesh info has changed.`);\n          }\n          if (data.vertexNormals === undefined) {\n            data.vertexNormals = computeVertexNormals(data.vertexPositions, data.indices);\n          }\n          chunk.data = data;\n        });\n  }\n}\n\nconst SingleMeshLayerBase = withSharedVisibility(withChunkManager(SharedObjectCounterpart));\n@registerSharedObject(SINGLE_MESH_LAYER_RPC_ID)\nexport class SingleMeshLayer extends SingleMeshLayerBase {\n  source: SingleMeshSource;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<SingleMeshSource>(options['source']));\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n    }));\n  }\n\n  private updateChunkPriorities() {\n    const visibility = this.visibility.value;\n    if (visibility === Number.NEGATIVE_INFINITY) {\n      return;\n    }\n    const priorityTier = getPriorityTier(visibility);\n    const basePriority = getBasePriority(visibility);\n    const {source, chunkManager} = this;\n    const chunk = source.getChunk();\n    chunkManager.requestChunk(chunk, priorityTier, basePriority + SINGLE_MESH_CHUNK_PRIORITY);\n  }\n}\n\nconst INFO_PRIORITY = 1000;\n\nregisterPromiseRPC(\n    GET_SINGLE_MESH_INFO_RPC_ID, async function(x, cancellationToken): RPCPromise<SingleMeshInfo> {\n      const chunkManager = this.getRef<ChunkManager>(x['chunkManager']);\n      const credentialsProvider = this.getOptionalRef<\n          SharedCredentialsProviderCounterpart<Exclude<SpecialProtocolCredentials, undefined>>>(\n          x['credentialsProvider']);\n      try {\n        let parameters = <SingleMeshSourceParameters>x['parameters'];\n        const mesh = await getCombinedMesh(\n            chunkManager, credentialsProvider, parameters,\n            () => ({priorityTier: ChunkPriorityTier.VISIBLE, priority: INFO_PRIORITY}),\n            cancellationToken);\n        return {value: mesh.info};\n      } finally {\n        chunkManager.dispose();\n        credentialsProvider?.dispose();\n      }\n    });\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {parseVTKFromArrayBuffer} from 'neuroglancer/async_computation/vtk_mesh_request';\nimport {GenericSharedDataSource} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {registerSingleMeshFactory, SingleMesh} from 'neuroglancer/single_mesh/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {DataType} from 'neuroglancer/util/data_type';\n\n/**\n * This needs to be a global function, because it identifies the instance of GenericSharedDataSource\n * to use.\n */\nfunction parse(buffer: ArrayBuffer, cancellationToken: CancellationToken) {\n  return requestAsyncComputation(parseVTKFromArrayBuffer, cancellationToken, [buffer], buffer);\n}\n\nregisterSingleMeshFactory('vtk', {\n  description: 'VTK',\n  getMesh: (chunkManager, credentialsProvider, url, getPriority, cancellationToken) =>\n      GenericSharedDataSource\n          .getUrl(chunkManager, credentialsProvider, parse, url, getPriority, cancellationToken)\n          .then(mesh => {\n            let result: SingleMesh = {\n              info: {\n                numTriangles: mesh.numTriangles,\n                numVertices: mesh.numVertices,\n                vertexAttributes: [],\n              },\n              indices: mesh.indices,\n              vertexPositions: mesh.vertexPositions,\n              vertexAttributes: [],\n            };\n            for (const attribute of mesh.vertexAttributes) {\n              result.info.vertexAttributes.push({\n                name: attribute.name,\n                dataType: DataType.FLOAT32,\n                numComponents: attribute.numComponents,\n              });\n              result.vertexAttributes.push(attribute.data);\n            }\n            return result;\n          })\n});\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {asyncComputation} from 'neuroglancer/async_computation';\nimport {SingleMesh} from 'neuroglancer/single_mesh/backend';\n\nexport const parseOBJFromArrayBuffer = asyncComputation<(buffer: ArrayBuffer) => {\n  data: SingleMesh, size: number\n}>('parseOBJFromArrayBuffer');\n", "/**\n * @license\n * Copyright 2020 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseOBJFromArrayBuffer} from 'neuroglancer/async_computation/obj_mesh_request';\nimport {requestAsyncComputation} from 'neuroglancer/async_computation/request';\nimport {GenericSharedDataSource} from 'neuroglancer/chunk_manager/generic_file_source';\nimport {registerSingleMeshFactory} from 'neuroglancer/single_mesh/backend';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\n\n/**\n * This needs to be a global function, because it identifies the instance of GenericSharedDataSource\n * to use.\n */\nfunction parse(buffer: ArrayBuffer, cancellationToken: CancellationToken) {\n  return requestAsyncComputation(parseOBJFromArrayBuffer, cancellationToken, [buffer], buffer);\n}\n\nregisterSingleMeshFactory('obj', {\n  description: 'OBJ',\n  getMesh: (chunkManager, credentialsProvider, url, getPriority, cancellationToken) =>\n      GenericSharedDataSource.getUrl(\n          chunkManager, credentialsProvider, parse, url, getPriority, cancellationToken)\n});\n", "/**\n * @license\n * Copyright 2019 The Neuroglancer Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {mat4} from 'neuroglancer/util/geom';\nimport {ShardingParameters} from 'neuroglancer/datasource/precomputed/base';\nimport {ChunkLayoutOptions, makeSliceViewChunkSpecification, SliceViewChunkSource, SliceViewChunkSpecification, SliceViewChunkSpecificationBaseOptions, SliceViewChunkSpecificationOptions} from 'neuroglancer/sliceview/base';\nimport {DataType} from 'neuroglancer/sliceview/base';\n\nexport const PYCG_APP_VERSION = 1;\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  JPEG,\n  COMPRESSED_SEGMENTATION\n}\n\nexport class VolumeChunkSourceParameters {\n  url: string;\n  encoding: VolumeChunkEncoding;\n  sharding: ShardingParameters|undefined;\n\n  static RPC_ID = 'graphene/VolumeChunkSource';\n}\n\n\nexport class ChunkedGraphSourceParameters {\n  url: string;\n\n  static RPC_ID = 'graphene/ChunkedGraphSource';\n}\n\nexport class MeshSourceParameters {\n  manifestUrl: string;\n  fragmentUrl: string;\n  lod: number;\n  sharding: Array<ShardingParameters>|undefined;\n  nBitsForLayerId: number;\n\n  static RPC_ID = 'graphene/MeshSource';\n}\n\nexport class MultiscaleMeshMetadata {\n  transform: mat4;\n  lodScaleMultiplier: number;\n  vertexQuantizationBits: number;\n  sharding: Array<ShardingParameters>|undefined;\n}\n\nimport { Uint64 } from 'neuroglancer/util/uint64';\n\nexport const responseIdentity = async (x: any) => x;\n\nexport function isBaseSegmentId(segmentId: Uint64, nBitsForLayerId: number) {\n  const layerId = Uint64.rshift(new Uint64(), segmentId, 64 - nBitsForLayerId);\n  return Uint64.equal(layerId, Uint64.ONE);\n}\n\nexport function getGrapheneFragmentKey(fragmentId: string) {\n  const sharded = fragmentId.charAt(0) === '~';\n\n  if (sharded) {\n    const parts = fragmentId.substring(1).split(/:(.+)/);\n    return {key:parts[0], fragmentId: parts[1]};\n  } else {\n    return {key:fragmentId, fragmentId: fragmentId};\n  }\n}\n\nexport const CHUNKED_GRAPH_LAYER_RPC_ID = 'ChunkedGraphLayer';\nexport const CHUNKED_GRAPH_RENDER_LAYER_UPDATE_SOURCES_RPC_ID = 'ChunkedGraphLayer:updateSources'\nexport const RENDER_RATIO_LIMIT = 5.0;\n\nexport interface ChunkedGraphChunkSpecificationBaseOptions extends\n    SliceViewChunkSpecificationBaseOptions {\n  /**\n   * Specifies offset for use by backend.ts:GenericVolumeChunkSource.computeChunkBounds in\n   * calculating chunk voxel coordinates.  The calculated chunk coordinates will be equal to the\n   * voxel position (in chunkLayout coordinates) plus this value.\n   *\n   * Defaults to kZeroVec if not specified.\n   */\n  baseVoxelOffset?: Float32Array;\n  dataType: DataType;\n}\n\nexport interface ChunkedGraphChunkSpecificationOptions extends\n    ChunkedGraphChunkSpecificationBaseOptions, SliceViewChunkSpecificationOptions<Uint32Array> {}\n\n/**\n * Specifies parameters for ChunkedGraphChunkSpecification.getDefaults.\n */\nexport interface ChunkedGraphChunkSpecificationGetDefaultsOptions extends\n    ChunkedGraphChunkSpecificationBaseOptions, ChunkLayoutOptions {}\n\n/**\n * Specifies a chunk layout and voxel size.\n */\nexport interface ChunkedGraphChunkSpecification extends SliceViewChunkSpecification<Uint32Array> {\n  baseVoxelOffset: Float32Array;\n  dataType: DataType;\n}\n\nexport function makeChunkedGraphChunkSpecification(options: ChunkedGraphChunkSpecificationOptions): ChunkedGraphChunkSpecification {\n  const {rank, dataType} = options;\n  const {baseVoxelOffset = new Float32Array(rank)} = options;\n\n  return {\n    ...makeSliceViewChunkSpecification(options),\n    baseVoxelOffset,\n    dataType,\n  }\n}\n\nexport interface ChunkedGraphChunkSource extends SliceViewChunkSource {\n  spec: ChunkedGraphChunkSpecification;\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WithParameters} from 'neuroglancer/chunk_manager/backend';\nimport {WithSharedCredentialsProviderCounterpart} from 'neuroglancer/credentials_provider/shared_counterpart';\nimport {assignMeshFragmentData, FragmentChunk, ManifestChunk, MeshSource} from 'neuroglancer/mesh/backend';\nimport {getGrapheneFragmentKey, responseIdentity} from 'neuroglancer/datasource/graphene/base';\nimport {CancellationToken} from 'neuroglancer/util/cancellation';\nimport {isNotFoundError, responseArrayBuffer, responseJson} from 'neuroglancer/util/http_request';\nimport {cancellableFetchSpecialOk, SpecialProtocolCredentials, SpecialProtocolCredentialsProvider} from 'neuroglancer/util/special_protocol_request';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {registerSharedObject} from 'neuroglancer/worker_rpc';\nimport {ChunkedGraphSourceParameters, MeshSourceParameters} from 'neuroglancer/datasource/graphene/base';\nimport {decodeManifestChunk} from 'neuroglancer/datasource/precomputed/backend';\nimport {fetchSpecialHttpByteRange} from 'neuroglancer/util/byte_range_http_requests';\nimport debounce from 'lodash/debounce';\nimport {withChunkManager, Chunk, ChunkSource} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {TransformedSource, forEachPlaneIntersectingVolumetricChunk, getNormalizedChunkLayout, SliceViewProjectionParameters} from 'neuroglancer/sliceview/base';\nimport {CHUNKED_GRAPH_LAYER_RPC_ID, ChunkedGraphChunkSpecification, CHUNKED_GRAPH_RENDER_LAYER_UPDATE_SOURCES_RPC_ID, RENDER_RATIO_LIMIT} from 'neuroglancer/datasource/graphene/base';\nimport {Uint64Set} from 'neuroglancer/uint64_set';\nimport {vec3, vec3Key} from 'neuroglancer/util/geom';\nimport {registerRPC, RPC} from 'neuroglancer/worker_rpc';\n\nimport { deserializeTransformedSources, SliceViewChunkSourceBackend } from 'neuroglancer/sliceview/backend';\nimport { getBasePriority, getPriorityTier, withSharedVisibility } from 'neuroglancer/visibility_priority/backend';\nimport {isBaseSegmentId} from 'neuroglancer/datasource/graphene/base';\nimport { withSegmentationLayerBackendState } from 'neuroglancer/segmentation_display_state/backend';\nimport { RenderedViewBackend, RenderLayerBackend, RenderLayerBackendAttachment } from 'neuroglancer/render_layer_backend';\nimport { SharedWatchableValue } from 'neuroglancer/shared_watchable_value';\nimport { DisplayDimensionRenderInfo } from 'neuroglancer/navigation_state';\nimport { forEachVisibleSegment } from 'neuroglancer/segmentation_display_state/base';\nimport { computeChunkBounds } from 'neuroglancer/sliceview/volume/backend';\n\nfunction getVerifiedFragmentPromise(\n    credentialsProvider: SpecialProtocolCredentialsProvider,\n    chunk: FragmentChunk,\n    parameters: MeshSourceParameters,\n    cancellationToken: CancellationToken) {\n  if (chunk.fragmentId && chunk.fragmentId.charAt(0) === '~') {\n    let parts = chunk.fragmentId.substr(1).split(':');\n    let startOffset: Uint64|number, endOffset: Uint64|number;\n    startOffset = Number(parts[1]);\n    endOffset = startOffset+Number(parts[2]);\n    return fetchSpecialHttpByteRange(credentialsProvider,\n      `${parameters.fragmentUrl}/initial/${parts[0]}`,\n      startOffset,\n      endOffset,\n      cancellationToken\n    );\n  }\n  return cancellableFetchSpecialOk(\n    credentialsProvider,\n    `${parameters.fragmentUrl}/dynamic/${chunk.fragmentId}`, {}, responseArrayBuffer,\n    cancellationToken);\n}\n\nfunction getFragmentDownloadPromise(\n    credentialsProvider: SpecialProtocolCredentialsProvider,\n    chunk: FragmentChunk,\n    parameters: MeshSourceParameters,\n    cancellationToken: CancellationToken) {\n  let fragmentDownloadPromise;\n  if (parameters.sharding){\n    fragmentDownloadPromise = getVerifiedFragmentPromise(credentialsProvider, chunk, parameters, cancellationToken);\n  } else {\n    fragmentDownloadPromise = cancellableFetchSpecialOk(\n      credentialsProvider,\n      `${parameters.fragmentUrl}/${chunk.fragmentId}`, {}, responseArrayBuffer,\n      cancellationToken);\n  }\n  return fragmentDownloadPromise;\n}\n\nasync function decodeDracoFragmentChunk(\n    chunk: FragmentChunk, response: ArrayBuffer) {\n  const m = await import(/* webpackChunkName: \"draco\" */ 'neuroglancer/mesh/draco');\n  const rawMesh = await m.decodeDraco(new Uint8Array(response));\n  assignMeshFragmentData(chunk, rawMesh);\n}\n\n@registerSharedObject() export class GrapheneMeshSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(MeshSource), MeshSourceParameters)) {\n  async download(chunk: ManifestChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n    if (isBaseSegmentId(chunk.objectId, parameters.nBitsForLayerId)) {\n      return decodeManifestChunk(chunk, {fragments: []});\n    }\n    let url = `${parameters.manifestUrl}/manifest`;\n    let manifestUrl = `${url}/${chunk.objectId}:${parameters.lod}?verify=1&prepend_seg_ids=1`;\n\n    await cancellableFetchSpecialOk(this.credentialsProvider, manifestUrl, {}, responseJson, cancellationToken)\n        .then(response => decodeManifestChunk(chunk, response));\n  }\n\n  async downloadFragment(chunk: FragmentChunk, cancellationToken: CancellationToken) {\n    const {parameters} = this;\n\n    try {\n      const response = await getFragmentDownloadPromise(\n        undefined, chunk, parameters, cancellationToken);\n      await decodeDracoFragmentChunk(chunk, response);\n    } catch (e) {\n      if (isNotFoundError(e)) {\n        chunk.source!.removeChunk(chunk);\n      }\n      Promise.reject(e);\n    }\n  }\n\n  getFragmentKey(objectKey: string|null, fragmentId: string) {\n    objectKey;\n    return getGrapheneFragmentKey(fragmentId);\n  }\n}\n\nexport class ChunkedGraphChunk extends Chunk {\n  backendOnly = true;\n  chunkGridPosition: Float32Array;\n  source: GrapheneChunkedGraphChunkSource|null = null;\n  segment: Uint64;\n  leaves: Uint64[] = [];\n  chunkDataSize: Uint32Array|null;\n\n  initializeVolumeChunk(key: string, chunkGridPosition: Float32Array) {\n    super.initialize(key);\n    this.chunkGridPosition = Float32Array.from(chunkGridPosition);\n  }\n\n  initializeChunkedGraphChunk(key: string, chunkGridPosition: Float32Array, segment: Uint64) {\n    this.initializeVolumeChunk(key, chunkGridPosition);\n    this.chunkDataSize = null;\n    this.systemMemoryBytes = 16;\n    this.gpuMemoryBytes = 0;\n    this.segment = segment;\n  }\n\n  downloadSucceeded() {\n    this.systemMemoryBytes = 16; // this.segment\n    this.systemMemoryBytes += 16 * this.leaves.length;\n    this.queueManager.updateChunkState(this, ChunkState.SYSTEM_MEMORY_WORKER);\n    if (this.priorityTier < ChunkPriorityTier.RECENT) {\n      this.source!.chunkManager.scheduleUpdateChunkPriorities();\n    }\n    super.downloadSucceeded();\n  }\n\n  freeSystemMemory() {\n    this.leaves = [];\n  }\n}\n\nfunction decodeChunkedGraphChunk(leaves: string[]) {\n  const final: Uint64[] = new Array(leaves.length);\n  for (let i = 0; i < final.length; ++i) {\n    final[i] = Uint64.parseString(leaves[i]);\n  }\n  return final;\n}\n\n@registerSharedObject() export class GrapheneChunkedGraphChunkSource extends\n(WithParameters(WithSharedCredentialsProviderCounterpart<SpecialProtocolCredentials>()(ChunkSource), ChunkedGraphSourceParameters)) {\n  spec: ChunkedGraphChunkSpecification;\n  chunks: Map<string, ChunkedGraphChunk>;\n  tempChunkDataSize: Uint32Array;\n  tempChunkPosition: Float32Array;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.spec = options.spec;\n    const rank = this.spec.rank;\n    this.tempChunkDataSize = new Uint32Array(rank);\n    this.tempChunkPosition = new Float32Array(rank);\n  }\n\n  async download(chunk: ChunkedGraphChunk, cancellationToken: CancellationToken): Promise<void> {\n    let {parameters} = this;\n    let chunkPosition = this.computeChunkBounds(chunk);\n    let chunkDataSize = chunk.chunkDataSize!;\n    let bounds = `${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_` +\n        `${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_` +\n        `${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;\n\n    const request = cancellableFetchSpecialOk(this.credentialsProvider,\n        `${parameters.url}/${chunk.segment}/leaves?int64_as_str=1&bounds=${bounds}`, {}, responseIdentity,\n        cancellationToken);\n    await this.withErrorMessage(\n        request, `Fetching leaves of segment ${chunk.segment} in region ${bounds}: `)\n      .then(res => res.json())\n      .then(res => {\n        chunk.leaves = decodeChunkedGraphChunk(res['leaf_ids'])\n      })\n      .catch(err => console.error(err));\n  }\n\n  getChunk(chunkGridPosition: Float32Array, segment: Uint64) {\n    const key = `${vec3Key(chunkGridPosition)}-${segment}`;\n    let chunk = <ChunkedGraphChunk>this.chunks.get(key);\n\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(ChunkedGraphChunk);\n      chunk.initializeChunkedGraphChunk(key, chunkGridPosition, segment);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  computeChunkBounds(chunk: ChunkedGraphChunk) {\n    return computeChunkBounds(this, chunk);\n  }\n\n  async withErrorMessage(promise: Promise<Response>, errorPrefix: string): Promise<Response> {\n    const response = await promise;\n    if (response.ok) {\n      return response;\n    } else {\n      let msg: string;\n      try {\n        msg = (await response.json())['message'];\n      } catch {\n        msg = await response.text();\n      }\n      throw new Error(`[${response.status}] ${errorPrefix}${msg}`);\n    }\n  }\n}\n\ninterface ChunkedGraphRenderLayerAttachmentState {\n  displayDimensionRenderInfo: DisplayDimensionRenderInfo;\n  transformedSource?: TransformedSource<\n      ChunkedGraphLayer, GrapheneChunkedGraphChunkSource>;\n}\n\nconst tempChunkPosition = vec3.create();\nconst tempCenter = vec3.create();\nconst tempChunkSize = vec3.create();\n\n@registerSharedObject(CHUNKED_GRAPH_LAYER_RPC_ID)\nexport class ChunkedGraphLayer extends withSegmentationLayerBackendState\n(withSharedVisibility(withChunkManager(RenderLayerBackend))) {\n  source: GrapheneChunkedGraphChunkSource;\n  localPosition: SharedWatchableValue<Float32Array>;\n  leafRequestsActive: SharedWatchableValue<boolean>;\n  nBitsForLayerId: SharedWatchableValue<number>;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.source = this.registerDisposer(rpc.getRef<GrapheneChunkedGraphChunkSource>(options['source']));\n    this.localPosition = rpc.get(options.localPosition);\n    this.leafRequestsActive = rpc.get(options.leafRequestsActive);\n    this.nBitsForLayerId = rpc.get(options.nBitsForLayerId);\n\n    this.registerDisposer(this.chunkManager.recomputeChunkPriorities.add(() => {\n      this.updateChunkPriorities();\n      this.debouncedupdateDisplayState();\n    }));\n  }\n\n  attach(attachment: RenderLayerBackendAttachment<RenderedViewBackend, ChunkedGraphRenderLayerAttachmentState>): void {\n    const scheduleUpdateChunkPriorities = () => this.chunkManager.scheduleUpdateChunkPriorities();\n    const {view} = attachment;\n    attachment.registerDisposer(scheduleUpdateChunkPriorities);\n    attachment.registerDisposer(\n        view.projectionParameters.changed.add(scheduleUpdateChunkPriorities));\n    attachment.registerDisposer(view.visibility.changed.add(scheduleUpdateChunkPriorities));\n    attachment.state = {\n      displayDimensionRenderInfo: view.projectionParameters.value.displayDimensionRenderInfo,\n    };\n  }\n\n  // Used for the sliceview to set a limit on when to\n  // make get_leaves to the ChunkedGraph\n  get renderRatioLimit() {\n    return RENDER_RATIO_LIMIT;\n  }\n\n  private updateChunkPriorities() {\n    const {source, chunkManager} = this;\n    chunkManager.registerLayer(this);\n    for (const attachment of this.attachments.values()) {\n      const {view} = attachment;\n      const visibility = view.visibility.value;\n      if (visibility === Number.NEGATIVE_INFINITY) {\n        continue;\n      }\n\n      const attachmentState = attachment.state! as ChunkedGraphRenderLayerAttachmentState;\n      const {transformedSource: tsource} = attachmentState;\n      const projectionParameters = view.projectionParameters.value as SliceViewProjectionParameters;\n\n      if (!tsource) {\n        continue;\n      }\n\n      const pixelSize = projectionParameters.pixelSize * 1.1;\n      const smallestVoxelSize = tsource.effectiveVoxelSize;\n      this.leafRequestsActive.value = this.renderRatioLimit >= pixelSize / Math.min(...smallestVoxelSize);\n      if (!this.leafRequestsActive.value) {\n        continue;\n      }\n\n      const priorityTier = getPriorityTier(visibility);\n      const basePriority = getBasePriority(visibility);\n\n      const {chunkLayout} = tsource;\n      const {size, finiteRank} = chunkLayout;\n\n      const chunkSize = tempChunkSize;\n      const localCenter = tempCenter;\n      vec3.copy(chunkSize, size);\n      for (let i = finiteRank; i < 3; ++i) {\n        chunkSize[i] = 0;\n        localCenter[i] = 0;\n      }\n      const {centerDataPosition} = projectionParameters;\n      chunkLayout.globalToLocalSpatial(localCenter, centerDataPosition);\n\n      forEachPlaneIntersectingVolumetricChunk(\n        projectionParameters, this.localPosition.value, tsource,\n        getNormalizedChunkLayout(projectionParameters, chunkLayout),\n          positionInChunks => {\n        vec3.multiply(tempChunkPosition, positionInChunks, chunkSize);\n        const priority = -vec3.distance(localCenter, tempChunkPosition);\n        const {curPositionInChunks} = tsource;\n\n        forEachVisibleSegment(this, (segment, _) => {\n          if (isBaseSegmentId(segment, this.nBitsForLayerId.value)) return; // TODO maybe support highBitRepresentation?\n          const chunk = source.getChunk(curPositionInChunks, segment.clone());\n          chunkManager.requestChunk(chunk, priorityTier, basePriority + priority);\n          ++this.numVisibleChunksNeeded;\n          if (chunk.state === ChunkState.GPU_MEMORY) {\n            ++this.numVisibleChunksAvailable;\n          }\n        });\n      });\n    }\n  }\n\n  private forEachSelectedRootWithLeaves(\n    callback: (rootObjectKey: string, leaves: Uint64[]) => void) {\n      const {source} = this;\n\n      for (const chunk of source.chunks.values()) {\n        if (chunk.state === ChunkState.SYSTEM_MEMORY_WORKER &&\n            chunk.priorityTier < ChunkPriorityTier.RECENT) {\n          if (this.visibleSegments.has(chunk.segment) && chunk.leaves.length) {\n            callback(chunk.segment.toString(), chunk.leaves);\n          }\n        }\n      }\n  }\n\n  private debouncedupdateDisplayState = debounce(() => {\n    this.updateDisplayState();\n  }, 100);\n\n  private updateDisplayState() {\n    const visibleLeaves = new Map<string, Uint64Set>();\n    const capacities = new Map<string, number>();\n\n    // Reserve\n    this.forEachSelectedRootWithLeaves((rootObjectKey, leaves) => {\n      if (!capacities.has(rootObjectKey)) {\n        capacities.set(rootObjectKey, leaves.length);\n      } else {\n        capacities.set(rootObjectKey, capacities.get(rootObjectKey)! + leaves.length);\n      }\n    });\n\n    // Collect unique leaves\n    this.forEachSelectedRootWithLeaves((rootObjectKey, leaves) => {\n      if (!visibleLeaves.has(rootObjectKey)) {\n        visibleLeaves.set(rootObjectKey, new Uint64Set());\n        visibleLeaves.get(rootObjectKey)!.reserve(capacities.get(rootObjectKey)!);\n        visibleLeaves.get(rootObjectKey)!.add(Uint64.parseString(rootObjectKey));\n      }\n      visibleLeaves.get(rootObjectKey)!.add(leaves);\n    });\n\n    for (const [root, leaves] of visibleLeaves) {\n      // TODO: Delete segments not visible anymore from segmentEquivalences - requires a faster data\n      // structure, though.\n\n      /*if (this.segmentEquivalences.has(Uint64.parseString(root))) {\n        this.segmentEquivalences.delete([...this.segmentEquivalences.setElements(Uint64.parseString(root))].filter(x\n      => !leaves.has(x) && !this.visibleSegments.has(x)));\n      }*/\n      const filteredLeaves = [...leaves].filter(x => !this.segmentEquivalences.has(x));\n\n      const rootInt = Uint64.parseString(root);\n\n      for (const leaf of filteredLeaves) {\n        this.segmentEquivalences.link(rootInt, leaf);\n      }\n    }\n  }\n}\n\nregisterRPC(CHUNKED_GRAPH_RENDER_LAYER_UPDATE_SOURCES_RPC_ID, function(x) {\n  const view = this.get(x.view) as RenderedViewBackend;\n  const layer = this.get(x.layer) as ChunkedGraphLayer;\n  const attachment = layer.attachments.get(view)! as\n      RenderLayerBackendAttachment<RenderedViewBackend, ChunkedGraphRenderLayerAttachmentState>;\n  attachment.state!.transformedSource = deserializeTransformedSources<\n      SliceViewChunkSourceBackend, ChunkedGraphLayer>(\n      this, x.sources, layer)[0][0] as unknown as TransformedSource<\n      ChunkedGraphLayer, GrapheneChunkedGraphChunkSource>;\n  attachment.state!.displayDimensionRenderInfo = x.displayDimensionRenderInfo;\n  layer.chunkManager.scheduleUpdateChunkPriorities();\n});\n"],
  "mappings": "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",
  "names": []
}
